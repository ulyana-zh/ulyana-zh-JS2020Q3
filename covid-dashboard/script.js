(()=>{var e={569:e=>{e.exports=function(e){if(!e)return"0";for(var t=Math.round(e).toString().split("").reverse(),n=[];0!==t.length;)n.push(t.splice(0,3).reverse().join(""));return n.reverse().join(" ")}},435:()=>{({sideKeys:[["~","!","@","#","$","%","^","&","*","(",")","_","+","|","Backspace"],["Tab","Q","W","E","R","T","Y","U","I","O","P","{","}","Delete"],["CapsLock","A","S","D","F","G","H","J","K","L",":",'"',"Enter"],["Shift","Z","X","C","V","B","N","M","<",">","?","Up","Shift"],["Ctrl","Win","Alt","Space","Alt","Left","Down","Right","Ctrl"]],mainKeys:[["`","1","2","3","4","5","6","7","8","9","0","-","=","\\",null],[null,"q","w","e","r","t","y","u","i","o","p","[","]",null],[null,"a","s","d","f","g","h","j","k","l",";","'",null],[null,"z","x","c","v","b","n","m",",",".","/",null]],sideKeysRus:[["Ё","!",'"',"№",";","%",":","?","*","(",")","_","+","/",null],[null,"Й","Ц","У","К","Е","Н","Г","Ш","Щ","З","Х","Ъ",null],[null,"Ф","Ы","В","А","П","Р","О","Л","Д","Ж","Э",null],[null,"Я","Ч","С","М","И","Т","Ь","Б","Ю",",",null]],mainKeysRus:[["ё","1","2","3","4","5","6","7","8","9","0","-","=","\\",null],[null,"й","ц","у","к","е","н","г","ш","щ","з","х","ъ",null],[null,"ф","ы","в","а","п","р","о","л","д","ж","э",null],[null,"я","ч","с","м","и","т","ь","б","ю",".",null]],textarea:null,buttonLanguage:null,shiftActive:!1,languageEnglish:!0,capslock:null,switchKeyboard:null,init:function(){var e=this,t=document.createElement("div");t.classList.add("keyboard","keyboard-off"),t.setAttribute("draggable",!0),t.innerHTML='<div class="close-keyboard">\n      <img src="assets/close.png">\n    </div>';for(var n=0;n<this.sideKeys.length;n+=1){var r=document.createElement("div");switch(n){case 0:r.classList.add("keyboard__row-first");break;case 1:r.classList.add("keyboard__row-second");break;case 2:r.classList.add("keyboard__row-third");break;case 3:r.classList.add("keyboard__row-fourth");break;case 4:r.classList.add("keyboard__row-fifth")}for(var a=0;a<this.sideKeys[n].length;a+=1)if(1===this.sideKeys[n][a].length){var o=document.createElement("div");o.classList.add("key");var i=document.createElement("span");i.classList.add("side-key");var c=document.createElement("span");c.classList.add("main-key");var s=document.createElement("span");s.classList.add("side-key-rus","disabled");var l=document.createElement("span");l.classList.add("main-key-rus","disabled"),i.innerText=this.sideKeys[n][a],c.innerText=this.mainKeys[n][a],s.innerText=this.sideKeysRus[n][a],l.innerText=this.mainKeysRus[n][a],o.appendChild(i),o.appendChild(c),o.appendChild(s),o.appendChild(l),r.appendChild(o)}else{var u=document.createElement("div");u.classList.add("key"),u.classList.add("".concat(this.sideKeys[n][a].toLowerCase()));var d=document.createElement("span");d.innerText=this.sideKeys[n][a],u.appendChild(d),r.appendChild(u)}t.appendChild(r)}this.textarea=document.querySelector(".search-input"),document.body.appendChild(t),this.buttonLanguage=document.querySelector(".key.win");var p=document.createElement("span");p.classList.add("language-side"),p.innerText="Ru";var h=document.createElement("span");h.classList.add("language"),h.innerText="En",this.buttonLanguage.appendChild(p),this.buttonLanguage.appendChild(h);var f=document.querySelectorAll(".key");this.capslock=document.querySelector(".key.capslock"),f.forEach((function(t){t.addEventListener("click",(function(n){switch(n.target.innerText){case"Ru":case"En":case"Win":e.changeLanguage(),e.languageEnglish?e.languageEnglish=!1:e.languageEnglish=!0;break;case"Tab":e.textarea.setRangeText("    ",e.textarea.selectionStart,e.textarea.selectionEnd,"end"),e.textarea.focus();break;case"Backspace":e.backspace();break;case"Delete":e.deleteButton();break;case"CapsLock":e.shift(),e.capslock.classList.toggle("active");break;case"Enter":e.textarea.setRangeText("\n",e.textarea.selectionStart,e.textarea.selectionEnd,"end"),e.textarea.focus();break;case"Shift":e.shift(),f[42].classList.toggle("active"),f[54].classList.toggle("active"),f[42].classList.contains("active")&&f[54].classList.contains("active")?e.shiftActive=!0:e.shiftActive=!1;break;case"Ctrl":case"Alt":break;case"Space":e.textarea.setRangeText(" ",e.textarea.selectionStart,e.textarea.selectionEnd,"end"),e.textarea.focus();break;case"Left":e.left();break;case"Right":e.right();break;case"Up":e.up();break;case"Down":e.down();break;default:if(e.languageEnglish){var r=t.querySelector(".main-key");e.textarea.setRangeText(r.innerText,e.textarea.selectionStart,e.textarea.selectionEnd,"end"),e.textarea.focus()}else{var a=t.querySelector(".main-key-rus");e.textarea.setRangeText(a.innerText,e.textarea.selectionStart,e.textarea.selectionEnd,"end"),e.textarea.focus()}e.shiftActive&&(e.shift(),e.shiftActive=!1,f[42].classList.toggle("active"),f[54].classList.toggle("active"))}}))})),this.switchKeyboard=document.querySelector(".keyboard-icon"),this.switchKeyboard.addEventListener("click",(function(){t.classList.toggle("keyboard-off")})),document.querySelector(".close-keyboard > img").addEventListener("click",(function(){t.classList.add("keyboard-off")})),this.dragAndDrop()},changeLanguage:function(){var e=document.querySelectorAll(".side-key"),t=document.querySelectorAll(".main-key"),n=document.querySelectorAll(".side-key-rus"),r=document.querySelectorAll(".main-key-rus"),a=document.querySelector(".language"),o=document.querySelector(".language-side"),i=a.innerText;a.innerText=o.innerText,o.innerText=i;for(var c=0;c<e.length;c+=1)e[c].classList.toggle("disabled"),t[c].classList.toggle("disabled"),n[c].classList.toggle("disabled"),r[c].classList.toggle("disabled")},backspace:function(){var e=this.textarea.value.slice(0,this.textarea.selectionStart),t=this.textarea.value.slice(this.textarea.selectionEnd),n=this.textarea.selectionStart;this.textarea.value=e.slice(0,-1)+t,this.textarea.focus(),n>0?this.textarea.setSelectionRange(n-1,n-1):this.textarea.setSelectionRange(n,n)},deleteButton:function(){var e=this.textarea.value.slice(0,this.textarea.selectionStart),t=this.textarea.value.slice(this.textarea.selectionEnd),n=this.textarea.selectionStart;this.textarea.value=e+t.slice(1),this.textarea.focus(),this.textarea.value.length,this.textarea.setSelectionRange(n,n)},shift:function(){document.querySelectorAll(".key").forEach((function(e){if(e.querySelector(".side-key")){var t=e.querySelector(".side-key"),n=e.querySelector(".main-key"),r=e.querySelector(".side-key-rus"),a=e.querySelector(".main-key-rus"),o=n.innerHTML,i=a.innerHTML;n.innerHTML=t.innerHTML,t.innerHTML=o,a.innerHTML=r.innerHTML,r.innerHTML=i}}))},left:function(){var e=this.textarea.selectionStart;this.textarea.focus(),e>0?this.textarea.setSelectionRange(e-1,e-1):this.textarea.setSelectionRange(e,e)},right:function(){var e=this.textarea.selectionStart;this.textarea.focus(),e<this.textarea.value.length?this.textarea.setSelectionRange(e+1,e+1):this.textarea.setSelectionRange(e,e)},up:function(){var e=this.textarea.selectionStart;if(this.textarea.focus(),e>0){var t=this.textarea.value.slice(0,this.textarea.selectionStart).length;this.textarea.setSelectionRange(e-t,e-t)}else this.textarea.setSelectionRange(e,e)},down:function(){var e=this.textarea.selectionStart;if(this.textarea.focus(),e<this.textarea.value.length){var t=this.textarea.value.slice(this.textarea.selectionEnd).length;this.textarea.setSelectionRange(e+t,e+t)}else this.textarea.setSelectionRange(e,e)},dragAndDrop:function(){var e=document.querySelector(".keyboard");e.addEventListener("mousedown",(function(t){var n=t.clientX-e.getBoundingClientRect().left,r=t.clientY-e.getBoundingClientRect().top;function a(t,a){e.style.left="".concat(t-n,"px"),e.style.top="".concat(a-r,"px")}function o(e){a(e.pageX,e.pageY)}a(t.pageX,t.pageY),document.addEventListener("mousemove",o),e.addEventListener("mouseup",(function(){document.removeEventListener("mousemove",o)}))})),e.addEventListener("dragstart",(function(e){e.preventDefault()}))}}).init()},573:(e,t,n)=>{"use strict";n.d(t,{Z:()=>c});var r=n(15),a=n.n(r),o=n(645),i=n.n(o)()(a());i.push([e.id,".list__wrapper {\r\n    width: 100%;\r\n    height: calc(60% - 10px);\r\n    background-color: rgba(8, 18, 23, 0.408);\r\n    padding: 10px 20px;\r\n    position: relative;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: flex-start;\r\n}\r\n\r\n.list-container {\r\n    width: 100%;\r\n    height: 80%;\r\n    overflow: hidden;\r\n}\r\n\r\n.list-wrapper {\r\n    width: 100%;\r\n    height: 100%;\r\n    overflow: auto;\r\n    font-size: 2rem;\r\n    position: relative;\r\n}\r\n\r\n.list-wrapper__country-block {\r\n    padding: 2px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    margin-bottom: 5px;\r\n}\r\n\r\n.list-wrapper__country-block:hover {\r\n    cursor: pointer;\r\n    background-color: grey;\r\n    color: white;\r\n}\r\n\r\n.list-wrapper__country-block img {\r\n    width: 30px;\r\n}\r\n\r\n.country-block__count {\r\n    margin-right: 20px;\r\n}\r\n\r\n.scroll::-webkit-scrollbar-track {\r\n\tborder-radius: 10px;\r\n    background-color: #ffffff;\r\n}\r\n\r\n.scroll::-webkit-scrollbar {\r\n    width: 8px;    \r\n    border-radius: 10px;\r\n    background-color: #ffffff;\r\n    margin-left: 20px;\r\n}\r\n\r\n.scroll::-webkit-scrollbar-thumb {\r\n    border-radius: 2px;\r\n    height: 50px;\r\n    background-color: #08121795;\r\n}\r\n\r\n.search-input {\r\n    background-color: rgb(255, 255, 255);\r\n    color: rgba(0, 0, 0, 0.721);\r\n    font-size: 1.5rem;\r\n    padding: 8px 15px;\r\n    width: 100%;\r\n    border: none;\r\n    border-radius: 15px;\r\n    margin-bottom: 10px;\r\n}\r\n\r\n.search-input:active,\r\n.search-input:focus,\r\n.list__select:active,\r\n.list__select:focus {\r\n    border: none;\r\n    outline: none;\r\n}\r\n\r\n.search-input::placeholder {\r\n    color: rgba(142, 142, 142, 0.8);\r\n    font-size: 1.5rem;\r\n    font-family: 'Bebas Neue', cursive;\r\n}\r\n\r\n.list__select {\r\n    padding: 4px 15px;\r\n    background-color: rgb(116, 116, 118);\r\n    box-shadow: inset 0px -1px 1px rgba(255, 255, 255, 0.28), inset 0px 1px 2px rgba(0, 0, 0, 0.25);\r\n    color: rgb(255, 255, 255);\r\n    font-size: 1.5rem;   \r\n    border: none;\r\n    border-radius: 15px;\r\n    margin-bottom: 10px;\r\n    width: 30%;\r\n    font-family: 'Bebas Neue', cursive;\r\n    cursor: pointer;\r\n    position: relative;\r\n}\r\n","",{version:3,sources:["webpack://./src/sass/list/list.css"],names:[],mappings:"AAAA;IACI,WAAW;IACX,wBAAwB;IACxB,wCAAwC;IACxC,kBAAkB;IAClB,kBAAkB;IAClB,aAAa;IACb,sBAAsB;IACtB,2BAA2B;AAC/B;;AAEA;IACI,WAAW;IACX,WAAW;IACX,gBAAgB;AACpB;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,cAAc;IACd,eAAe;IACf,kBAAkB;AACtB;;AAEA;IACI,YAAY;IACZ,aAAa;IACb,8BAA8B;IAC9B,mBAAmB;IACnB,kBAAkB;AACtB;;AAEA;IACI,eAAe;IACf,sBAAsB;IACtB,YAAY;AAChB;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,kBAAkB;AACtB;;AAEA;CACC,mBAAmB;IAChB,yBAAyB;AAC7B;;AAEA;IACI,UAAU;IACV,mBAAmB;IACnB,yBAAyB;IACzB,iBAAiB;AACrB;;AAEA;IACI,kBAAkB;IAClB,YAAY;IACZ,2BAA2B;AAC/B;;AAEA;IACI,oCAAoC;IACpC,2BAA2B;IAC3B,iBAAiB;IACjB,iBAAiB;IACjB,WAAW;IACX,YAAY;IACZ,mBAAmB;IACnB,mBAAmB;AACvB;;AAEA;;;;IAII,YAAY;IACZ,aAAa;AACjB;;AAEA;IACI,+BAA+B;IAC/B,iBAAiB;IACjB,kCAAkC;AACtC;;AAEA;IACI,iBAAiB;IACjB,oCAAoC;IACpC,+FAA+F;IAC/F,yBAAyB;IACzB,iBAAiB;IACjB,YAAY;IACZ,mBAAmB;IACnB,mBAAmB;IACnB,UAAU;IACV,kCAAkC;IAClC,eAAe;IACf,kBAAkB;AACtB",sourcesContent:[".list__wrapper {\r\n    width: 100%;\r\n    height: calc(60% - 10px);\r\n    background-color: rgba(8, 18, 23, 0.408);\r\n    padding: 10px 20px;\r\n    position: relative;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: flex-start;\r\n}\r\n\r\n.list-container {\r\n    width: 100%;\r\n    height: 80%;\r\n    overflow: hidden;\r\n}\r\n\r\n.list-wrapper {\r\n    width: 100%;\r\n    height: 100%;\r\n    overflow: auto;\r\n    font-size: 2rem;\r\n    position: relative;\r\n}\r\n\r\n.list-wrapper__country-block {\r\n    padding: 2px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    margin-bottom: 5px;\r\n}\r\n\r\n.list-wrapper__country-block:hover {\r\n    cursor: pointer;\r\n    background-color: grey;\r\n    color: white;\r\n}\r\n\r\n.list-wrapper__country-block img {\r\n    width: 30px;\r\n}\r\n\r\n.country-block__count {\r\n    margin-right: 20px;\r\n}\r\n\r\n.scroll::-webkit-scrollbar-track {\r\n\tborder-radius: 10px;\r\n    background-color: #ffffff;\r\n}\r\n\r\n.scroll::-webkit-scrollbar {\r\n    width: 8px;    \r\n    border-radius: 10px;\r\n    background-color: #ffffff;\r\n    margin-left: 20px;\r\n}\r\n\r\n.scroll::-webkit-scrollbar-thumb {\r\n    border-radius: 2px;\r\n    height: 50px;\r\n    background-color: #08121795;\r\n}\r\n\r\n.search-input {\r\n    background-color: rgb(255, 255, 255);\r\n    color: rgba(0, 0, 0, 0.721);\r\n    font-size: 1.5rem;\r\n    padding: 8px 15px;\r\n    width: 100%;\r\n    border: none;\r\n    border-radius: 15px;\r\n    margin-bottom: 10px;\r\n}\r\n\r\n.search-input:active,\r\n.search-input:focus,\r\n.list__select:active,\r\n.list__select:focus {\r\n    border: none;\r\n    outline: none;\r\n}\r\n\r\n.search-input::placeholder {\r\n    color: rgba(142, 142, 142, 0.8);\r\n    font-size: 1.5rem;\r\n    font-family: 'Bebas Neue', cursive;\r\n}\r\n\r\n.list__select {\r\n    padding: 4px 15px;\r\n    background-color: rgb(116, 116, 118);\r\n    box-shadow: inset 0px -1px 1px rgba(255, 255, 255, 0.28), inset 0px 1px 2px rgba(0, 0, 0, 0.25);\r\n    color: rgb(255, 255, 255);\r\n    font-size: 1.5rem;   \r\n    border: none;\r\n    border-radius: 15px;\r\n    margin-bottom: 10px;\r\n    width: 30%;\r\n    font-family: 'Bebas Neue', cursive;\r\n    cursor: pointer;\r\n    position: relative;\r\n}\r\n"],sourceRoot:""}]);const c=i},311:(e,t,n)=>{"use strict";n.d(t,{Z:()=>c});var r=n(15),a=n.n(r),o=n(645),i=n.n(o)()(a());i.push([e.id,".table__wrapper {\r\n    width: 100%;\r\n    height: 40%;\r\n    background-color: rgba(8, 18, 23, 0.408);\r\n    margin-bottom: 10px;\r\n    position: relative;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n}\r\n\r\n\r\n\r\n.table-content {\r\n    width: 100%;\r\n    height: 100%;\r\n    display: grid;\r\n    grid-template-columns: repeat(3, 1fr);\r\n    grid-template-rows: repeat(2, 1fr);\r\n    font-size: 2rem;\r\n}\r\n\r\n.table-content > div {\r\n    padding: 10px;\r\n}\r\n\r\n.table-values-wrapper {\r\n    width: 100%;\r\n    height: 60%;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\n\r\n.table-content__name {\r\n    grid-column-start: 1;\r\n    grid-column-end: 4;\r\n    background-color: #08121753;\r\n    border-bottom: 2px solid rgba(255, 255, 255, 0.238);\r\n    font-size: 3rem;\r\n}\r\n\r\n.table-cell {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;  \r\n}\r\n\r\n.table-content__cases:hover,\r\n.table-content__deaths:hover,\r\n.table-content__recovered:hover {\r\n    background-color: #0d151990;\r\n}\r\n\r\n.modes-wrapper {\r\n    width: 100%;\r\n    height: 40%;\r\n    font-size: 2rem;\r\n    padding-bottom: 10px;\r\n    display: grid;\r\n    grid-template-columns: repeat(2, 1fr);\r\n    border-top: 2px solid #08121795;\r\n}\r\n\r\n.modes-wrapper__cell {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\n\r\n.modes-wrapper__cell > div > input,\r\n.modes-wrapper__cell > div > label {\r\n    cursor: pointer;\r\n}\r\n\r\n","",{version:3,sources:["webpack://./src/sass/table/table.css"],names:[],mappings:"AAAA;IACI,WAAW;IACX,WAAW;IACX,wCAAwC;IACxC,mBAAmB;IACnB,kBAAkB;IAClB,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,8BAA8B;AAClC;;;;AAIA;IACI,WAAW;IACX,YAAY;IACZ,aAAa;IACb,qCAAqC;IACrC,kCAAkC;IAClC,eAAe;AACnB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,WAAW;IACX,WAAW;IACX,aAAa;IACb,mBAAmB;IACnB,uBAAuB;AAC3B;;AAEA;IACI,oBAAoB;IACpB,kBAAkB;IAClB,2BAA2B;IAC3B,mDAAmD;IACnD,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;;;IAGI,2BAA2B;AAC/B;;AAEA;IACI,WAAW;IACX,WAAW;IACX,eAAe;IACf,oBAAoB;IACpB,aAAa;IACb,qCAAqC;IACrC,+BAA+B;AACnC;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,uBAAuB;AAC3B;;AAEA;;IAEI,eAAe;AACnB",sourcesContent:[".table__wrapper {\r\n    width: 100%;\r\n    height: 40%;\r\n    background-color: rgba(8, 18, 23, 0.408);\r\n    margin-bottom: 10px;\r\n    position: relative;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n}\r\n\r\n\r\n\r\n.table-content {\r\n    width: 100%;\r\n    height: 100%;\r\n    display: grid;\r\n    grid-template-columns: repeat(3, 1fr);\r\n    grid-template-rows: repeat(2, 1fr);\r\n    font-size: 2rem;\r\n}\r\n\r\n.table-content > div {\r\n    padding: 10px;\r\n}\r\n\r\n.table-values-wrapper {\r\n    width: 100%;\r\n    height: 60%;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\n\r\n.table-content__name {\r\n    grid-column-start: 1;\r\n    grid-column-end: 4;\r\n    background-color: #08121753;\r\n    border-bottom: 2px solid rgba(255, 255, 255, 0.238);\r\n    font-size: 3rem;\r\n}\r\n\r\n.table-cell {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;  \r\n}\r\n\r\n.table-content__cases:hover,\r\n.table-content__deaths:hover,\r\n.table-content__recovered:hover {\r\n    background-color: #0d151990;\r\n}\r\n\r\n.modes-wrapper {\r\n    width: 100%;\r\n    height: 40%;\r\n    font-size: 2rem;\r\n    padding-bottom: 10px;\r\n    display: grid;\r\n    grid-template-columns: repeat(2, 1fr);\r\n    border-top: 2px solid #08121795;\r\n}\r\n\r\n.modes-wrapper__cell {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\n\r\n.modes-wrapper__cell > div > input,\r\n.modes-wrapper__cell > div > label {\r\n    cursor: pointer;\r\n}\r\n\r\n"],sourceRoot:""}]);const c=i},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var a={};if(r)for(var o=0;o<this.length;o++){var i=this[o][0];null!=i&&(a[i]=!0)}for(var c=0;c<e.length;c++){var s=[].concat(e[c]);r&&a[s[0]]||(n&&(s[2]?s[2]="".concat(n," and ").concat(s[2]):s[2]=n),t.push(s))}},t}},15:e=>{"use strict";function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}e.exports=function(e){var n,r,a=(r=4,function(e){if(Array.isArray(e))return e}(n=e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,a=!1,o=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==c.return||c.return()}finally{if(a)throw o}}return n}}(n,r)||function(e,n){if(e){if("string"==typeof e)return t(e,n);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?t(e,n):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=a[1],i=a[3];if("function"==typeof btoa){var c=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),l="/*# ".concat(s," */"),u=i.sources.map((function(e){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(e," */")}));return[o].concat(u).concat([l]).join("\n")}return[o].join("\n")}},666:e=>{var t=function(e){"use strict";var t,n=Object.prototype,r=n.hasOwnProperty,a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",i=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function s(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{s({},"")}catch(e){s=function(e,t,n){return e[t]=n}}function l(e,t,n,r){var a=t&&t.prototype instanceof m?t:m,o=Object.create(a.prototype),i=new _(r||[]);return o._invoke=function(e,t,n){var r=d;return function(a,o){if(r===h)throw new Error("Generator is already running");if(r===f){if("throw"===a)throw o;return S()}for(n.method=a,n.arg=o;;){var i=n.delegate;if(i){var c=L(i,n);if(c){if(c===v)continue;return c}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===d)throw r=f,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=h;var s=u(e,t,n);if("normal"===s.type){if(r=n.done?f:p,s.arg===v)continue;return{value:s.arg,done:n.done}}"throw"===s.type&&(r=f,n.method="throw",n.arg=s.arg)}}}(e,n,i),o}function u(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=l;var d="suspendedStart",p="suspendedYield",h="executing",f="completed",v={};function m(){}function g(){}function A(){}var y={};y[o]=function(){return this};var b=Object.getPrototypeOf,C=b&&b(b(I([])));C&&C!==n&&r.call(C,o)&&(y=C);var x=A.prototype=m.prototype=Object.create(y);function k(e){["next","throw","return"].forEach((function(t){s(e,t,(function(e){return this._invoke(t,e)}))}))}function w(e,t){function n(a,o,i,c){var s=u(e[a],e,o);if("throw"!==s.type){var l=s.arg,d=l.value;return d&&"object"==typeof d&&r.call(d,"__await")?t.resolve(d.__await).then((function(e){n("next",e,i,c)}),(function(e){n("throw",e,i,c)})):t.resolve(d).then((function(e){l.value=e,i(l)}),(function(e){return n("throw",e,i,c)}))}c(s.arg)}var a;this._invoke=function(e,r){function o(){return new t((function(t,a){n(e,r,t,a)}))}return a=a?a.then(o,o):o()}}function L(e,n){var r=e.iterator[n.method];if(r===t){if(n.delegate=null,"throw"===n.method){if(e.iterator.return&&(n.method="return",n.arg=t,L(e,n),"throw"===n.method))return v;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var a=u(r,e.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,v;var o=a.arg;return o?o.done?(n[e.resultName]=o.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,v):o:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,v)}function B(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function E(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function _(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(B,this),this.reset(!0)}function I(e){if(e){var n=e[o];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var a=-1,i=function n(){for(;++a<e.length;)if(r.call(e,a))return n.value=e[a],n.done=!1,n;return n.value=t,n.done=!0,n};return i.next=i}}return{next:S}}function S(){return{value:t,done:!0}}return g.prototype=x.constructor=A,A.constructor=g,g.displayName=s(A,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,A):(e.__proto__=A,s(e,c,"GeneratorFunction")),e.prototype=Object.create(x),e},e.awrap=function(e){return{__await:e}},k(w.prototype),w.prototype[i]=function(){return this},e.AsyncIterator=w,e.async=function(t,n,r,a,o){void 0===o&&(o=Promise);var i=new w(l(t,n,r,a),o);return e.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},k(x),s(x,c,"Generator"),x[o]=function(){return this},x.toString=function(){return"[object Generator]"},e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},e.values=I,_.prototype={constructor:_,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(E),!e)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function a(r,a){return c.type="throw",c.arg=e,n.next=r,a&&(n.method="next",n.arg=t),!!a}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],c=i.completion;if("root"===i.tryLoc)return a("end");if(i.tryLoc<=this.prev){var s=r.call(i,"catchLoc"),l=r.call(i,"finallyLoc");if(s&&l){if(this.prev<i.catchLoc)return a(i.catchLoc,!0);if(this.prev<i.finallyLoc)return a(i.finallyLoc)}else if(s){if(this.prev<i.catchLoc)return a(i.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return a(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var a=this.tryEntries[n];if(a.tryLoc<=this.prev&&r.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var o=a;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var i=o?o.completion:{};return i.type=e,i.arg=t,o?(this.method="next",this.next=o.finallyLoc,v):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),v},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),E(n),v}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var a=r.arg;E(n)}return a}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,r){return this.delegate={iterator:I(e),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=t),v}},e}(e.exports);try{regeneratorRuntime=t}catch(e){Function("r","regeneratorRuntime = r")(t)}},379:(e,t,n)=>{"use strict";var r,a=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),o=[];function i(e){for(var t=-1,n=0;n<o.length;n++)if(o[n].identifier===e){t=n;break}return t}function c(e,t){for(var n={},r=[],a=0;a<e.length;a++){var c=e[a],s=t.base?c[0]+t.base:c[0],l=n[s]||0,u="".concat(s," ").concat(l);n[s]=l+1;var d=i(u),p={css:c[1],media:c[2],sourceMap:c[3]};-1!==d?(o[d].references++,o[d].updater(p)):o.push({identifier:u,updater:v(p,t),references:1}),r.push(u)}return r}function s(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var o=n.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var i=a(e.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(t)}return t}var l,u=(l=[],function(e,t){return l[e]=t,l.filter(Boolean).join("\n")});function d(e,t,n,r){var a=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=u(t,a);else{var o=document.createTextNode(a),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(o,i[t]):e.appendChild(o)}}function p(e,t,n){var r=n.css,a=n.media,o=n.sourceMap;if(a?e.setAttribute("media",a):e.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var h=null,f=0;function v(e,t){var n,r,a;if(t.singleton){var o=f++;n=h||(h=s(t)),r=d.bind(null,n,o,!1),a=d.bind(null,n,o,!0)}else n=s(t),r=p.bind(null,n,t),a=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else a()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var n=c(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var a=i(n[r]);o[a].references--}for(var s=c(e,t),l=0;l<n.length;l++){var u=i(n[l]);0===o[u].references&&(o[u].updater(),o.splice(u,1))}n=s}}}},368:(e,t,n)=>{"use strict";e.exports=n.p+"./assets/close.svg"},899:(e,t,n)=>{"use strict";e.exports=n.p+"./assets/globe.png"},483:(e,t,n)=>{"use strict";e.exports=n.p+"./assets/legend.svg"},530:(e,t,n)=>{"use strict";e.exports=n.p+"./assets/marker.svg"},892:(e,t,n)=>{"use strict";e.exports=n.p+"./assets/print.svg"}},t={};function n(r){if(t[r])return t[r].exports;var a=t[r]={id:r,exports:{}};return e[r](a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),(()=>{"use strict";function e(e,t,n,r,a,o,i){try{var c=e[o](i),s=c.value}catch(e){return void n(e)}c.done?t(s):Promise.resolve(s).then(r,a)}function t(t){return function(){var n=this,r=arguments;return new Promise((function(a,o){var i=t.apply(n,r);function c(t){e(i,a,o,c,s,"next",t)}function s(t){e(i,a,o,c,s,"throw",t)}c(void 0)}))}}var r="https://disease.sh/v3/covid-19/all",a="https://disease.sh/v3/covid-19/countries",o=1e5;const i={_sendRequest:function(e){return t(regeneratorRuntime.mark((function t(){var n;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,fetch(e);case 2:return n=t.sent,t.abrupt("return",n.json());case 4:case"end":return t.stop()}}),t)})))()},_initModeForData:function(e,t){switch(t){case"ALL-TIME":return{area:e.country?e.country:"Global",cases:e.cases,deaths:e.deaths,recovered:e.recovered};case"TODAY":return{area:e.country?e.country:"Global",cases:e.todayCases,deaths:e.todayDeaths,recovered:e.todayRecovered};case"RELATIVE-ALL-TIME":return{area:e.country?e.country:"Global",cases:Number((e.casesPerOneMillion/10).toFixed(3)),deaths:Number((e.deathsPerOneMillion/10).toFixed(3)),recovered:Number((e.recoveredPerOneMillion/10).toFixed(3))};case"RELATIVE-TODAY":return{area:e.country?e.country:"Global",cases:Number((e.todayCases*o/e.population).toFixed(3)),deaths:Number((e.todayDeaths*o/e.population).toFixed(3)),recovered:Number((e.todayRecovered*o/e.population).toFixed(3))}}},_getDataForGlobal:function(e,t){var n=this;return this._sendRequest(e).then((function(e){return n._initModeForData(e,t)}))},_getDataForCountry:function(e){return this._sendRequest(a).then((function(t){return t.find((function(t){return t.countryInfo.iso3===e}))}))},getGlobalData:function(){return this._getDataForGlobal(r,"ALL-TIME")},getGlobalTodayData:function(){return this._getDataForGlobal(r,"TODAY")},getGlobalRelativeData:function(){return this._getDataForGlobal(r,"RELATIVE-ALL-TIME")},getGlobalTodayRelativeData:function(){return this._getDataForGlobal(r,"RELATIVE-TODAY")},getAllCountriesData:function(){return this._sendRequest(a).then((function(e){return e.map((function(e){return{id:e.countryInfo.iso3,area:e.country,cases:e.cases,deaths:e.deaths,recovered:e.recovered,flag:e.countryInfo.flag}}))}))},getCountryData:function(e){var n=this;return t(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.t0=n,t.next=3,n._getDataForCountry(e);case 3:return t.t1=t.sent,t.abrupt("return",t.t0._initModeForData.call(t.t0,t.t1,"ALL-TIME"));case 5:case"end":return t.stop()}}),t)})))()},getCountryTodayData:function(e){var n=this;return t(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.t0=n,t.next=3,n._getDataForCountry(e);case 3:return t.t1=t.sent,t.abrupt("return",t.t0._initModeForData.call(t.t0,t.t1,"TODAY"));case 5:case"end":return t.stop()}}),t)})))()},getCountryRelativeData:function(e){var n=this;return t(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.t0=n,t.next=3,n._getDataForCountry(e);case 3:return t.t1=t.sent,t.abrupt("return",t.t0._initModeForData.call(t.t0,t.t1,"RELATIVE-ALL-TIME"));case 5:case"end":return t.stop()}}),t)})))()},getCountryTodayRelativeData:function(e){var n=this;return t(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.t0=n,t.next=3,n._getDataForCountry(e);case 3:return t.t1=t.sent,t.abrupt("return",t.t0._initModeForData.call(t.t0,t.t1,"RELATIVE-TODAY"));case 5:case"end":return t.stop()}}),t)})))()},getCountryFlagUrl:function(e){return this._getDataForCountry(e).then((function(e){return e.countryInfo.flag}))},getCountryCoordinates:function(e){return this._getDataForCountry(e).then((function(e){return{lat:e.countryInfo.lat,long:e.countryInfo.long}}))},getPopulation:function(e){var n=this;return t(regeneratorRuntime.mark((function t(){var r;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,n._sendRequest(a);case 2:return r=t.sent,t.abrupt("return",r.filter((function(t){return t.country===e})).map((function(e){return e.population}))[0]);case 4:case"end":return t.stop()}}),t)})))()},getPopulationGlobal:function(){var e=this;return t(regeneratorRuntime.mark((function t(){var n;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,e._sendRequest(r);case 2:return n=t.sent,t.abrupt("return",n);case 4:case"end":return t.stop()}}),t)})))()},getHistoricalGlobalData:function(){var e=new Date("2020-04-15T00:00:00"),t=new Date,n=Math.floor((t.getTime()-e.getTime())/864e5),r="https://disease.sh/v3/covid-19/historical/all?lastdays=".concat(n);return fetch(r).then((function(e){return e.json()}))},getHistoricalGlobalRates:function(){var e=this;return t(regeneratorRuntime.mark((function t(){var n;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,e.getPopulationGlobal();case 2:return n=t.sent,t.abrupt("return",e.getHistoricalGlobalData().then((function(e){return{dates:Object.keys(e.cases),cases:Object.values(e.cases),deaths:Object.values(e.deaths),recovered:Object.values(e.recovered),population:n.population}})));case 4:case"end":return t.stop()}}),t)})))()},getAllRatesForEachCountry:function(e){var t=new Date("2020-04-15T00:00:00"),n="".concat("https://api.covid19api.com/total/country/").concat(e);return fetch(n).then((function(e){return e.json()})).then((function(e){return e.filter((function(e){return new Date(e.Date)>t})).sort()})).catch((function(e){return console.log(e)}))},getRatesForEachCountry:function(e){var n=this;return t(regeneratorRuntime.mark((function t(){var r;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,n.getPopulation(e);case 2:return r=t.sent,t.abrupt("return",n.getAllRatesForEachCountry(e).then((function(e){return{cases:e.map((function(e){return e.Confirmed})),deaths:e.map((function(e){return e.Deaths})),recovered:e.map((function(e){return e.Recovered})),population:r}})).catch((function(e){return console.log(e)})));case 4:case"end":return t.stop()}}),t)})))()}},c={isGlobal:!0,currentCountry:null,currentCountryName:null,currentListMode:"cases",searchValue:"",searchedList:null,currentList:null,allCountriesList:null,getCurrentCountryName:function(){return this.isGlobal?"Global":this.currentCountryName}};function s(e,t,n,r,a,o,i){try{var c=e[o](i),s=c.value}catch(e){return void n(e)}c.done?t(s):Promise.resolve(s).then(r,a)}function l(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var o=e.apply(t,n);function i(e){s(o,r,a,i,c,"next",e)}function c(e){s(o,r,a,i,c,"throw",e)}i(void 0)}))}}var u=n(666),d=function(e){for(var t=[],n=0;n<e.length-1;n++)t[n]=e[n+1]-e[n];return t},p=function(e){var t=1e6,n=1e5,r=[],a=[],o=[],i=[];e&&(e.dates&&e.dates.forEach((function(e){return r.push(e)})),e.cases.forEach((function(e){return a.push(e)})),e.deaths.forEach((function(e){return o.push(e)})),e.recovered.forEach((function(e){return i.push(e)})));var c=d(a).filter((function(e){return e<t&&e>=0})),s=d(o).filter((function(e){return e>=0})),l=d(i).filter((function(e){return e>=0&&e<t})),u=a.map((function(t){return(t/e.population*n).toFixed(2)})),p=o.map((function(t){return(t/e.population*n).toFixed(2)})),h=i.map((function(t){return(t/e.population*n).toFixed(2)})),f=c.map((function(t){return(t/e.population*n).toFixed(2)})),v=s.map((function(t){return(t/e.population*n).toFixed(2)})),m=l.map((function(t){return(t/e.population*n).toFixed(2)}));return{dates:r,cases:a,deaths:o,recovered:i,casesDay:c,deathsDay:s,recoveredDay:l,casesRelative:u,deathsRelative:p,recoveredRelative:h,casesRelativeDay:f,deathsRelativeDay:v,recoveredRelativeDay:m}};function h(){return f.apply(this,arguments)}function f(){return(f=l(u.mark((function e(){var t;return u.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,i.getHistoricalGlobalRates();case 2:return t=e.sent,e.abrupt("return",p(t));case 4:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function v(e){return m.apply(this,arguments)}function m(){return(m=l(u.mark((function e(t){var n;return u.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,i.getRatesForEachCountry(t);case 2:return n=e.sent,e.abrupt("return",p(n));case 4:case"end":return e.stop()}}),e)})))).apply(this,arguments)}var g=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"Global";e.backgroundColor="rgba(234,28,36,0.6)",e.label="Cases ".concat(n),t.config.type="bar",t.update()},A=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"Global";e.backgroundColor="white",e.label="Deaths ".concat(n),t.config.type="bar",t.update()},y=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"Global";e.backgroundColor="green",e.label="Recovered ".concat(n),t.config.type="bar",t.update()},b=function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"Global";timeChoice1.checked&&allCases.checked&&rangeChoice1.checked&&(e.data=n.cases,g(e,t,r)),timeChoice1.checked&&allDeaths.checked&&rangeChoice1.checked&&(e.data=n.deaths,A(e,t,r)),timeChoice1.checked&&allRecovered.checked&&rangeChoice1.checked&&(e.data=n.recovered,y(e,t,r)),timeChoice2.checked&&allCases.checked&&rangeChoice1.checked&&(e.data=n.casesDay,g(e,t,r)),timeChoice2.checked&&allDeaths.checked&&rangeChoice1.checked&&(e.data=n.deathsDay,A(e,t,r)),timeChoice2.checked&&allRecovered.checked&&rangeChoice1.checked&&(e.data=n.recoveredDay,y(e,t,r)),timeChoice1.checked&&allCases.checked&&rangeChoice2.checked&&(e.data=n.casesRelative,g(e,t,r)),timeChoice1.checked&&allDeaths.checked&&rangeChoice2.checked&&(e.data=n.deathsRelative,A(e,t,r)),timeChoice1.checked&&allRecovered.checked&&rangeChoice2.checked&&(e.data=n.recoveredRelative,y(e,t,r)),timeChoice2.checked&&allCases.checked&&rangeChoice2.checked&&(e.data=n.casesRelativeDay,g(e,t,r)),timeChoice2.checked&&allDeaths.checked&&rangeChoice2.checked&&(e.data=n.deathsRelativeDay,A(e,t,r)),timeChoice2.checked&&allRecovered.checked&&rangeChoice2.checked&&(e.data=n.recoveredRelativeDay,y(e,t,r))};function C(e,t){return x.apply(this,arguments)}function x(){return(x=l(u.mark((function e(t,n){var r;return u.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,h();case 2:r=e.sent,b(t,n,r);case 4:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function k(e,t,n){return w.apply(this,arguments)}function w(){return(w=l(u.mark((function e(t,n,r){var a;return u.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,v(t);case 2:a=e.sent,b(n,r,a,t);case 4:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function B(){return(B=l(u.mark((function e(){var t,n,r,a,o,i,s;return u.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=document.getElementById("chart").getContext("2d"),e.next=3,h();case 3:return n=e.sent,r={type:"bar",data:{labels:n.dates,datasets:[{label:"Cases",data:n.cases,backgroundColor:"rgba(234,28,36,0.6)",borderWidth:1}]},options:{scales:{yAxes:[{beginAtZero:!0,gridLines:{color:"rgba(218, 218, 218, 0.21)"},ticks:{callback:function(e,t){if(t%1==0)return"".concat(Math.trunc(e/1e3),"k")},fontColor:"rgba(218, 218, 218, 0.80)",fontFamily:"Bebas Neue",fontSize:12}}],xAxes:[{type:"time",position:"bottom",time:{tooltipFormat:"DD/MM/YY",unit:"month",stepSize:2},gridLines:{color:"rgba(218, 218, 218, 0.21)",borderDash:[10]},ticks:{fontColor:"rgba(218, 218, 218, 0.80)",fontFamily:"Bebas Neue",fontSize:12}}]},legend:{display:!1,labels:{fontColor:"white",fontSize:18}}}},a=new Chart(t,r),o=a.config.data.datasets[0],(i=document.querySelector(".search-input")).addEventListener("input",(function(){i.value||C(o,a)})),document.body.addEventListener("click",(function(){s=c.getCurrentCountryName(),c.isGlobal&&!s||"Global"===s?C(o,a):k("".concat(s),o,a)})),e.abrupt("return",a);case 11:case"end":return e.stop()}}),e)})))).apply(this,arguments)}var E=n(379),_=n.n(E),I=n(311);_()(I.Z,{insert:"head",singleton:!1}),I.Z.locals;var S=n(569);const R=function(e){tableArea.textContent=e.area,tableCases.textContent=S(e.cases),tableDeaths.textContent=S(e.deaths),tableRecovered.textContent=S(e.recovered)},T=function(){var e,t;document.querySelector("#table-container").append(((t=document.createElement("div")).classList.add("table-values-wrapper"),t.innerHTML='<div class="table-content">   <div class="table-content__name table-cell"><span id="tableArea">-</span></div>   <div class="table-content__cases table-cell"><span>Cases:</span><span id="tableCases">-</span></div>   <div style="color: red;" class="table-content__deaths table-cell"><span>Deaths:</span><span id="tableDeaths">-</span></div>   <div style="color: green;" class="table-content__recovered table-cell"><span>Recovered:</span><span id="tableRecovered">-</span></div></div>',t),((e=document.createElement("div")).classList.add("modes-wrapper"),e.innerHTML='<div class="modes-wrapper__cell">   <p>Time period:</p>   <div>       <input type="radio" id="timeChoice1" name="time" value="allTime" checked>       <label for="timeChoice1">All time</label>       <input style="margin-left: 10px;" type="radio" id="timeChoice2" name="time" value="today">       <label for="timeChoice2">Today</label>   </div></div><div class="modes-wrapper__cell">   <p>Range of values:</p>   <div>       <input type="radio" id="rangeChoice1" name="range" value="absolute" checked>       <label for="rangeChoice1">Absolute</label>       <input style="margin-left: 10px;" type="radio" id="rangeChoice2" name="range" value="relative">       <label for="rangeChoice2">Relative</label>   </div></div>',e.querySelectorAll("input").forEach((function(e){e.addEventListener("change",(function(){switch(c.isGlobal){case!0:timeChoice1.checked&&rangeChoice1.checked&&i.getGlobalData().then((function(e){return R(e)})),timeChoice1.checked&&rangeChoice2.checked&&i.getGlobalRelativeData().then((function(e){return R(e)})),timeChoice2.checked&&rangeChoice1.checked&&i.getGlobalTodayData().then((function(e){return R(e)})),timeChoice2.checked&&rangeChoice2.checked&&i.getGlobalTodayRelativeData().then((function(e){return R(e)}));break;case!1:timeChoice1.checked&&rangeChoice1.checked&&i.getCountryData(c.currentCountry).then((function(e){return R(e)})),timeChoice1.checked&&rangeChoice2.checked&&i.getCountryRelativeData(c.currentCountry).then((function(e){return R(e)})),timeChoice2.checked&&rangeChoice1.checked&&i.getCountryTodayData(c.currentCountry).then((function(e){return R(e)})),timeChoice2.checked&&rangeChoice2.checked&&i.getCountryTodayRelativeData(c.currentCountry).then((function(e){return R(e)}))}}))})),e)),i.getGlobalData().then((function(e){R(e)}))};var D=n(573);_()(D.Z,{insert:"head",singleton:!1}),D.Z.locals;var q=n(569);const j=function(e){var t=document.createElement("div");t.classList.add("list-container");var n=document.createElement("div");n.classList.add("list-wrapper","scroll"),t.append(n);var r=document.querySelector(".search-input"),a=c.currentListMode;return e.sort((function(e,t){return t[a]-e[a]})),e.forEach((function(e){var t=document.createElement("div");t.innerHTML='<div class="list-wrapper__country-block">\n                <div style="display: flex">\n                    <img style="margin-right: 5px;" src='.concat(e.flag,'>\n                    <div style="margin-right: 10px;">').concat(e.area,'</div>\n                </div>\n                <div class="country-block__count">').concat(q(e[a]),"</div>\n            </div>"),t.addEventListener("click",(function(){c.isGlobal=!1,c.currentCountry=e.id,c.currentCountryName=e.area,timeChoice1.checked=!0,rangeChoice1.checked=!0,R(e),r.value=e.area})),r.addEventListener("input",(function(){console.log(r.value),r.value||(c.isGlobal=!0,c.currentCountry="Global")})),n.append(t)})),t};n(530),n(483),n(368);var M={selectElement:null,init:function(){var e=this;this.selectElement=document.createElement("select"),this.selectElement.classList.add("select-map"),this.selectElement.innerHTML='<option value="cases" selected>Cases</option>\n    <option value="deaths">Deaths</option>\n    <option value="recovered">Recovered</option>',this.selectElement.addEventListener("change",(function(){F.setMarkers(e.selectElement.value)})),document.querySelector(".map__wrapper").appendChild(this.selectElement)}};M.init();var F={map:null,mapOptions:{center:[17,40],zoom:2,minZoom:2,maxZoom:10,worldCopyJump:!0},data:null,buttonOpenLegend:null,buttonCloseLegend:null,legend:null,init:function(){var e=this;this.map=new L.map("map",this.mapOptions),this.map.setMaxBounds([[85,360],[-85,-360]]);var t=new L.TileLayer("https://api.mapbox.com/styles/v1/rhjje/ckiovl3j355s917s7xr7f0dp3/tiles/256/{z}/{x}/{y}@2x?access_token=pk.eyJ1IjoicmhqamUiLCJhIjoiY2tpb3ZrempwMWdmdjJxcGs2aXd6ZDBkZCJ9.vfPqNa2OHBkAWbQFi8RzkA");this.map.addLayer(t),fetch("https://corona.lmao.ninja/v2/countries").then((function(e){return e.json()})).then((function(t){e.data=t,F.setMarkers(M.selectElement.value)})),this.buttonOpenLegend=document.querySelector(".map-legend-button > img"),this.legend=document.querySelector(".map-legend-content"),this.buttonOpenLegend.addEventListener("click",(function(){e.legend.classList.remove("disabled")}))},setMarkers:function(e){var t=this,n=[];this.data.forEach((function(t){var r={latitude:t.countryInfo.lat,longitude:t.countryInfo.long,country:t.country};for(var a in t)a===e&&(r.selectValue=t[a]);n.push(r)})),n.sort((function(e,t){return e.selectValue>t.selectValue?1:e.selectValue<t.selectValue?-1:0}));var r=document.querySelector(".map-legend-content");r.innerHTML='<div class="legend-title">'.concat(e[0].toUpperCase()+e.slice(1),'</div>\n    <div class="close-button">\n      <img src="assets/close.png">\n    </div>');for(var a=n.length;a>0;a-=22){var o=Math.trunc((a+1)/n.length*25);if(r.innerHTML+='<div>\n        <div>\n          <img src="./assets/marker.svg" style="width: '.concat(o,"px; height: ").concat(o,'px;">\n        </div>\n        <span> > ').concat(n[a-22].selectValue," - ").concat(n[a-1].selectValue,"</span>\n      </div>"),0===n[a-22].selectValue)break}var i=document.querySelector(".map-legend-content > div:last-child > span"),c=i.innerText;i.innerText=c.slice(3),this.buttonCloseLegend=document.querySelector(".close-button > img"),this.buttonCloseLegend.addEventListener("click",(function(){t.legend.classList.add("disabled")}));for(var s=document.querySelector(".leaflet-marker-pane");s.firstChild;)s.removeChild(s.firstChild);for(var l=0;l<n.length;l+=1){var u=(l+1)/n.length,d={iconUrl:"./assets/marker.svg",iconSize:[Math.trunc(40*u),Math.trunc(40*u)]},p=L.icon(d),h={title:"".concat(n[l].country,"\n").concat(e[0].toUpperCase()+e.slice(1),": ").concat(n[l].selectValue),clickable:!0,draggable:!1,icon:p,opacity:.5,alt:"".concat(n[l].country)},f=L.marker([n[l].latitude,n[l].longitude],h);f.addEventListener("click",(function(e){document.querySelector(".search-input").value=e.target.options.alt,document.querySelector(".search-input").focus(),t.data.forEach((function(t){t.country===e.target.options.alt&&setTimeout((function(){document.querySelector(".list-wrapper__country-block").click()}),50)}))})),f.addTo(this.map)}}};F.init(),fetch("https://disease.sh/v3/covid-19/historical/all?lastdays=366").then((function(e){return e.json()})).then((function(e){var t=Object.keys(e.cases),n=t[t.length-1].split("/");document.querySelector(".today").innerText="Last updated ".concat(+n[1]>9?n[1]:"0".concat(n[1]),".").concat(+n[0]>9?n[0]:"0".concat(n[0]),".20").concat(n[2])}));const G=F;var O={mapWrapper:document.querySelector(".map__wrapper"),mapContainer:document.querySelector(".map"),chart:document.querySelector(".chart__wrapper"),table:document.querySelector(".table__wrapper"),list:document.querySelector(".list__wrapper"),wrapper:document.querySelector(".full-screen"),content:document.querySelector(".wrapper__main"),columnOne:document.querySelector(".column__data"),columnTwo:document.querySelector(".column__visual"),icon:document.querySelectorAll(".icon-resize")},N=O.mapWrapper,W=O.mapContainer,z=O.chart,Y=O.table,H=O.list,P=O.wrapper,Z=O.content,V=O.columnOne,U=O.columnTwo,K=O.icon,X=function(e){e.classList.add("resize"),Z.classList.add("none-visible"),P.classList.add("visible"),P.append(e),K.forEach((function(e){e.classList.add("icon-close")}))},J=function(e){e.classList.remove("resize"),z.style.display="flex",P.classList.remove("visible"),Z.classList.remove("none-visible"),K.forEach((function(e){e.classList.remove("icon-close")}))};var $={selectList:document.querySelector(".list__select"),selectMap:document.querySelector(".select-map")},Q=$.selectList,ee=$.selectMap,te=function(e){ee.value=e,ee.dispatchEvent(new Event("change"))},ne=function(e){Q.value=e,Q.dispatchEvent(new Event("change"))};n(435),n(892),n(899),{data:null,dataAll:null,init:function(){var e=this;fetch("https://corona.lmao.ninja/v2/countries").then((function(e){return e.json()})).then((function(t){e.data=t;var n=document.createElement("div");n.classList.add("print-icon");var r=document.createElement("img");r.src="assets/print.svg",n.appendChild(r),r.addEventListener("click",(function(){var t,n;e.renderCard(),t=document.getElementById("printableArea").innerHTML,n=document.body.innerHTML,document.body.innerHTML=t,window.print(),document.body.innerHTML=n,document.location.reload()})),document.querySelector(".table-content__name").appendChild(n)})),fetch("https://corona.lmao.ninja/v3/covid-19/all").then((function(e){return e.json()})).then((function(t){e.dataAll=t}))},renderCard:function(){var e,t,n=document.getElementById("tableArea");"Global"===n.innerText?(e=this.dataAll).flag="assets/globe.png":(t={},this.data.forEach((function(e){e.country===n.innerText&&(t=e)})),e=t);var r=document.createElement("div");r.classList.add("title-print");var a=document.createElement("img"),o=document.createElement("span");"Global"===n.innerText?(a.src=e.flag,o.innerText="All world"):(a.src=e.countryInfo.flag,o.innerText="".concat(e.continent,", ").concat(e.country)),r.appendChild(a),r.appendChild(o);var i=document.createElement("div");i.classList.add("update-print"),i.innerText="".concat(document.querySelector(".today").innerText);var c=document.createElement("div");c.classList.add("table-print"),c.innerHTML='<div class="table-print-title">Cases, deaths and recovered</div>\n    <table class="table">\n  <tr>\n    <th></th>\n    <th>All time</th>\n    <th>Today</th>\n  </tr>\n  <tr>\n    <td>Cases</td>\n    <td>'.concat(e.cases,"</td>\n    <td>").concat(e.todayCases,"</td>\n  </tr>\n  <tr>\n    <td>Deaths</td>\n    <td>").concat(e.deaths,"</td>\n    <td>").concat(e.todayDeaths,"</td>\n  </tr>\n  <tr>\n    <td>Recovered</td>\n    <td>").concat(e.recovered,"</td>\n    <td>").concat(e.todayRecovered,"</td>\n  </tr>\n  <tr>\n    <td>Сases per 100,000 people</td>\n    <td>").concat((1e5*e.cases/e.population).toFixed(1),"</td>\n    <td>").concat((1e5*e.todayCases/e.population).toFixed(1),"</td>\n  </tr>\n  <tr>\n    <td>Deaths per 100,000 people</td>\n    <td>").concat((1e5*e.deaths/e.population).toFixed(1),"</td>\n    <td>").concat((1e5*e.todayDeaths/e.population).toFixed(1),"</td>\n  </tr>\n  <tr>\n    <td>Recovered per 100,000 people</td>\n    <td>").concat((1e5*e.recovered/e.population).toFixed(1),"</td>\n    <td>").concat((1e5*e.todayRecovered/e.population).toFixed(1),"</td>\n  </tr>\n</table>");var s=document.createElement("div");s.classList.add("second-table-print"),s.innerHTML='<div class="table-print-title">Testing</div>\n    <table class="second-table">\n  <tr>\n    <th>Tests</th>\n    <th>Tests per 100,000 people</th>\n  </tr>\n  <tr>\n    <td>'.concat(e.tests,"</td>\n    <td>").concat((1e5*e.tests/e.population).toFixed(1),"</td>\n  </tr>\n</table>"),document.querySelector(".print-data").appendChild(r),document.querySelector(".print-data").appendChild(i),document.querySelector(".print-data").appendChild(c),document.querySelector(".print-data").appendChild(s)}}.init(),window.onload=function(){T(),function(){var e=document.querySelector("#list");i.getAllCountriesData().then((function(t){e.append(j(t)),c.allCountriesList=t})),document.querySelector(".list__select").addEventListener("change",(function(t){c.currentListMode=t.currentTarget.value,e.removeChild(e.lastChild),i.getAllCountriesData().then((function(t){e.append(j(c.searchedList?c.searchedList:t))}))}));var t=document.querySelector("#search-country");function n(){""===t.value&&i.getGlobalData().then((function(e){R(e),c.isGlobal=!0})),e.removeChild(e.lastChild);var n=t.value,r=c.allCountriesList.filter((function(e){return e.area.toLowerCase().startsWith(n.toLowerCase())}));c.searchedList=r,e.append(j(r))}t.classList.add("search-input"),t.addEventListener("input",n),t.addEventListener("focus",n),t.addEventListener("keydown",(function(e){13===e.keyCode&&e.preventDefault()}))}(),function(){B.apply(this,arguments)}(),document.body.addEventListener("click",(function(e){e.target.classList.contains("icon-resize__map")&&(P.classList.contains("visible")?(J(N),U.prepend(N)):(X(N),z.style.display="none",W.innerHTML='<div id="map"></div>',G.init())),e.target.classList.contains("icon-resize__chart")&&(P.classList.contains("visible")?(J(z),U.append(z)):X(z)),e.target.classList.contains("icon-resize__table")&&(P.classList.contains("visible")?(z.style.display="none",J(Y),V.prepend(Y)):(z.style.display="none",X(Y))),e.target.classList.contains("icon-resize__list")&&(P.classList.contains("visible")?(z.style.display="none",J(H),V.append(H)):(z.style.display="none",X(H)))})),document.body.addEventListener("keydown",(function(e){"Escape"===e.key&&P.classList.contains("visible")&&(J(Y),V.prepend(Y),J(H),V.append(H),J(z),U.append(z),J(N),U.prepend(N))})),Q.addEventListener("click",(function(){"cases"===Q.value&&(te("cases"),allCases.checked=!0),"deaths"===Q.value&&(te("deaths"),allDeaths.checked=!0),"recovered"===Q.value&&(te("recovered"),allRecovered.checked=!0)})),ee.addEventListener("click",(function(){"cases"===ee.value&&(ne("cases"),allCases.checked=!0),"deaths"===ee.value&&(ne("deaths"),allDeaths.checked=!0),"recovered"===ee.value&&(ne("recovered"),allRecovered.checked=!0)})),document.querySelector("#allCases").addEventListener("click",(function(){ne("cases"),te("cases")})),document.querySelector("#allDeaths").addEventListener("click",(function(){ne("deaths"),te("deaths")})),document.querySelector("#allRecovered").addEventListener("click",(function(){ne("recovered"),te("recovered")}))}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb3ZpZC1kYXNoYm9hcmQvLi9zcmMvanMvY29tbW9uLWZ1bmN0aW9ucy9tb2RpZnlOdW1iZXJWYWx1ZS5qcyIsIndlYnBhY2s6Ly9jb3ZpZC1kYXNoYm9hcmQvLi9zcmMvanMva2V5Ym9hcmQuanMiLCJ3ZWJwYWNrOi8vY292aWQtZGFzaGJvYXJkLy4vc3JjL3Nhc3MvbGlzdC9saXN0LmNzcyIsIndlYnBhY2s6Ly9jb3ZpZC1kYXNoYm9hcmQvLi9zcmMvc2Fzcy90YWJsZS90YWJsZS5jc3MiLCJ3ZWJwYWNrOi8vY292aWQtZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly9jb3ZpZC1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly9jb3ZpZC1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIiwid2VicGFjazovL2NvdmlkLWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly9jb3ZpZC1kYXNoYm9hcmQvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vY292aWQtZGFzaGJvYXJkL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL2NvdmlkLWRhc2hib2FyZC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vY292aWQtZGFzaGJvYXJkL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vY292aWQtZGFzaGJvYXJkL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vY292aWQtZGFzaGJvYXJkL3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovL2NvdmlkLWRhc2hib2FyZC8uL3NyYy9qcy9zdG9yZS5qcyIsIndlYnBhY2s6Ly9jb3ZpZC1kYXNoYm9hcmQvLi9zcmMvanMvc3RhdGUuanMiLCJ3ZWJwYWNrOi8vY292aWQtZGFzaGJvYXJkLy4vc3JjL2pzL2NoYXJ0LmpzIiwid2VicGFjazovL2NvdmlkLWRhc2hib2FyZC8uL3NyYy9zYXNzL3RhYmxlL3RhYmxlLmNzcz9mM2M3Iiwid2VicGFjazovL2NvdmlkLWRhc2hib2FyZC8uL3NyYy9qcy90YWJsZS9yZW5kZXItc3RhdGlzdGljcy5qcyIsIndlYnBhY2s6Ly9jb3ZpZC1kYXNoYm9hcmQvLi9zcmMvanMvdGFibGUvcmVuZGVyLXRhYmxlLWJsb2NrLmpzIiwid2VicGFjazovL2NvdmlkLWRhc2hib2FyZC8uL3NyYy9qcy90YWJsZS9yZW5kZXItbW9kZXMtY29udGFpbmVyLmpzIiwid2VicGFjazovL2NvdmlkLWRhc2hib2FyZC8uL3NyYy9qcy90YWJsZS9yZW5kZXItdGFibGUuanMiLCJ3ZWJwYWNrOi8vY292aWQtZGFzaGJvYXJkLy4vc3JjL3Nhc3MvbGlzdC9saXN0LmNzcz83OWJmIiwid2VicGFjazovL2NvdmlkLWRhc2hib2FyZC8uL3NyYy9qcy9saXN0L3JlbmRlci1saXN0LmpzIiwid2VicGFjazovL2NvdmlkLWRhc2hib2FyZC8uL3NyYy9qcy9tYXAuanMiLCJ3ZWJwYWNrOi8vY292aWQtZGFzaGJvYXJkLy4vc3JjL2pzL3Jlc2l6ZS5qcyIsIndlYnBhY2s6Ly9jb3ZpZC1kYXNoYm9hcmQvLi9zcmMvanMvbGlzdGVuZXJzLmpzIiwid2VicGFjazovL2NvdmlkLWRhc2hib2FyZC8uL3NyYy9qcy9wcmludC5qcyIsIndlYnBhY2s6Ly9jb3ZpZC1kYXNoYm9hcmQvLi9zcmMvanMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vY292aWQtZGFzaGJvYXJkLy4vc3JjL2pzL2xpc3QvcmVuZGVyLWxpc3QtYmxvY2suanMiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIm51bWJlciIsImRpZ2l0cyIsIk1hdGgiLCJyb3VuZCIsInRvU3RyaW5nIiwic3BsaXQiLCJyZXZlcnNlIiwiZGlnaXRzU2V0IiwibGVuZ3RoIiwicHVzaCIsInNwbGljZSIsImpvaW4iLCJzaWRlS2V5cyIsIm1haW5LZXlzIiwic2lkZUtleXNSdXMiLCJtYWluS2V5c1J1cyIsInRleHRhcmVhIiwiYnV0dG9uTGFuZ3VhZ2UiLCJzaGlmdEFjdGl2ZSIsImxhbmd1YWdlRW5nbGlzaCIsImNhcHNsb2NrIiwic3dpdGNoS2V5Ym9hcmQiLCJpbml0Iiwia2V5Ym9hcmREaXYiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc0xpc3QiLCJhZGQiLCJzZXRBdHRyaWJ1dGUiLCJpbm5lckhUTUwiLCJpIiwidGhpcyIsInJvdyIsImoiLCJrZXkiLCJzcGFuU2lkZSIsInNwYW5NYWluIiwic3BhblNpZGVSdXMiLCJzcGFuTWFpblJ1cyIsImlubmVyVGV4dCIsImFwcGVuZENoaWxkIiwidG9Mb3dlckNhc2UiLCJzcGFuIiwicXVlcnlTZWxlY3RvciIsImJvZHkiLCJzcGFuUnVzIiwia2V5cyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JFYWNoIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50IiwidGFyZ2V0IiwiY2hhbmdlTGFuZ3VhZ2UiLCJzZXRSYW5nZVRleHQiLCJzZWxlY3Rpb25TdGFydCIsInNlbGVjdGlvbkVuZCIsImZvY3VzIiwiYmFja3NwYWNlIiwiZGVsZXRlQnV0dG9uIiwic2hpZnQiLCJ0b2dnbGUiLCJjb250YWlucyIsImxlZnQiLCJyaWdodCIsInVwIiwiZG93biIsInNwYW5DdXJyZW50IiwiZHJhZ0FuZERyb3AiLCJzaWRlS2V5c0N1cnJlbnQiLCJtYWluS2V5c0N1cnJlbnQiLCJzaWRlS2V5c1J1c0N1cnJlbnQiLCJtYWluS2V5c1J1c0N1cnJlbnQiLCJsYW5ndWFnZSIsImxhbmd1YWdlU2lkZSIsInRlbXAiLCJmaXJzdFN0cmluZyIsInZhbHVlIiwic2xpY2UiLCJzZWNvbmRTdHJpbmciLCJwb3NpdGlvbkZvY3VzIiwic2V0U2VsZWN0aW9uUmFuZ2UiLCJzaWRlS2V5IiwibWFpbktleSIsInNpZGVLZXlSdXMiLCJtYWluS2V5UnVzIiwidGVtcFJ1cyIsImNvdW50IiwiZHJhZ2dhYmxlIiwic2hpZnRYIiwiY2xpZW50WCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInNoaWZ0WSIsImNsaWVudFkiLCJ0b3AiLCJtb3ZlQXQiLCJwYWdlWCIsInBhZ2VZIiwic3R5bGUiLCJvbk1vdXNlTW92ZSIsImV2dCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJwcmV2ZW50RGVmYXVsdCIsIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwiaWQiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwiY29uY2F0IiwibW9kdWxlcyIsIm1lZGlhUXVlcnkiLCJkZWR1cGUiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiX2kiLCJfYXJyYXlMaWtlVG9BcnJheSIsImFyciIsImxlbiIsImFycjIiLCJBcnJheSIsIl9pdGVtIiwiaXNBcnJheSIsIl9hcnJheVdpdGhIb2xlcyIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiT2JqZWN0IiwiX2FyciIsIl9uIiwiX2QiLCJfZSIsInVuZGVmaW5lZCIsIl9zIiwibmV4dCIsImRvbmUiLCJlcnIiLCJfaXRlcmFibGVUb0FycmF5TGltaXQiLCJvIiwibWluTGVuIiwibiIsInByb3RvdHlwZSIsImNhbGwiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJmcm9tIiwidGVzdCIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIlR5cGVFcnJvciIsIl9ub25JdGVyYWJsZVJlc3QiLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2UiLCJzb3VyY2VSb290IiwicnVudGltZSIsIk9wIiwiaGFzT3duIiwiaGFzT3duUHJvcGVydHkiLCIkU3ltYm9sIiwiaXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsInRvU3RyaW5nVGFnU3ltYm9sIiwidG9TdHJpbmdUYWciLCJkZWZpbmUiLCJvYmoiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIndyYXAiLCJpbm5lckZuIiwib3V0ZXJGbiIsInNlbGYiLCJ0cnlMb2NzTGlzdCIsInByb3RvR2VuZXJhdG9yIiwiR2VuZXJhdG9yIiwiZ2VuZXJhdG9yIiwiY3JlYXRlIiwiY29udGV4dCIsIkNvbnRleHQiLCJfaW52b2tlIiwic3RhdGUiLCJHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0IiwibWV0aG9kIiwiYXJnIiwiR2VuU3RhdGVFeGVjdXRpbmciLCJFcnJvciIsIkdlblN0YXRlQ29tcGxldGVkIiwiZG9uZVJlc3VsdCIsImRlbGVnYXRlIiwiZGVsZWdhdGVSZXN1bHQiLCJtYXliZUludm9rZURlbGVnYXRlIiwiQ29udGludWVTZW50aW5lbCIsInNlbnQiLCJfc2VudCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiYWJydXB0IiwicmVjb3JkIiwidHJ5Q2F0Y2giLCJ0eXBlIiwiR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCIsIm1ha2VJbnZva2VNZXRob2QiLCJmbiIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJJdGVyYXRvclByb3RvdHlwZSIsImdldFByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJOYXRpdmVJdGVyYXRvclByb3RvdHlwZSIsInZhbHVlcyIsIkdwIiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiQXN5bmNJdGVyYXRvciIsIlByb21pc2VJbXBsIiwiaW52b2tlIiwicmVzb2x2ZSIsInJlamVjdCIsInJlc3VsdCIsIl9fYXdhaXQiLCJ0aGVuIiwidW53cmFwcGVkIiwiZXJyb3IiLCJwcmV2aW91c1Byb21pc2UiLCJjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyIsImluZm8iLCJyZXN1bHROYW1lIiwibmV4dExvYyIsInB1c2hUcnlFbnRyeSIsImxvY3MiLCJlbnRyeSIsInRyeUxvYyIsImNhdGNoTG9jIiwiZmluYWxseUxvYyIsImFmdGVyTG9jIiwidHJ5RW50cmllcyIsInJlc2V0VHJ5RW50cnkiLCJjb21wbGV0aW9uIiwicmVzZXQiLCJpdGVyYWJsZSIsIml0ZXJhdG9yTWV0aG9kIiwiaXNOYU4iLCJkaXNwbGF5TmFtZSIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJnZW5GdW4iLCJjdG9yIiwibWFyayIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiYXdyYXAiLCJhc3luYyIsIlByb21pc2UiLCJpdGVyIiwib2JqZWN0IiwicG9wIiwic2tpcFRlbXBSZXNldCIsInByZXYiLCJjaGFyQXQiLCJzdG9wIiwicm9vdFJlY29yZCIsInJ2YWwiLCJleGNlcHRpb24iLCJoYW5kbGUiLCJsb2MiLCJjYXVnaHQiLCJoYXNDYXRjaCIsImhhc0ZpbmFsbHkiLCJmaW5hbGx5RW50cnkiLCJjb21wbGV0ZSIsImZpbmlzaCIsInRocm93biIsImRlbGVnYXRlWWllbGQiLCJyZWdlbmVyYXRvclJ1bnRpbWUiLCJhY2NpZGVudGFsU3RyaWN0TW9kZSIsIkZ1bmN0aW9uIiwibWVtbyIsImdldFRhcmdldCIsInN0eWxlVGFyZ2V0Iiwid2luZG93IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsInN0eWxlc0luRG9tIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwibW9kdWxlc1RvRG9tIiwib3B0aW9ucyIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJpbmRleCIsImNzcyIsIm1lZGlhIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRTdHlsZSIsImluc2VydFN0eWxlRWxlbWVudCIsImF0dHJpYnV0ZXMiLCJub25jZSIsImluc2VydCIsInRleHRTdG9yZSIsInJlcGxhY2VUZXh0IiwicmVwbGFjZW1lbnQiLCJmaWx0ZXIiLCJCb29sZWFuIiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsInJlbW92ZSIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiY3NzTm9kZSIsImNyZWF0ZVRleHROb2RlIiwiY2hpbGROb2RlcyIsInJlbW92ZUNoaWxkIiwiaW5zZXJ0QmVmb3JlIiwiYXBwbHlUb1RhZyIsInJlbW92ZUF0dHJpYnV0ZSIsImZpcnN0Q2hpbGQiLCJzaW5nbGV0b24iLCJzaW5nbGV0b25Db3VudGVyIiwidXBkYXRlIiwic3R5bGVJbmRleCIsImJpbmQiLCJwYXJlbnROb2RlIiwicmVtb3ZlU3R5bGVFbGVtZW50IiwibmV3T2JqIiwiYWxsIiwiYXRvYiIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaW5kZXgiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImQiLCJhIiwiZGVmaW5pdGlvbiIsImdldCIsImciLCJnbG9iYWxUaGlzIiwicHJvcCIsInNjcmlwdFVybCIsImltcG9ydFNjcmlwdHMiLCJsb2NhdGlvbiIsImN1cnJlbnRTY3JpcHQiLCJzcmMiLCJzY3JpcHRzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJyZXBsYWNlIiwicCIsIlVSTF9HTE9CQUwiLCJVUkxfQ09VTlRSSUVTIiwiUkVMQVRJVkVfTlVNQkVSIiwiX3NlbmRSZXF1ZXN0IiwidXJsIiwiZmV0Y2giLCJyZXNwb25zZSIsImpzb24iLCJfaW5pdE1vZGVGb3JEYXRhIiwiYXJlYSIsImNvdW50cnkiLCJjYXNlcyIsImRlYXRocyIsInJlY292ZXJlZCIsInRvZGF5Q2FzZXMiLCJ0b2RheURlYXRocyIsInRvZGF5UmVjb3ZlcmVkIiwiTnVtYmVyIiwiY2FzZXNQZXJPbmVNaWxsaW9uIiwidG9GaXhlZCIsImRlYXRoc1Blck9uZU1pbGxpb24iLCJyZWNvdmVyZWRQZXJPbmVNaWxsaW9uIiwicG9wdWxhdGlvbiIsIl9nZXREYXRhRm9yR2xvYmFsIiwiX2dldERhdGFGb3JDb3VudHJ5IiwiZmluZCIsImNvdW50cnlJbmZvIiwiaXNvMyIsImdldEdsb2JhbERhdGEiLCJnZXRHbG9iYWxUb2RheURhdGEiLCJnZXRHbG9iYWxSZWxhdGl2ZURhdGEiLCJnZXRHbG9iYWxUb2RheVJlbGF0aXZlRGF0YSIsImdldEFsbENvdW50cmllc0RhdGEiLCJmbGFnIiwiZ2V0Q291bnRyeURhdGEiLCJnZXRDb3VudHJ5VG9kYXlEYXRhIiwiZ2V0Q291bnRyeVJlbGF0aXZlRGF0YSIsImdldENvdW50cnlUb2RheVJlbGF0aXZlRGF0YSIsImdldENvdW50cnlGbGFnVXJsIiwiZ2V0Q291bnRyeUNvb3JkaW5hdGVzIiwibGF0IiwibG9uZyIsImdldFBvcHVsYXRpb24iLCJnZXRQb3B1bGF0aW9uR2xvYmFsIiwiZ2V0SGlzdG9yaWNhbEdsb2JhbERhdGEiLCJzdGFydFBvaW50RGF0ZSIsIkRhdGUiLCJ0b2RheURhdGUiLCJkYXlzQ291bnQiLCJmbG9vciIsImdldFRpbWUiLCJnZXRIaXN0b3JpY2FsR2xvYmFsUmF0ZXMiLCJnbG9iYWxEYXRhIiwiZGF0ZXMiLCJnZXRBbGxSYXRlc0ZvckVhY2hDb3VudHJ5Iiwic29ydCIsImNvbnNvbGUiLCJsb2ciLCJnZXRSYXRlc0ZvckVhY2hDb3VudHJ5IiwiQ29uZmlybWVkIiwiRGVhdGhzIiwiUmVjb3ZlcmVkIiwiaXNHbG9iYWwiLCJjdXJyZW50Q291bnRyeSIsImN1cnJlbnRDb3VudHJ5TmFtZSIsImN1cnJlbnRMaXN0TW9kZSIsInNlYXJjaFZhbHVlIiwic2VhcmNoZWRMaXN0IiwiY3VycmVudExpc3QiLCJhbGxDb3VudHJpZXNMaXN0IiwiZ2V0Q3VycmVudENvdW50cnlOYW1lIiwicmVxdWlyZSIsImNyZWF0ZURhdGFBcnJheUZvckVhY2hEYXkiLCJ0YXJnZXRBcnJheSIsImdldERhdGEiLCJNQVgiLCJSRUxBVElWRSIsImVsIiwiY2FzZXNEYXkiLCJkZWF0aHNEYXkiLCJyZWNvdmVyZWREYXkiLCJjYXNlc1JlbGF0aXZlIiwiZGVhdGhzUmVsYXRpdmUiLCJyZWNvdmVyZWRSZWxhdGl2ZSIsImNhc2VzUmVsYXRpdmVEYXkiLCJkZWF0aHNSZWxhdGl2ZURheSIsInJlY292ZXJlZFJlbGF0aXZlRGF5Iiwic3RvcmUiLCJnZXREYXRhRm9yQ291bnRyeSIsImNoYW5nZUNoYXJ0VG9DYXNlcyIsImNvbmZpZyIsImNoYXJ0IiwiYmFja2dyb3VuZENvbG9yIiwibGFiZWwiLCJjaGFuZ2VDaGFydFRvRGVhdGhzIiwiY2hhbmdlQ2hhcnRUb1JlY292ZXJlZCIsInVwZGF0ZURhdGFGb3JDaGFydCIsInRpbWVDaG9pY2UxIiwiY2hlY2tlZCIsImFsbENhc2VzIiwicmFuZ2VDaG9pY2UxIiwiYWxsRGVhdGhzIiwiYWxsUmVjb3ZlcmVkIiwidGltZUNob2ljZTIiLCJyYW5nZUNob2ljZTIiLCJjaGFuZ2VDaGFydFRvR2xvYmFsRGF0YSIsImNoYW5nZUNoYXJ0VG9FYWNoQ291bnRyeSIsImNoYXJ0V3JhcHBlciIsImdldEVsZW1lbnRCeUlkIiwiZ2V0Q29udGV4dCIsImNoYXJ0Q29uZmlnIiwibGFiZWxzIiwiZGF0YXNldHMiLCJib3JkZXJXaWR0aCIsInNjYWxlcyIsInlBeGVzIiwiYmVnaW5BdFplcm8iLCJncmlkTGluZXMiLCJjb2xvciIsInRpY2tzIiwiY2FsbGJhY2siLCJ0cnVuYyIsImZvbnRDb2xvciIsImZvbnRGYW1pbHkiLCJmb250U2l6ZSIsInhBeGVzIiwicG9zaXRpb24iLCJ0aW1lIiwidG9vbHRpcEZvcm1hdCIsInVuaXQiLCJzdGVwU2l6ZSIsImJvcmRlckRhc2giLCJsZWdlbmQiLCJkaXNwbGF5IiwiQ2hhcnQiLCJpbnB1dCIsIm1vZGlmeU51bWJlclZhbHVlIiwic3RhdGlzdGljcyIsInRhYmxlQXJlYSIsInRleHRDb250ZW50IiwidGFibGVDYXNlcyIsInRhYmxlRGVhdGhzIiwidGFibGVSZWNvdmVyZWQiLCJtb2Rlc1dyYXBwZXIiLCJ0YWJsZVdyYXBwZXIiLCJhcHBlbmQiLCJyZW5kZXJTdGF0aXN0aWNzIiwibGlzdENvbnRhaW5lciIsImxpc3RXcmFwcGVyIiwiaW5wdXRGaWVsZCIsIm1vZGUiLCJiIiwiY291bnRyeUJsb2NrIiwic2VsZWN0Iiwic2VsZWN0RWxlbWVudCIsInNldE1hcmtlcnMiLCJtYXBPcHRpb25zIiwiY2VudGVyIiwiem9vbSIsIm1pblpvb20iLCJtYXhab29tIiwid29ybGRDb3B5SnVtcCIsImJ1dHRvbk9wZW5MZWdlbmQiLCJidXR0b25DbG9zZUxlZ2VuZCIsIkwiLCJzZXRNYXhCb3VuZHMiLCJsYXllciIsIlRpbGVMYXllciIsImFkZExheWVyIiwiZGF0YU1hcmtlcnMiLCJlbGVtZW50IiwibGF0aXR1ZGUiLCJsb25naXR1ZGUiLCJzZWxlY3RWYWx1ZSIsImxlZ2VuZE1hcCIsInRvVXBwZXJDYXNlIiwic2l6ZSIsImxhc3RTcGFuIiwidGV4dEZyb21MYXN0U3BhbiIsIm5vZGUiLCJpY29uT3B0aW9ucyIsImljb25VcmwiLCJpY29uU2l6ZSIsImN1c3RvbUljb24iLCJpY29uIiwibWFya2VyT3B0aW9ucyIsInRpdGxlIiwiY2xpY2thYmxlIiwib3BhY2l0eSIsImFsdCIsIm1hcmtlciIsInNldFRpbWVvdXQiLCJjbGljayIsImFkZFRvIiwiYXJyRGF0ZXMiLCJkYXRlIiwiRE9NIiwibWFwV3JhcHBlciIsIm1hcENvbnRhaW5lciIsInRhYmxlIiwid3JhcHBlciIsImNvbHVtbk9uZSIsImNvbHVtblR3byIsInJlc2l6ZVRvQmlnIiwicmVzaXplVG9TbWFsbCIsInNlbGVjdHMiLCJzZWxlY3RMaXN0Iiwic2VsZWN0TWFwIiwiY2hhbmdlU2VsZWN0TWFwIiwicmF0ZSIsImRpc3BhdGNoRXZlbnQiLCJFdmVudCIsImNoYW5nZVNlbGVjdExpc3QiLCJkYXRhQWxsIiwiaW1nIiwicHJpbnRDb250ZW50cyIsIm9yaWdpbmFsQ29udGVudHMiLCJyZW5kZXJDYXJkIiwicHJpbnQiLCJyZWxvYWQiLCJ0aXRsZUZsYWciLCJ0aXRsZU5hbWUiLCJjb250aW5lbnQiLCJ1cGRhdGVEYXRlIiwic2Vjb25kVGFibGUiLCJ0ZXN0cyIsIm9ubG9hZCIsInJlbmRlclRhYmxlQmxvY2siLCJyZW5kZXJMaXN0IiwiY3VycmVudFRhcmdldCIsImxhc3RDaGlsZCIsInNlYXJjaElucHV0Iiwic2VhcmNoSGFuZGxlciIsInNlYXJjaFJlcXVlc3QiLCJzdGFydHNXaXRoIiwia2V5Q29kZSIsInJlbmRlckxpc3RCbG9jayIsImNyZWF0ZUNoYXJ0IiwicHJlcGVuZCJdLCJtYXBwaW5ncyI6InFCQWFBQSxFQUFPQyxRQWJQLFNBQTJCQyxHQUN6QixJQUFLQSxFQUFRLE1BQU8sSUFLcEIsSUFIQSxJQUFNQyxFQUFTQyxLQUFLQyxNQUFNSCxHQUFRSSxXQUFXQyxNQUFNLElBQUlDLFVBQ2pEQyxFQUFZLEdBRU8sSUFBbEJOLEVBQU9PLFFBQ1pELEVBQVVFLEtBQUtSLEVBQU9TLE9BQU8sRUFBRyxHQUFHSixVQUFVSyxLQUFLLEtBR3BELE9BQU9KLEVBQVVELFVBQVVLLEtBQUssTyxVQ1ZqQixDQUNmQyxTQUFVLENBQ1IsQ0FBQyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssYUFDdkUsQ0FBQyxNQUFPLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLFVBQ3BFLENBQUMsV0FBWSxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssU0FDcEUsQ0FBQyxRQUFTLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssS0FBTSxTQUNsRSxDQUFDLE9BQVEsTUFBTyxNQUFPLFFBQVMsTUFBTyxPQUFRLE9BQVEsUUFBUyxTQUVsRUMsU0FBVSxDQUNSLENBQUMsSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxLQUFNLE1BQ3hFLENBQUMsS0FBTSxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxNQUNuRSxDQUFDLEtBQU0sSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFNLE1BQy9ELENBQUMsS0FBTSxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLE9BRTNEQyxZQUFhLENBQ1gsQ0FBQyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssTUFDdkUsQ0FBQyxLQUFNLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLE1BQ25FLENBQUMsS0FBTSxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssTUFDOUQsQ0FBQyxLQUFNLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssT0FFM0RDLFlBQWEsQ0FDWCxDQUFDLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssS0FBTSxNQUN4RSxDQUFDLEtBQU0sSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssTUFDbkUsQ0FBQyxLQUFNLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFB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Y00saUJBQWlCLFNBQVMsV0FDN0Q2Z0IsR0FBaUIsVUFDakJKLEdBQWdCLGFBR2xCbGlCLFNBQVNtQixjQUFjLGlCQUFpQk0saUJBQWlCLFNBQVMsV0FDaEU2Z0IsR0FBaUIsYUFDakJKLEdBQWdCLGtCIiwiZmlsZSI6InNjcmlwdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIG1vZGlmeU51bWJlclZhbHVlKG51bWJlcikge1xyXG4gIGlmICghbnVtYmVyKSByZXR1cm4gJzAnO1xyXG5cclxuICBjb25zdCBkaWdpdHMgPSBNYXRoLnJvdW5kKG51bWJlcikudG9TdHJpbmcoKS5zcGxpdCgnJykucmV2ZXJzZSgpO1xyXG4gIGNvbnN0IGRpZ2l0c1NldCA9IFtdO1xyXG5cclxuICB3aGlsZSAoZGlnaXRzLmxlbmd0aCAhPT0gMCkge1xyXG4gICAgZGlnaXRzU2V0LnB1c2goZGlnaXRzLnNwbGljZSgwLCAzKS5yZXZlcnNlKCkuam9pbignJykpO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGRpZ2l0c1NldC5yZXZlcnNlKCkuam9pbignICcpO1xyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IG1vZGlmeU51bWJlclZhbHVlO1xyXG4iLCJjb25zdCBrZXlib2FyZCA9IHtcbiAgc2lkZUtleXM6IFtcbiAgICBbJ34nLCAnIScsICdAJywgJyMnLCAnJCcsICclJywgJ14nLCAnJicsICcqJywgJygnLCAnKScsICdfJywgJysnLCAnfCcsICdCYWNrc3BhY2UnXSxcbiAgICBbJ1RhYicsICdRJywgJ1cnLCAnRScsICdSJywgJ1QnLCAnWScsICdVJywgJ0knLCAnTycsICdQJywgJ3snLCAnfScsICdEZWxldGUnXSxcbiAgICBbJ0NhcHNMb2NrJywgJ0EnLCAnUycsICdEJywgJ0YnLCAnRycsICdIJywgJ0onLCAnSycsICdMJywgJzonLCAnXCInLCAnRW50ZXInXSxcbiAgICBbJ1NoaWZ0JywgJ1onLCAnWCcsICdDJywgJ1YnLCAnQicsICdOJywgJ00nLCAnPCcsICc+JywgJz8nLCAnVXAnLCAnU2hpZnQnXSxcbiAgICBbJ0N0cmwnLCAnV2luJywgJ0FsdCcsICdTcGFjZScsICdBbHQnLCAnTGVmdCcsICdEb3duJywgJ1JpZ2h0JywgJ0N0cmwnXSxcbiAgXSxcbiAgbWFpbktleXM6IFtcbiAgICBbJ2AnLCAnMScsICcyJywgJzMnLCAnNCcsICc1JywgJzYnLCAnNycsICc4JywgJzknLCAnMCcsICctJywgJz0nLCAnXFxcXCcsIG51bGxdLFxuICAgIFtudWxsLCAncScsICd3JywgJ2UnLCAncicsICd0JywgJ3knLCAndScsICdpJywgJ28nLCAncCcsICdbJywgJ10nLCBudWxsXSxcbiAgICBbbnVsbCwgJ2EnLCAncycsICdkJywgJ2YnLCAnZycsICdoJywgJ2onLCAnaycsICdsJywgJzsnLCAnXFwnJywgbnVsbF0sXG4gICAgW251bGwsICd6JywgJ3gnLCAnYycsICd2JywgJ2InLCAnbicsICdtJywgJywnLCAnLicsICcvJywgbnVsbF0sXG4gIF0sXG4gIHNpZGVLZXlzUnVzOiBbXG4gICAgWyfQgScsICchJywgJ1wiJywgJ+KElicsICc7JywgJyUnLCAnOicsICc/JywgJyonLCAnKCcsICcpJywgJ18nLCAnKycsICcvJywgbnVsbF0sXG4gICAgW251bGwsICfQmScsICfQpicsICfQoycsICfQmicsICfQlScsICfQnScsICfQkycsICfQqCcsICfQqScsICfQlycsICfQpScsICfQqicsIG51bGxdLFxuICAgIFtudWxsLCAn0KQnLCAn0KsnLCAn0JInLCAn0JAnLCAn0J8nLCAn0KAnLCAn0J4nLCAn0JsnLCAn0JQnLCAn0JYnLCAn0K0nLCBudWxsXSxcbiAgICBbbnVsbCwgJ9CvJywgJ9CnJywgJ9ChJywgJ9CcJywgJ9CYJywgJ9CiJywgJ9CsJywgJ9CRJywgJ9CuJywgJywnLCBudWxsXSxcbiAgXSxcbiAgbWFpbktleXNSdXM6IFtcbiAgICBbJ9GRJywgJzEnLCAnMicsICczJywgJzQnLCAnNScsICc2JywgJzcnLCAnOCcsICc5JywgJzAnLCAnLScsICc9JywgJ1xcXFwnLCBudWxsXSxcbiAgICBbbnVsbCwgJ9C5JywgJ9GGJywgJ9GDJywgJ9C6JywgJ9C1JywgJ9C9JywgJ9CzJywgJ9GIJywgJ9GJJywgJ9C3JywgJ9GFJywgJ9GKJywgbnVsbF0sXG4gICAgW251bGwsICfRhCcsICfRiycsICfQsicsICfQsCcsICfQvycsICfRgCcsICfQvicsICfQuycsICfQtCcsICfQticsICfRjScsIG51bGxdLFxuICAgIFtudWxsLCAn0Y8nLCAn0YcnLCAn0YEnLCAn0LwnLCAn0LgnLCAn0YInLCAn0YwnLCAn0LEnLCAn0Y4nLCAnLicsIG51bGxdLFxuICBdLFxuICB0ZXh0YXJlYTogbnVsbCxcbiAgYnV0dG9uTGFuZ3VhZ2U6IG51bGwsXG4gIHNoaWZ0QWN0aXZlOiBmYWxzZSxcbiAgbGFuZ3VhZ2VFbmdsaXNoOiB0cnVlLFxuICBjYXBzbG9jazogbnVsbCxcbiAgc3dpdGNoS2V5Ym9hcmQ6IG51bGwsXG5cbiAgaW5pdCgpIHtcbiAgICBjb25zdCBrZXlib2FyZERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGtleWJvYXJkRGl2LmNsYXNzTGlzdC5hZGQoJ2tleWJvYXJkJywgJ2tleWJvYXJkLW9mZicpO1xuICAgIGtleWJvYXJkRGl2LnNldEF0dHJpYnV0ZSgnZHJhZ2dhYmxlJywgdHJ1ZSk7XG4gICAga2V5Ym9hcmREaXYuaW5uZXJIVE1MID0gYDxkaXYgY2xhc3M9XCJjbG9zZS1rZXlib2FyZFwiPlxuICAgICAgPGltZyBzcmM9XCJhc3NldHMvY2xvc2UucG5nXCI+XG4gICAgPC9kaXY+YDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc2lkZUtleXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGNvbnN0IHJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgc3dpdGNoIChpKSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgICByb3cuY2xhc3NMaXN0LmFkZCgna2V5Ym9hcmRfX3Jvdy1maXJzdCcpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgcm93LmNsYXNzTGlzdC5hZGQoJ2tleWJvYXJkX19yb3ctc2Vjb25kJyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICByb3cuY2xhc3NMaXN0LmFkZCgna2V5Ym9hcmRfX3Jvdy10aGlyZCcpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgcm93LmNsYXNzTGlzdC5hZGQoJ2tleWJvYXJkX19yb3ctZm91cnRoJyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICByb3cuY2xhc3NMaXN0LmFkZCgna2V5Ym9hcmRfX3Jvdy1maWZ0aCcpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgfVxuXG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuc2lkZUtleXNbaV0ubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgaWYgKHRoaXMuc2lkZUtleXNbaV1bal0ubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgY29uc3Qga2V5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAga2V5LmNsYXNzTGlzdC5hZGQoJ2tleScpO1xuXG4gICAgICAgICAgY29uc3Qgc3BhblNpZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICAgICAgc3BhblNpZGUuY2xhc3NMaXN0LmFkZCgnc2lkZS1rZXknKTtcblxuICAgICAgICAgIGNvbnN0IHNwYW5NYWluID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgICAgIHNwYW5NYWluLmNsYXNzTGlzdC5hZGQoJ21haW4ta2V5Jyk7XG5cbiAgICAgICAgICBjb25zdCBzcGFuU2lkZVJ1cyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICAgICAgICBzcGFuU2lkZVJ1cy5jbGFzc0xpc3QuYWRkKCdzaWRlLWtleS1ydXMnLCAnZGlzYWJsZWQnKTtcblxuICAgICAgICAgIGNvbnN0IHNwYW5NYWluUnVzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgICAgIHNwYW5NYWluUnVzLmNsYXNzTGlzdC5hZGQoJ21haW4ta2V5LXJ1cycsICdkaXNhYmxlZCcpO1xuXG4gICAgICAgICAgc3BhblNpZGUuaW5uZXJUZXh0ID0gdGhpcy5zaWRlS2V5c1tpXVtqXTtcbiAgICAgICAgICBzcGFuTWFpbi5pbm5lclRleHQgPSB0aGlzLm1haW5LZXlzW2ldW2pdO1xuICAgICAgICAgIHNwYW5TaWRlUnVzLmlubmVyVGV4dCA9IHRoaXMuc2lkZUtleXNSdXNbaV1bal07XG4gICAgICAgICAgc3Bhbk1haW5SdXMuaW5uZXJUZXh0ID0gdGhpcy5tYWluS2V5c1J1c1tpXVtqXTtcblxuICAgICAgICAgIGtleS5hcHBlbmRDaGlsZChzcGFuU2lkZSk7XG4gICAgICAgICAga2V5LmFwcGVuZENoaWxkKHNwYW5NYWluKTtcbiAgICAgICAgICBrZXkuYXBwZW5kQ2hpbGQoc3BhblNpZGVSdXMpO1xuICAgICAgICAgIGtleS5hcHBlbmRDaGlsZChzcGFuTWFpblJ1cyk7XG5cbiAgICAgICAgICByb3cuYXBwZW5kQ2hpbGQoa2V5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCBrZXkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICBrZXkuY2xhc3NMaXN0LmFkZCgna2V5Jyk7XG4gICAgICAgICAga2V5LmNsYXNzTGlzdC5hZGQoYCR7dGhpcy5zaWRlS2V5c1tpXVtqXS50b0xvd2VyQ2FzZSgpfWApO1xuICAgICAgICAgIGNvbnN0IHNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG5cbiAgICAgICAgICBzcGFuLmlubmVyVGV4dCA9IHRoaXMuc2lkZUtleXNbaV1bal07XG4gICAgICAgICAga2V5LmFwcGVuZENoaWxkKHNwYW4pO1xuICAgICAgICAgIHJvdy5hcHBlbmRDaGlsZChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBrZXlib2FyZERpdi5hcHBlbmRDaGlsZChyb3cpO1xuICAgIH1cblxuICAgIHRoaXMudGV4dGFyZWEgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2VhcmNoLWlucHV0Jyk7XG5cbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGtleWJvYXJkRGl2KTtcbiAgICAvLyBjcmVhdGUgbGFuZ3VhZ2UgYnV0dG9uXG4gICAgdGhpcy5idXR0b25MYW5ndWFnZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5rZXkud2luJyk7XG4gICAgY29uc3Qgc3BhblJ1cyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICBzcGFuUnVzLmNsYXNzTGlzdC5hZGQoJ2xhbmd1YWdlLXNpZGUnKTtcbiAgICBzcGFuUnVzLmlubmVyVGV4dCA9ICdSdSc7XG5cbiAgICBjb25zdCBzcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgIHNwYW4uY2xhc3NMaXN0LmFkZCgnbGFuZ3VhZ2UnKTtcbiAgICBzcGFuLmlubmVyVGV4dCA9ICdFbic7XG5cbiAgICB0aGlzLmJ1dHRvbkxhbmd1YWdlLmFwcGVuZENoaWxkKHNwYW5SdXMpO1xuICAgIHRoaXMuYnV0dG9uTGFuZ3VhZ2UuYXBwZW5kQ2hpbGQoc3Bhbik7XG5cbiAgICAvLyBhZGQgZXZlbnQgbGlzdGVuZXIgdG8ga2V5c1xuICAgIGNvbnN0IGtleXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcua2V5Jyk7XG4gICAgdGhpcy5jYXBzbG9jayA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5rZXkuY2Fwc2xvY2snKTtcblxuICAgIGtleXMuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICBrZXkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpID0+IHtcbiAgICAgICAgc3dpdGNoIChldmVudC50YXJnZXQuaW5uZXJUZXh0KSB7XG4gICAgICAgICAgY2FzZSAnUnUnOlxuICAgICAgICAgIGNhc2UgJ0VuJzpcbiAgICAgICAgICBjYXNlICdXaW4nOlxuICAgICAgICAgICAgdGhpcy5jaGFuZ2VMYW5ndWFnZSgpO1xuICAgICAgICAgICAgaWYgKHRoaXMubGFuZ3VhZ2VFbmdsaXNoKSB7XG4gICAgICAgICAgICAgIHRoaXMubGFuZ3VhZ2VFbmdsaXNoID0gZmFsc2U7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLmxhbmd1YWdlRW5nbGlzaCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdUYWInOlxuICAgICAgICAgICAgdGhpcy50ZXh0YXJlYS5zZXRSYW5nZVRleHQoJyAgICAnLCB0aGlzLnRleHRhcmVhLnNlbGVjdGlvblN0YXJ0LCB0aGlzLnRleHRhcmVhLnNlbGVjdGlvbkVuZCwgJ2VuZCcpO1xuICAgICAgICAgICAgdGhpcy50ZXh0YXJlYS5mb2N1cygpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnQmFja3NwYWNlJzpcbiAgICAgICAgICAgIHRoaXMuYmFja3NwYWNlKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdEZWxldGUnOlxuICAgICAgICAgICAgdGhpcy5kZWxldGVCdXR0b24oKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ0NhcHNMb2NrJzpcbiAgICAgICAgICAgIHRoaXMuc2hpZnQoKTtcbiAgICAgICAgICAgIHRoaXMuY2Fwc2xvY2suY2xhc3NMaXN0LnRvZ2dsZSgnYWN0aXZlJyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdFbnRlcic6XG4gICAgICAgICAgICB0aGlzLnRleHRhcmVhLnNldFJhbmdlVGV4dCgnXFxuJywgdGhpcy50ZXh0YXJlYS5zZWxlY3Rpb25TdGFydCwgdGhpcy50ZXh0YXJlYS5zZWxlY3Rpb25FbmQsICdlbmQnKTtcbiAgICAgICAgICAgIHRoaXMudGV4dGFyZWEuZm9jdXMoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ1NoaWZ0JzpcbiAgICAgICAgICAgIHRoaXMuc2hpZnQoKTtcbiAgICAgICAgICAgIGtleXNbNDJdLmNsYXNzTGlzdC50b2dnbGUoJ2FjdGl2ZScpO1xuICAgICAgICAgICAga2V5c1s1NF0uY2xhc3NMaXN0LnRvZ2dsZSgnYWN0aXZlJyk7XG4gICAgICAgICAgICBpZiAoa2V5c1s0Ml0uY2xhc3NMaXN0LmNvbnRhaW5zKCdhY3RpdmUnKSAmJiBrZXlzWzU0XS5jbGFzc0xpc3QuY29udGFpbnMoJ2FjdGl2ZScpKSB7XG4gICAgICAgICAgICAgIHRoaXMuc2hpZnRBY3RpdmUgPSB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhpcy5zaGlmdEFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnQ3RybCc6XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdBbHQnOlxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnU3BhY2UnOlxuICAgICAgICAgICAgdGhpcy50ZXh0YXJlYS5zZXRSYW5nZVRleHQoJyAnLCB0aGlzLnRleHRhcmVhLnNlbGVjdGlvblN0YXJ0LCB0aGlzLnRleHRhcmVhLnNlbGVjdGlvbkVuZCwgJ2VuZCcpO1xuICAgICAgICAgICAgdGhpcy50ZXh0YXJlYS5mb2N1cygpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnTGVmdCc6XG4gICAgICAgICAgICB0aGlzLmxlZnQoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ1JpZ2h0JzpcbiAgICAgICAgICAgIHRoaXMucmlnaHQoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ1VwJzpcbiAgICAgICAgICAgIHRoaXMudXAoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ0Rvd24nOlxuICAgICAgICAgICAgdGhpcy5kb3duKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgaWYgKHRoaXMubGFuZ3VhZ2VFbmdsaXNoKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHNwYW5DdXJyZW50ID0ga2V5LnF1ZXJ5U2VsZWN0b3IoJy5tYWluLWtleScpO1xuICAgICAgICAgICAgICB0aGlzLnRleHRhcmVhLnNldFJhbmdlVGV4dChzcGFuQ3VycmVudC5pbm5lclRleHQsIHRoaXMudGV4dGFyZWEuc2VsZWN0aW9uU3RhcnQsIHRoaXMudGV4dGFyZWEuc2VsZWN0aW9uRW5kLCAnZW5kJyk7XG4gICAgICAgICAgICAgIHRoaXMudGV4dGFyZWEuZm9jdXMoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNvbnN0IHNwYW5DdXJyZW50ID0ga2V5LnF1ZXJ5U2VsZWN0b3IoJy5tYWluLWtleS1ydXMnKTtcbiAgICAgICAgICAgICAgdGhpcy50ZXh0YXJlYS5zZXRSYW5nZVRleHQoc3BhbkN1cnJlbnQuaW5uZXJUZXh0LCB0aGlzLnRleHRhcmVhLnNlbGVjdGlvblN0YXJ0LCB0aGlzLnRleHRhcmVhLnNlbGVjdGlvbkVuZCwgJ2VuZCcpO1xuICAgICAgICAgICAgICB0aGlzLnRleHRhcmVhLmZvY3VzKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnNoaWZ0QWN0aXZlKSB7XG4gICAgICAgICAgICAgIHRoaXMuc2hpZnQoKTtcbiAgICAgICAgICAgICAgdGhpcy5zaGlmdEFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICBrZXlzWzQyXS5jbGFzc0xpc3QudG9nZ2xlKCdhY3RpdmUnKTtcbiAgICAgICAgICAgICAga2V5c1s1NF0uY2xhc3NMaXN0LnRvZ2dsZSgnYWN0aXZlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgdGhpcy5zd2l0Y2hLZXlib2FyZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5rZXlib2FyZC1pY29uJyk7XG4gICAgdGhpcy5zd2l0Y2hLZXlib2FyZC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgIGtleWJvYXJkRGl2LmNsYXNzTGlzdC50b2dnbGUoJ2tleWJvYXJkLW9mZicpO1xuICAgIH0pO1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jbG9zZS1rZXlib2FyZCA+IGltZycpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAga2V5Ym9hcmREaXYuY2xhc3NMaXN0LmFkZCgna2V5Ym9hcmQtb2ZmJyk7XG4gICAgfSk7XG4gICAgdGhpcy5kcmFnQW5kRHJvcCgpO1xuICB9LFxuXG4gIGNoYW5nZUxhbmd1YWdlKCkge1xuICAgIGNvbnN0IHNpZGVLZXlzQ3VycmVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zaWRlLWtleScpO1xuICAgIGNvbnN0IG1haW5LZXlzQ3VycmVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5tYWluLWtleScpO1xuICAgIGNvbnN0IHNpZGVLZXlzUnVzQ3VycmVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zaWRlLWtleS1ydXMnKTtcbiAgICBjb25zdCBtYWluS2V5c1J1c0N1cnJlbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcubWFpbi1rZXktcnVzJyk7XG5cbiAgICBjb25zdCBsYW5ndWFnZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5sYW5ndWFnZScpO1xuICAgIGNvbnN0IGxhbmd1YWdlU2lkZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5sYW5ndWFnZS1zaWRlJyk7XG4gICAgY29uc3QgdGVtcCA9IGxhbmd1YWdlLmlubmVyVGV4dDtcbiAgICBsYW5ndWFnZS5pbm5lclRleHQgPSBsYW5ndWFnZVNpZGUuaW5uZXJUZXh0O1xuICAgIGxhbmd1YWdlU2lkZS5pbm5lclRleHQgPSB0ZW1wO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaWRlS2V5c0N1cnJlbnQubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIHNpZGVLZXlzQ3VycmVudFtpXS5jbGFzc0xpc3QudG9nZ2xlKCdkaXNhYmxlZCcpO1xuICAgICAgbWFpbktleXNDdXJyZW50W2ldLmNsYXNzTGlzdC50b2dnbGUoJ2Rpc2FibGVkJyk7XG4gICAgICBzaWRlS2V5c1J1c0N1cnJlbnRbaV0uY2xhc3NMaXN0LnRvZ2dsZSgnZGlzYWJsZWQnKTtcbiAgICAgIG1haW5LZXlzUnVzQ3VycmVudFtpXS5jbGFzc0xpc3QudG9nZ2xlKCdkaXNhYmxlZCcpO1xuICAgIH1cbiAgfSxcblxuICBiYWNrc3BhY2UoKSB7XG4gICAgY29uc3QgZmlyc3RTdHJpbmcgPSB0aGlzLnRleHRhcmVhLnZhbHVlLnNsaWNlKDAsIHRoaXMudGV4dGFyZWEuc2VsZWN0aW9uU3RhcnQpO1xuICAgIGNvbnN0IHNlY29uZFN0cmluZyA9IHRoaXMudGV4dGFyZWEudmFsdWUuc2xpY2UodGhpcy50ZXh0YXJlYS5zZWxlY3Rpb25FbmQpO1xuICAgIGNvbnN0IHBvc2l0aW9uRm9jdXMgPSB0aGlzLnRleHRhcmVhLnNlbGVjdGlvblN0YXJ0O1xuXG4gICAgdGhpcy50ZXh0YXJlYS52YWx1ZSA9IGZpcnN0U3RyaW5nLnNsaWNlKDAsIC0xKSArIHNlY29uZFN0cmluZztcbiAgICB0aGlzLnRleHRhcmVhLmZvY3VzKCk7XG4gICAgaWYgKHBvc2l0aW9uRm9jdXMgPiAwKSB7XG4gICAgICB0aGlzLnRleHRhcmVhLnNldFNlbGVjdGlvblJhbmdlKHBvc2l0aW9uRm9jdXMgLSAxLCBwb3NpdGlvbkZvY3VzIC0gMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudGV4dGFyZWEuc2V0U2VsZWN0aW9uUmFuZ2UocG9zaXRpb25Gb2N1cywgcG9zaXRpb25Gb2N1cyk7XG4gICAgfVxuICB9LFxuXG4gIGRlbGV0ZUJ1dHRvbigpIHtcbiAgICBjb25zdCBmaXJzdFN0cmluZyA9IHRoaXMudGV4dGFyZWEudmFsdWUuc2xpY2UoMCwgdGhpcy50ZXh0YXJlYS5zZWxlY3Rpb25TdGFydCk7XG4gICAgY29uc3Qgc2Vjb25kU3RyaW5nID0gdGhpcy50ZXh0YXJlYS52YWx1ZS5zbGljZSh0aGlzLnRleHRhcmVhLnNlbGVjdGlvbkVuZCk7XG4gICAgY29uc3QgcG9zaXRpb25Gb2N1cyA9IHRoaXMudGV4dGFyZWEuc2VsZWN0aW9uU3RhcnQ7XG5cbiAgICB0aGlzLnRleHRhcmVhLnZhbHVlID0gZmlyc3RTdHJpbmcgKyBzZWNvbmRTdHJpbmcuc2xpY2UoMSk7XG4gICAgdGhpcy50ZXh0YXJlYS5mb2N1cygpO1xuICAgIGlmIChwb3NpdGlvbkZvY3VzIDwgdGhpcy50ZXh0YXJlYS52YWx1ZS5sZW5ndGgpIHtcbiAgICAgIHRoaXMudGV4dGFyZWEuc2V0U2VsZWN0aW9uUmFuZ2UocG9zaXRpb25Gb2N1cywgcG9zaXRpb25Gb2N1cyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudGV4dGFyZWEuc2V0U2VsZWN0aW9uUmFuZ2UocG9zaXRpb25Gb2N1cywgcG9zaXRpb25Gb2N1cyk7XG4gICAgfVxuICB9LFxuXG4gIHNoaWZ0KCkge1xuICAgIGNvbnN0IGtleXNDdXJyZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmtleScpO1xuICAgIGtleXNDdXJyZW50LmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgaWYgKGtleS5xdWVyeVNlbGVjdG9yKCcuc2lkZS1rZXknKSkge1xuICAgICAgICBjb25zdCBzaWRlS2V5ID0ga2V5LnF1ZXJ5U2VsZWN0b3IoJy5zaWRlLWtleScpO1xuICAgICAgICBjb25zdCBtYWluS2V5ID0ga2V5LnF1ZXJ5U2VsZWN0b3IoJy5tYWluLWtleScpO1xuICAgICAgICBjb25zdCBzaWRlS2V5UnVzID0ga2V5LnF1ZXJ5U2VsZWN0b3IoJy5zaWRlLWtleS1ydXMnKTtcbiAgICAgICAgY29uc3QgbWFpbktleVJ1cyA9IGtleS5xdWVyeVNlbGVjdG9yKCcubWFpbi1rZXktcnVzJyk7XG5cbiAgICAgICAgY29uc3QgdGVtcCA9IG1haW5LZXkuaW5uZXJIVE1MO1xuICAgICAgICBjb25zdCB0ZW1wUnVzID0gbWFpbktleVJ1cy5pbm5lckhUTUw7XG5cbiAgICAgICAgbWFpbktleS5pbm5lckhUTUwgPSBzaWRlS2V5LmlubmVySFRNTDtcbiAgICAgICAgc2lkZUtleS5pbm5lckhUTUwgPSB0ZW1wO1xuXG4gICAgICAgIG1haW5LZXlSdXMuaW5uZXJIVE1MID0gc2lkZUtleVJ1cy5pbm5lckhUTUw7XG4gICAgICAgIHNpZGVLZXlSdXMuaW5uZXJIVE1MID0gdGVtcFJ1cztcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcblxuICBsZWZ0KCkge1xuICAgIGNvbnN0IHBvc2l0aW9uRm9jdXMgPSB0aGlzLnRleHRhcmVhLnNlbGVjdGlvblN0YXJ0O1xuXG4gICAgdGhpcy50ZXh0YXJlYS5mb2N1cygpO1xuICAgIGlmIChwb3NpdGlvbkZvY3VzID4gMCkge1xuICAgICAgdGhpcy50ZXh0YXJlYS5zZXRTZWxlY3Rpb25SYW5nZShwb3NpdGlvbkZvY3VzIC0gMSwgcG9zaXRpb25Gb2N1cyAtIDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnRleHRhcmVhLnNldFNlbGVjdGlvblJhbmdlKHBvc2l0aW9uRm9jdXMsIHBvc2l0aW9uRm9jdXMpO1xuICAgIH1cbiAgfSxcblxuICByaWdodCgpIHtcbiAgICBjb25zdCBwb3NpdGlvbkZvY3VzID0gdGhpcy50ZXh0YXJlYS5zZWxlY3Rpb25TdGFydDtcblxuICAgIHRoaXMudGV4dGFyZWEuZm9jdXMoKTtcbiAgICBpZiAocG9zaXRpb25Gb2N1cyA8IHRoaXMudGV4dGFyZWEudmFsdWUubGVuZ3RoKSB7XG4gICAgICB0aGlzLnRleHRhcmVhLnNldFNlbGVjdGlvblJhbmdlKHBvc2l0aW9uRm9jdXMgKyAxLCBwb3NpdGlvbkZvY3VzICsgMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudGV4dGFyZWEuc2V0U2VsZWN0aW9uUmFuZ2UocG9zaXRpb25Gb2N1cywgcG9zaXRpb25Gb2N1cyk7XG4gICAgfVxuICB9LFxuXG4gIHVwKCkge1xuICAgIGNvbnN0IHBvc2l0aW9uRm9jdXMgPSB0aGlzLnRleHRhcmVhLnNlbGVjdGlvblN0YXJ0O1xuXG4gICAgdGhpcy50ZXh0YXJlYS5mb2N1cygpO1xuICAgIGlmIChwb3NpdGlvbkZvY3VzID4gMCkge1xuICAgICAgY29uc3QgY291bnQgPSB0aGlzLnRleHRhcmVhLnZhbHVlLnNsaWNlKDAsIHRoaXMudGV4dGFyZWEuc2VsZWN0aW9uU3RhcnQpLmxlbmd0aDtcbiAgICAgIHRoaXMudGV4dGFyZWEuc2V0U2VsZWN0aW9uUmFuZ2UocG9zaXRpb25Gb2N1cyAtIGNvdW50LCBwb3NpdGlvbkZvY3VzIC0gY291bnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnRleHRhcmVhLnNldFNlbGVjdGlvblJhbmdlKHBvc2l0aW9uRm9jdXMsIHBvc2l0aW9uRm9jdXMpO1xuICAgIH1cbiAgfSxcblxuICBkb3duKCkge1xuICAgIGNvbnN0IHBvc2l0aW9uRm9jdXMgPSB0aGlzLnRleHRhcmVhLnNlbGVjdGlvblN0YXJ0O1xuXG4gICAgdGhpcy50ZXh0YXJlYS5mb2N1cygpO1xuICAgIGlmIChwb3NpdGlvbkZvY3VzIDwgdGhpcy50ZXh0YXJlYS52YWx1ZS5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IGNvdW50ID0gdGhpcy50ZXh0YXJlYS52YWx1ZS5zbGljZSh0aGlzLnRleHRhcmVhLnNlbGVjdGlvbkVuZCkubGVuZ3RoO1xuICAgICAgdGhpcy50ZXh0YXJlYS5zZXRTZWxlY3Rpb25SYW5nZShwb3NpdGlvbkZvY3VzICsgY291bnQsIHBvc2l0aW9uRm9jdXMgKyBjb3VudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudGV4dGFyZWEuc2V0U2VsZWN0aW9uUmFuZ2UocG9zaXRpb25Gb2N1cywgcG9zaXRpb25Gb2N1cyk7XG4gICAgfVxuICB9LFxuXG4gIGRyYWdBbmREcm9wKCkge1xuICAgIGNvbnN0IGRyYWdnYWJsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5rZXlib2FyZCcpO1xuXG4gICAgZHJhZ2dhYmxlLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIChldmVudCkgPT4ge1xuICAgICAgY29uc3Qgc2hpZnRYID0gZXZlbnQuY2xpZW50WCAtIGRyYWdnYWJsZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xuICAgICAgY29uc3Qgc2hpZnRZID0gZXZlbnQuY2xpZW50WSAtIGRyYWdnYWJsZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3A7XG5cbiAgICAgIGZ1bmN0aW9uIG1vdmVBdChwYWdlWCwgcGFnZVkpIHtcbiAgICAgICAgZHJhZ2dhYmxlLnN0eWxlLmxlZnQgPSBgJHtwYWdlWCAtIHNoaWZ0WH1weGA7XG4gICAgICAgIGRyYWdnYWJsZS5zdHlsZS50b3AgPSBgJHtwYWdlWSAtIHNoaWZ0WX1weGA7XG4gICAgICB9XG5cbiAgICAgIG1vdmVBdChldmVudC5wYWdlWCwgZXZlbnQucGFnZVkpO1xuXG4gICAgICBmdW5jdGlvbiBvbk1vdXNlTW92ZShldnQpIHtcbiAgICAgICAgbW92ZUF0KGV2dC5wYWdlWCwgZXZ0LnBhZ2VZKTtcbiAgICAgIH1cblxuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgb25Nb3VzZU1vdmUpO1xuXG4gICAgICBkcmFnZ2FibGUuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsICgpID0+IHtcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgb25Nb3VzZU1vdmUpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkcmFnZ2FibGUuYWRkRXZlbnRMaXN0ZW5lcignZHJhZ3N0YXJ0JywgKGV2ZW50KSA9PiB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH0pO1xuICB9LFxufTtcblxua2V5Ym9hcmQuaW5pdCgpO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9jc3NXaXRoTWFwcGluZ1RvU3RyaW5nLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIubGlzdF9fd3JhcHBlciB7XFxyXFxuICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICBoZWlnaHQ6IGNhbGMoNjAlIC0gMTBweCk7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoOCwgMTgsIDIzLCAwLjQwOCk7XFxyXFxuICAgIHBhZGRpbmc6IDEwcHggMjBweDtcXHJcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XFxyXFxufVxcclxcblxcclxcbi5saXN0LWNvbnRhaW5lciB7XFxyXFxuICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICBoZWlnaHQ6IDgwJTtcXHJcXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcXHJcXG59XFxyXFxuXFxyXFxuLmxpc3Qtd3JhcHBlciB7XFxyXFxuICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICBoZWlnaHQ6IDEwMCU7XFxyXFxuICAgIG92ZXJmbG93OiBhdXRvO1xcclxcbiAgICBmb250LXNpemU6IDJyZW07XFxyXFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG59XFxyXFxuXFxyXFxuLmxpc3Qtd3JhcHBlcl9fY291bnRyeS1ibG9jayB7XFxyXFxuICAgIHBhZGRpbmc6IDJweDtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcclxcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgICBtYXJnaW4tYm90dG9tOiA1cHg7XFxyXFxufVxcclxcblxcclxcbi5saXN0LXdyYXBwZXJfX2NvdW50cnktYmxvY2s6aG92ZXIge1xcclxcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IGdyZXk7XFxyXFxuICAgIGNvbG9yOiB3aGl0ZTtcXHJcXG59XFxyXFxuXFxyXFxuLmxpc3Qtd3JhcHBlcl9fY291bnRyeS1ibG9jayBpbWcge1xcclxcbiAgICB3aWR0aDogMzBweDtcXHJcXG59XFxyXFxuXFxyXFxuLmNvdW50cnktYmxvY2tfX2NvdW50IHtcXHJcXG4gICAgbWFyZ2luLXJpZ2h0OiAyMHB4O1xcclxcbn1cXHJcXG5cXHJcXG4uc2Nyb2xsOjotd2Via2l0LXNjcm9sbGJhci10cmFjayB7XFxyXFxuXFx0Ym9yZGVyLXJhZGl1czogMTBweDtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZmZmZjtcXHJcXG59XFxyXFxuXFxyXFxuLnNjcm9sbDo6LXdlYmtpdC1zY3JvbGxiYXIge1xcclxcbiAgICB3aWR0aDogOHB4OyAgICBcXHJcXG4gICAgYm9yZGVyLXJhZGl1czogMTBweDtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZmZmZjtcXHJcXG4gICAgbWFyZ2luLWxlZnQ6IDIwcHg7XFxyXFxufVxcclxcblxcclxcbi5zY3JvbGw6Oi13ZWJraXQtc2Nyb2xsYmFyLXRodW1iIHtcXHJcXG4gICAgYm9yZGVyLXJhZGl1czogMnB4O1xcclxcbiAgICBoZWlnaHQ6IDUwcHg7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMwODEyMTc5NTtcXHJcXG59XFxyXFxuXFxyXFxuLnNlYXJjaC1pbnB1dCB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigyNTUsIDI1NSwgMjU1KTtcXHJcXG4gICAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC43MjEpO1xcclxcbiAgICBmb250LXNpemU6IDEuNXJlbTtcXHJcXG4gICAgcGFkZGluZzogOHB4IDE1cHg7XFxyXFxuICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICBib3JkZXI6IG5vbmU7XFxyXFxuICAgIGJvcmRlci1yYWRpdXM6IDE1cHg7XFxyXFxuICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XFxyXFxufVxcclxcblxcclxcbi5zZWFyY2gtaW5wdXQ6YWN0aXZlLFxcclxcbi5zZWFyY2gtaW5wdXQ6Zm9jdXMsXFxyXFxuLmxpc3RfX3NlbGVjdDphY3RpdmUsXFxyXFxuLmxpc3RfX3NlbGVjdDpmb2N1cyB7XFxyXFxuICAgIGJvcmRlcjogbm9uZTtcXHJcXG4gICAgb3V0bGluZTogbm9uZTtcXHJcXG59XFxyXFxuXFxyXFxuLnNlYXJjaC1pbnB1dDo6cGxhY2Vob2xkZXIge1xcclxcbiAgICBjb2xvcjogcmdiYSgxNDIsIDE0MiwgMTQyLCAwLjgpO1xcclxcbiAgICBmb250LXNpemU6IDEuNXJlbTtcXHJcXG4gICAgZm9udC1mYW1pbHk6ICdCZWJhcyBOZXVlJywgY3Vyc2l2ZTtcXHJcXG59XFxyXFxuXFxyXFxuLmxpc3RfX3NlbGVjdCB7XFxyXFxuICAgIHBhZGRpbmc6IDRweCAxNXB4O1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMTE2LCAxMTYsIDExOCk7XFxyXFxuICAgIGJveC1zaGFkb3c6IGluc2V0IDBweCAtMXB4IDFweCByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMjgpLCBpbnNldCAwcHggMXB4IDJweCByZ2JhKDAsIDAsIDAsIDAuMjUpO1xcclxcbiAgICBjb2xvcjogcmdiKDI1NSwgMjU1LCAyNTUpO1xcclxcbiAgICBmb250LXNpemU6IDEuNXJlbTsgICBcXHJcXG4gICAgYm9yZGVyOiBub25lO1xcclxcbiAgICBib3JkZXItcmFkaXVzOiAxNXB4O1xcclxcbiAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xcclxcbiAgICB3aWR0aDogMzAlO1xcclxcbiAgICBmb250LWZhbWlseTogJ0JlYmFzIE5ldWUnLCBjdXJzaXZlO1xcclxcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG59XFxyXFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3Nhc3MvbGlzdC9saXN0LmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtJQUNJLFdBQVc7SUFDWCx3QkFBd0I7SUFDeEIsd0NBQXdDO0lBQ3hDLGtCQUFrQjtJQUNsQixrQkFBa0I7SUFDbEIsYUFBYTtJQUNiLHNCQUFzQjtJQUN0QiwyQkFBMkI7QUFDL0I7O0FBRUE7SUFDSSxXQUFXO0lBQ1gsV0FBVztJQUNYLGdCQUFnQjtBQUNwQjs7QUFFQTtJQUNJLFdBQVc7SUFDWCxZQUFZO0lBQ1osY0FBYztJQUNkLGVBQWU7SUFDZixrQkFBa0I7QUFDdEI7O0FBRUE7SUFDSSxZQUFZO0lBQ1osYUFBYTtJQUNiLDhCQUE4QjtJQUM5QixtQkFBbUI7SUFDbkIsa0JBQWtCO0FBQ3RCOztBQUVBO0lBQ0ksZUFBZTtJQUNmLHNCQUFzQjtJQUN0QixZQUFZO0FBQ2hCOztBQUVBO0lBQ0ksV0FBVztBQUNmOztBQUVBO0lBQ0ksa0JBQWtCO0FBQ3RCOztBQUVBO0NBQ0MsbUJBQW1CO0lBQ2hCLHlCQUF5QjtBQUM3Qjs7QUFFQTtJQUNJLFVBQVU7SUFDVixtQkFBbUI7SUFDbkIseUJBQXlCO0lBQ3pCLGlCQUFpQjtBQUNyQjs7QUFFQTtJQUNJLGtCQUFrQjtJQUNsQixZQUFZO0lBQ1osMkJBQTJCO0FBQy9COztBQUVBO0lBQ0ksb0NBQW9DO0lBQ3BDLDJCQUEyQjtJQUMzQixpQkFBaUI7SUFDakIsaUJBQWlCO0lBQ2pCLFdBQVc7SUFDWCxZQUFZO0lBQ1osbUJBQW1CO0lBQ25CLG1CQUFtQjtBQUN2Qjs7QUFFQTs7OztJQUlJLFlBQVk7SUFDWixhQUFhO0FBQ2pCOztBQUVBO0lBQ0ksK0JBQStCO0lBQy9CLGlCQUFpQjtJQUNqQixrQ0FBa0M7QUFDdEM7O0FBRUE7SUFDSSxpQkFBaUI7SUFDakIsb0NBQW9DO0lBQ3BDLCtGQUErRjtJQUMvRix5QkFBeUI7SUFDekIsaUJBQWlCO0lBQ2pCLFlBQVk7SUFDWixtQkFBbUI7SUFDbkIsbUJBQW1CO0lBQ25CLFVBQVU7SUFDVixrQ0FBa0M7SUFDbEMsZUFBZTtJQUNmLGtCQUFrQjtBQUN0QlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIubGlzdF9fd3JhcHBlciB7XFxyXFxuICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICBoZWlnaHQ6IGNhbGMoNjAlIC0gMTBweCk7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoOCwgMTgsIDIzLCAwLjQwOCk7XFxyXFxuICAgIHBhZGRpbmc6IDEwcHggMjBweDtcXHJcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XFxyXFxufVxcclxcblxcclxcbi5saXN0LWNvbnRhaW5lciB7XFxyXFxuICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICBoZWlnaHQ6IDgwJTtcXHJcXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcXHJcXG59XFxyXFxuXFxyXFxuLmxpc3Qtd3JhcHBlciB7XFxyXFxuICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICBoZWlnaHQ6IDEwMCU7XFxyXFxuICAgIG92ZXJmbG93OiBhdXRvO1xcclxcbiAgICBmb250LXNpemU6IDJyZW07XFxyXFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG59XFxyXFxuXFxyXFxuLmxpc3Qtd3JhcHBlcl9fY291bnRyeS1ibG9jayB7XFxyXFxuICAgIHBhZGRpbmc6IDJweDtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcclxcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgICBtYXJnaW4tYm90dG9tOiA1cHg7XFxyXFxufVxcclxcblxcclxcbi5saXN0LXdyYXBwZXJfX2NvdW50cnktYmxvY2s6aG92ZXIge1xcclxcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IGdyZXk7XFxyXFxuICAgIGNvbG9yOiB3aGl0ZTtcXHJcXG59XFxyXFxuXFxyXFxuLmxpc3Qtd3JhcHBlcl9fY291bnRyeS1ibG9jayBpbWcge1xcclxcbiAgICB3aWR0aDogMzBweDtcXHJcXG59XFxyXFxuXFxyXFxuLmNvdW50cnktYmxvY2tfX2NvdW50IHtcXHJcXG4gICAgbWFyZ2luLXJpZ2h0OiAyMHB4O1xcclxcbn1cXHJcXG5cXHJcXG4uc2Nyb2xsOjotd2Via2l0LXNjcm9sbGJhci10cmFjayB7XFxyXFxuXFx0Ym9yZGVyLXJhZGl1czogMTBweDtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZmZmZjtcXHJcXG59XFxyXFxuXFxyXFxuLnNjcm9sbDo6LXdlYmtpdC1zY3JvbGxiYXIge1xcclxcbiAgICB3aWR0aDogOHB4OyAgICBcXHJcXG4gICAgYm9yZGVyLXJhZGl1czogMTBweDtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZmZmZjtcXHJcXG4gICAgbWFyZ2luLWxlZnQ6IDIwcHg7XFxyXFxufVxcclxcblxcclxcbi5zY3JvbGw6Oi13ZWJraXQtc2Nyb2xsYmFyLXRodW1iIHtcXHJcXG4gICAgYm9yZGVyLXJhZGl1czogMnB4O1xcclxcbiAgICBoZWlnaHQ6IDUwcHg7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMwODEyMTc5NTtcXHJcXG59XFxyXFxuXFxyXFxuLnNlYXJjaC1pbnB1dCB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigyNTUsIDI1NSwgMjU1KTtcXHJcXG4gICAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC43MjEpO1xcclxcbiAgICBmb250LXNpemU6IDEuNXJlbTtcXHJcXG4gICAgcGFkZGluZzogOHB4IDE1cHg7XFxyXFxuICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICBib3JkZXI6IG5vbmU7XFxyXFxuICAgIGJvcmRlci1yYWRpdXM6IDE1cHg7XFxyXFxuICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XFxyXFxufVxcclxcblxcclxcbi5zZWFyY2gtaW5wdXQ6YWN0aXZlLFxcclxcbi5zZWFyY2gtaW5wdXQ6Zm9jdXMsXFxyXFxuLmxpc3RfX3NlbGVjdDphY3RpdmUsXFxyXFxuLmxpc3RfX3NlbGVjdDpmb2N1cyB7XFxyXFxuICAgIGJvcmRlcjogbm9uZTtcXHJcXG4gICAgb3V0bGluZTogbm9uZTtcXHJcXG59XFxyXFxuXFxyXFxuLnNlYXJjaC1pbnB1dDo6cGxhY2Vob2xkZXIge1xcclxcbiAgICBjb2xvcjogcmdiYSgxNDIsIDE0MiwgMTQyLCAwLjgpO1xcclxcbiAgICBmb250LXNpemU6IDEuNXJlbTtcXHJcXG4gICAgZm9udC1mYW1pbHk6ICdCZWJhcyBOZXVlJywgY3Vyc2l2ZTtcXHJcXG59XFxyXFxuXFxyXFxuLmxpc3RfX3NlbGVjdCB7XFxyXFxuICAgIHBhZGRpbmc6IDRweCAxNXB4O1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMTE2LCAxMTYsIDExOCk7XFxyXFxuICAgIGJveC1zaGFkb3c6IGluc2V0IDBweCAtMXB4IDFweCByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMjgpLCBpbnNldCAwcHggMXB4IDJweCByZ2JhKDAsIDAsIDAsIDAuMjUpO1xcclxcbiAgICBjb2xvcjogcmdiKDI1NSwgMjU1LCAyNTUpO1xcclxcbiAgICBmb250LXNpemU6IDEuNXJlbTsgICBcXHJcXG4gICAgYm9yZGVyOiBub25lO1xcclxcbiAgICBib3JkZXItcmFkaXVzOiAxNXB4O1xcclxcbiAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xcclxcbiAgICB3aWR0aDogMzAlO1xcclxcbiAgICBmb250LWZhbWlseTogJ0JlYmFzIE5ldWUnLCBjdXJzaXZlO1xcclxcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG59XFxyXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLnRhYmxlX193cmFwcGVyIHtcXHJcXG4gICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgIGhlaWdodDogNDAlO1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDgsIDE4LCAyMywgMC40MDgpO1xcclxcbiAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xcclxcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXHJcXG59XFxyXFxuXFxyXFxuXFxyXFxuXFxyXFxuLnRhYmxlLWNvbnRlbnQge1xcclxcbiAgICB3aWR0aDogMTAwJTtcXHJcXG4gICAgaGVpZ2h0OiAxMDAlO1xcclxcbiAgICBkaXNwbGF5OiBncmlkO1xcclxcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCgzLCAxZnIpO1xcclxcbiAgICBncmlkLXRlbXBsYXRlLXJvd3M6IHJlcGVhdCgyLCAxZnIpO1xcclxcbiAgICBmb250LXNpemU6IDJyZW07XFxyXFxufVxcclxcblxcclxcbi50YWJsZS1jb250ZW50ID4gZGl2IHtcXHJcXG4gICAgcGFkZGluZzogMTBweDtcXHJcXG59XFxyXFxuXFxyXFxuLnRhYmxlLXZhbHVlcy13cmFwcGVyIHtcXHJcXG4gICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgIGhlaWdodDogNjAlO1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG59XFxyXFxuXFxyXFxuLnRhYmxlLWNvbnRlbnRfX25hbWUge1xcclxcbiAgICBncmlkLWNvbHVtbi1zdGFydDogMTtcXHJcXG4gICAgZ3JpZC1jb2x1bW4tZW5kOiA0O1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDgxMjE3NTM7XFxyXFxuICAgIGJvcmRlci1ib3R0b206IDJweCBzb2xpZCByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMjM4KTtcXHJcXG4gICAgZm9udC1zaXplOiAzcmVtO1xcclxcbn1cXHJcXG5cXHJcXG4udGFibGUtY2VsbCB7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbiAgICBhbGlnbi1pdGVtczogY2VudGVyOyAgXFxyXFxufVxcclxcblxcclxcbi50YWJsZS1jb250ZW50X19jYXNlczpob3ZlcixcXHJcXG4udGFibGUtY29udGVudF9fZGVhdGhzOmhvdmVyLFxcclxcbi50YWJsZS1jb250ZW50X19yZWNvdmVyZWQ6aG92ZXIge1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMGQxNTE5OTA7XFxyXFxufVxcclxcblxcclxcbi5tb2Rlcy13cmFwcGVyIHtcXHJcXG4gICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgIGhlaWdodDogNDAlO1xcclxcbiAgICBmb250LXNpemU6IDJyZW07XFxyXFxuICAgIHBhZGRpbmctYm90dG9tOiAxMHB4O1xcclxcbiAgICBkaXNwbGF5OiBncmlkO1xcclxcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCgyLCAxZnIpO1xcclxcbiAgICBib3JkZXItdG9wOiAycHggc29saWQgIzA4MTIxNzk1O1xcclxcbn1cXHJcXG5cXHJcXG4ubW9kZXMtd3JhcHBlcl9fY2VsbCB7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbn1cXHJcXG5cXHJcXG4ubW9kZXMtd3JhcHBlcl9fY2VsbCA+IGRpdiA+IGlucHV0LFxcclxcbi5tb2Rlcy13cmFwcGVyX19jZWxsID4gZGl2ID4gbGFiZWwge1xcclxcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxufVxcclxcblxcclxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zYXNzL3RhYmxlL3RhYmxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtJQUNJLFdBQVc7SUFDWCxXQUFXO0lBQ1gsd0NBQXdDO0lBQ3hDLG1CQUFtQjtJQUNuQixrQkFBa0I7SUFDbEIsYUFBYTtJQUNiLHNCQUFzQjtJQUN0QixtQkFBbUI7SUFDbkIsOEJBQThCO0FBQ2xDOzs7O0FBSUE7SUFDSSxXQUFXO0lBQ1gsWUFBWTtJQUNaLGFBQWE7SUFDYixxQ0FBcUM7SUFDckMsa0NBQWtDO0lBQ2xDLGVBQWU7QUFDbkI7O0FBRUE7SUFDSSxhQUFhO0FBQ2pCOztBQUVBO0lBQ0ksV0FBVztJQUNYLFdBQVc7SUFDWCxhQUFhO0lBQ2IsbUJBQW1CO0lBQ25CLHVCQUF1QjtBQUMzQjs7QUFFQTtJQUNJLG9CQUFvQjtJQUNwQixrQkFBa0I7SUFDbEIsMkJBQTJCO0lBQzNCLG1EQUFtRDtJQUNuRCxlQUFlO0FBQ25COztBQUVBO0lBQ0ksYUFBYTtJQUNiLHNCQUFzQjtJQUN0Qix1QkFBdUI7SUFDdkIsbUJBQW1CO0FBQ3ZCOztBQUVBOzs7SUFHSSwyQkFBMkI7QUFDL0I7O0FBRUE7SUFDSSxXQUFXO0lBQ1gsV0FBVztJQUNYLGVBQWU7SUFDZixvQkFBb0I7SUFDcEIsYUFBYTtJQUNiLHFDQUFxQztJQUNyQywrQkFBK0I7QUFDbkM7O0FBRUE7SUFDSSxhQUFhO0lBQ2Isc0JBQXNCO0lBQ3RCLG1CQUFtQjtJQUNuQix1QkFBdUI7QUFDM0I7O0FBRUE7O0lBRUksZUFBZTtBQUNuQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIudGFibGVfX3dyYXBwZXIge1xcclxcbiAgICB3aWR0aDogMTAwJTtcXHJcXG4gICAgaGVpZ2h0OiA0MCU7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoOCwgMTgsIDIzLCAwLjQwOCk7XFxyXFxuICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XFxyXFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcclxcbn1cXHJcXG5cXHJcXG5cXHJcXG5cXHJcXG4udGFibGUtY29udGVudCB7XFxyXFxuICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICBoZWlnaHQ6IDEwMCU7XFxyXFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxyXFxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KDMsIDFmcik7XFxyXFxuICAgIGdyaWQtdGVtcGxhdGUtcm93czogcmVwZWF0KDIsIDFmcik7XFxyXFxuICAgIGZvbnQtc2l6ZTogMnJlbTtcXHJcXG59XFxyXFxuXFxyXFxuLnRhYmxlLWNvbnRlbnQgPiBkaXYge1xcclxcbiAgICBwYWRkaW5nOiAxMHB4O1xcclxcbn1cXHJcXG5cXHJcXG4udGFibGUtdmFsdWVzLXdyYXBwZXIge1xcclxcbiAgICB3aWR0aDogMTAwJTtcXHJcXG4gICAgaGVpZ2h0OiA2MCU7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbn1cXHJcXG5cXHJcXG4udGFibGUtY29udGVudF9fbmFtZSB7XFxyXFxuICAgIGdyaWQtY29sdW1uLXN0YXJ0OiAxO1xcclxcbiAgICBncmlkLWNvbHVtbi1lbmQ6IDQ7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMwODEyMTc1MztcXHJcXG4gICAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yMzgpO1xcclxcbiAgICBmb250LXNpemU6IDNyZW07XFxyXFxufVxcclxcblxcclxcbi50YWJsZS1jZWxsIHtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7ICBcXHJcXG59XFxyXFxuXFxyXFxuLnRhYmxlLWNvbnRlbnRfX2Nhc2VzOmhvdmVyLFxcclxcbi50YWJsZS1jb250ZW50X19kZWF0aHM6aG92ZXIsXFxyXFxuLnRhYmxlLWNvbnRlbnRfX3JlY292ZXJlZDpob3ZlciB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMwZDE1MTk5MDtcXHJcXG59XFxyXFxuXFxyXFxuLm1vZGVzLXdyYXBwZXIge1xcclxcbiAgICB3aWR0aDogMTAwJTtcXHJcXG4gICAgaGVpZ2h0OiA0MCU7XFxyXFxuICAgIGZvbnQtc2l6ZTogMnJlbTtcXHJcXG4gICAgcGFkZGluZy1ib3R0b206IDEwcHg7XFxyXFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxyXFxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KDIsIDFmcik7XFxyXFxuICAgIGJvcmRlci10b3A6IDJweCBzb2xpZCAjMDgxMjE3OTU7XFxyXFxufVxcclxcblxcclxcbi5tb2Rlcy13cmFwcGVyX19jZWxsIHtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxufVxcclxcblxcclxcbi5tb2Rlcy13cmFwcGVyX19jZWxsID4gZGl2ID4gaW5wdXQsXFxyXFxuLm1vZGVzLXdyYXBwZXJfX2NlbGwgPiBkaXYgPiBsYWJlbCB7XFxyXFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXHJcXG59XFxyXFxuXFxyXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIHJldHVybiBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoY29udGVudCwgXCJ9XCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKCcnKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIChtb2R1bGVzLCBtZWRpYVF1ZXJ5LCBkZWR1cGUpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsICcnXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcbiAgICAgICAgdmFyIGlkID0gdGhpc1tpXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBtb2R1bGVzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfaV0pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRpbnVlXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWFRdWVyeSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWFRdWVyeTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzJdID0gXCJcIi5jb25jYXQobWVkaWFRdWVyeSwgXCIgYW5kIFwiKS5jb25jYXQoaXRlbVsyXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgeyByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOyB9XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH1cblxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgeyBpZiAoIW8pIHJldHVybjsgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9XG5cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcInVuZGVmaW5lZFwiIHx8ICEoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSkgcmV0dXJuOyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH1cblxuZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKSB7XG4gIHZhciBfaXRlbSA9IF9zbGljZWRUb0FycmF5KGl0ZW0sIDQpLFxuICAgICAgY29udGVudCA9IF9pdGVtWzFdLFxuICAgICAgY3NzTWFwcGluZyA9IF9pdGVtWzNdO1xuXG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCB8fCAnJykuY29uY2F0KHNvdXJjZSwgXCIgKi9cIik7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbignXFxuJyk7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oJ1xcbicpO1xufTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbnZhciBydW50aW1lID0gKGZ1bmN0aW9uIChleHBvcnRzKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBPcCA9IE9iamVjdC5wcm90b3R5cGU7XG4gIHZhciBoYXNPd24gPSBPcC5oYXNPd25Qcm9wZXJ0eTtcbiAgdmFyIHVuZGVmaW5lZDsgLy8gTW9yZSBjb21wcmVzc2libGUgdGhhbiB2b2lkIDAuXG4gIHZhciAkU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiID8gU3ltYm9sIDoge307XG4gIHZhciBpdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuaXRlcmF0b3IgfHwgXCJAQGl0ZXJhdG9yXCI7XG4gIHZhciBhc3luY0l0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5hc3luY0l0ZXJhdG9yIHx8IFwiQEBhc3luY0l0ZXJhdG9yXCI7XG4gIHZhciB0b1N0cmluZ1RhZ1N5bWJvbCA9ICRTeW1ib2wudG9TdHJpbmdUYWcgfHwgXCJAQHRvU3RyaW5nVGFnXCI7XG5cbiAgZnVuY3Rpb24gZGVmaW5lKG9iaiwga2V5LCB2YWx1ZSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIG9ialtrZXldO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gSUUgOCBoYXMgYSBicm9rZW4gT2JqZWN0LmRlZmluZVByb3BlcnR5IHRoYXQgb25seSB3b3JrcyBvbiBET00gb2JqZWN0cy5cbiAgICBkZWZpbmUoe30sIFwiXCIpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBkZWZpbmUgPSBmdW5jdGlvbihvYmosIGtleSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBvYmpba2V5XSA9IHZhbHVlO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gSWYgb3V0ZXJGbiBwcm92aWRlZCBhbmQgb3V0ZXJGbi5wcm90b3R5cGUgaXMgYSBHZW5lcmF0b3IsIHRoZW4gb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IuXG4gICAgdmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IG91dGVyRm4gOiBHZW5lcmF0b3I7XG4gICAgdmFyIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUocHJvdG9HZW5lcmF0b3IucHJvdG90eXBlKTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTtcblxuICAgIC8vIFRoZSAuX2ludm9rZSBtZXRob2QgdW5pZmllcyB0aGUgaW1wbGVtZW50YXRpb25zIG9mIHRoZSAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMuXG4gICAgZ2VuZXJhdG9yLl9pbnZva2UgPSBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuXG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgfVxuICBleHBvcnRzLndyYXAgPSB3cmFwO1xuXG4gIC8vIFRyeS9jYXRjaCBoZWxwZXIgdG8gbWluaW1pemUgZGVvcHRpbWl6YXRpb25zLiBSZXR1cm5zIGEgY29tcGxldGlvblxuICAvLyByZWNvcmQgbGlrZSBjb250ZXh0LnRyeUVudHJpZXNbaV0uY29tcGxldGlvbi4gVGhpcyBpbnRlcmZhY2UgY291bGRcbiAgLy8gaGF2ZSBiZWVuIChhbmQgd2FzIHByZXZpb3VzbHkpIGRlc2lnbmVkIHRvIHRha2UgYSBjbG9zdXJlIHRvIGJlXG4gIC8vIGludm9rZWQgd2l0aG91dCBhcmd1bWVudHMsIGJ1dCBpbiBhbGwgdGhlIGNhc2VzIHdlIGNhcmUgYWJvdXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAvLyB0byBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gb2JqZWN0LiBXZSBjYW4gZXZlbiBnZXQgYXdheSB3aXRoIGFzc3VtaW5nXG4gIC8vIHRoZSBtZXRob2QgdGFrZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIHNpbmNlIHRoYXQgaGFwcGVucyB0byBiZSB0cnVlXG4gIC8vIGluIGV2ZXJ5IGNhc2UsIHNvIHdlIGRvbid0IGhhdmUgdG8gdG91Y2ggdGhlIGFyZ3VtZW50cyBvYmplY3QuIFRoZVxuICAvLyBvbmx5IGFkZGl0aW9uYWwgYWxsb2NhdGlvbiByZXF1aXJlZCBpcyB0aGUgY29tcGxldGlvbiByZWNvcmQsIHdoaWNoXG4gIC8vIGhhcyBhIHN0YWJsZSBzaGFwZSBhbmQgc28gaG9wZWZ1bGx5IHNob3VsZCBiZSBjaGVhcCB0byBhbGxvY2F0ZS5cbiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwibm9ybWFsXCIsIGFyZzogZm4uY2FsbChvYmosIGFyZykgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwidGhyb3dcIiwgYXJnOiBlcnIgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRTdGFydCA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkWWllbGQgPSBcInN1c3BlbmRlZFlpZWxkXCI7XG4gIHZhciBHZW5TdGF0ZUV4ZWN1dGluZyA9IFwiZXhlY3V0aW5nXCI7XG4gIHZhciBHZW5TdGF0ZUNvbXBsZXRlZCA9IFwiY29tcGxldGVkXCI7XG5cbiAgLy8gUmV0dXJuaW5nIHRoaXMgb2JqZWN0IGZyb20gdGhlIGlubmVyRm4gaGFzIHRoZSBzYW1lIGVmZmVjdCBhc1xuICAvLyBicmVha2luZyBvdXQgb2YgdGhlIGRpc3BhdGNoIHN3aXRjaCBzdGF0ZW1lbnQuXG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XG5cbiAgLy8gRHVtbXkgY29uc3RydWN0b3IgZnVuY3Rpb25zIHRoYXQgd2UgdXNlIGFzIHRoZSAuY29uc3RydWN0b3IgYW5kXG4gIC8vIC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgcHJvcGVydGllcyBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIEdlbmVyYXRvclxuICAvLyBvYmplY3RzLiBGb3IgZnVsbCBzcGVjIGNvbXBsaWFuY2UsIHlvdSBtYXkgd2lzaCB0byBjb25maWd1cmUgeW91clxuICAvLyBtaW5pZmllciBub3QgdG8gbWFuZ2xlIHRoZSBuYW1lcyBvZiB0aGVzZSB0d28gZnVuY3Rpb25zLlxuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cblxuICAvLyBUaGlzIGlzIGEgcG9seWZpbGwgZm9yICVJdGVyYXRvclByb3RvdHlwZSUgZm9yIGVudmlyb25tZW50cyB0aGF0XG4gIC8vIGRvbid0IG5hdGl2ZWx5IHN1cHBvcnQgaXQuXG4gIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuICBJdGVyYXRvclByb3RvdHlwZVtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICB2YXIgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90byAmJiBnZXRQcm90byhnZXRQcm90byh2YWx1ZXMoW10pKSk7XG4gIGlmIChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJlxuICAgICAgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmXG4gICAgICBoYXNPd24uY2FsbChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wpKSB7XG4gICAgLy8gVGhpcyBlbnZpcm9ubWVudCBoYXMgYSBuYXRpdmUgJUl0ZXJhdG9yUHJvdG90eXBlJTsgdXNlIGl0IGluc3RlYWRcbiAgICAvLyBvZiB0aGUgcG9seWZpbGwuXG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxuXG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9XG4gICAgR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHcC5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IGRlZmluZShcbiAgICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSxcbiAgICB0b1N0cmluZ1RhZ1N5bWJvbCxcbiAgICBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgKTtcblxuICAvLyBIZWxwZXIgZm9yIGRlZmluaW5nIHRoZSAubmV4dCwgLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzIG9mIHRoZVxuICAvLyBJdGVyYXRvciBpbnRlcmZhY2UgaW4gdGVybXMgb2YgYSBzaW5nbGUgLl9pbnZva2UgbWV0aG9kLlxuICBmdW5jdGlvbiBkZWZpbmVJdGVyYXRvck1ldGhvZHMocHJvdG90eXBlKSB7XG4gICAgW1wibmV4dFwiLCBcInRocm93XCIsIFwicmV0dXJuXCJdLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICBkZWZpbmUocHJvdG90eXBlLCBtZXRob2QsIGZ1bmN0aW9uKGFyZykge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCwgYXJnKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgdmFyIGN0b3IgPSB0eXBlb2YgZ2VuRnVuID09PSBcImZ1bmN0aW9uXCIgJiYgZ2VuRnVuLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiBjdG9yXG4gICAgICA/IGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8XG4gICAgICAgIC8vIEZvciB0aGUgbmF0aXZlIEdlbmVyYXRvckZ1bmN0aW9uIGNvbnN0cnVjdG9yLCB0aGUgYmVzdCB3ZSBjYW5cbiAgICAgICAgLy8gZG8gaXMgdG8gY2hlY2sgaXRzIC5uYW1lIHByb3BlcnR5LlxuICAgICAgICAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpID09PSBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgICAgIDogZmFsc2U7XG4gIH07XG5cbiAgZXhwb3J0cy5tYXJrID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZW5GdW4uX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gICAgICBkZWZpbmUoZ2VuRnVuLCB0b1N0cmluZ1RhZ1N5bWJvbCwgXCJHZW5lcmF0b3JGdW5jdGlvblwiKTtcbiAgICB9XG4gICAgZ2VuRnVuLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR3ApO1xuICAgIHJldHVybiBnZW5GdW47XG4gIH07XG5cbiAgLy8gV2l0aGluIHRoZSBib2R5IG9mIGFueSBhc3luYyBmdW5jdGlvbiwgYGF3YWl0IHhgIGlzIHRyYW5zZm9ybWVkIHRvXG4gIC8vIGB5aWVsZCByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoeClgLCBzbyB0aGF0IHRoZSBydW50aW1lIGNhbiB0ZXN0XG4gIC8vIGBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpYCB0byBkZXRlcm1pbmUgaWYgdGhlIHlpZWxkZWQgdmFsdWUgaXNcbiAgLy8gbWVhbnQgdG8gYmUgYXdhaXRlZC5cbiAgZXhwb3J0cy5hd3JhcCA9IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB7IF9fYXdhaXQ6IGFyZyB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IoZ2VuZXJhdG9yLCBQcm9taXNlSW1wbCkge1xuICAgIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goZ2VuZXJhdG9yW21ldGhvZF0sIGdlbmVyYXRvciwgYXJnKTtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHJlamVjdChyZWNvcmQuYXJnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWNvcmQuYXJnO1xuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSAmJlxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2VJbXBsLnJlc29sdmUodmFsdWUuX19hd2FpdCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaW52b2tlKFwibmV4dFwiLCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGludm9rZShcInRocm93XCIsIGVyciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlSW1wbC5yZXNvbHZlKHZhbHVlKS50aGVuKGZ1bmN0aW9uKHVud3JhcHBlZCkge1xuICAgICAgICAgIC8vIFdoZW4gYSB5aWVsZGVkIFByb21pc2UgaXMgcmVzb2x2ZWQsIGl0cyBmaW5hbCB2YWx1ZSBiZWNvbWVzXG4gICAgICAgICAgLy8gdGhlIC52YWx1ZSBvZiB0aGUgUHJvbWlzZTx7dmFsdWUsZG9uZX0+IHJlc3VsdCBmb3IgdGhlXG4gICAgICAgICAgLy8gY3VycmVudCBpdGVyYXRpb24uXG4gICAgICAgICAgcmVzdWx0LnZhbHVlID0gdW53cmFwcGVkO1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAvLyBJZiBhIHJlamVjdGVkIFByb21pc2Ugd2FzIHlpZWxkZWQsIHRocm93IHRoZSByZWplY3Rpb24gYmFja1xuICAgICAgICAgIC8vIGludG8gdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBzbyBpdCBjYW4gYmUgaGFuZGxlZCB0aGVyZS5cbiAgICAgICAgICByZXR1cm4gaW52b2tlKFwidGhyb3dcIiwgZXJyb3IsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwcmV2aW91c1Byb21pc2U7XG5cbiAgICBmdW5jdGlvbiBlbnF1ZXVlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBmdW5jdGlvbiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlSW1wbChmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJldmlvdXNQcm9taXNlID1cbiAgICAgICAgLy8gSWYgZW5xdWV1ZSBoYXMgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIHdlIHdhbnQgdG8gd2FpdCB1bnRpbFxuICAgICAgICAvLyBhbGwgcHJldmlvdXMgUHJvbWlzZXMgaGF2ZSBiZWVuIHJlc29sdmVkIGJlZm9yZSBjYWxsaW5nIGludm9rZSxcbiAgICAgICAgLy8gc28gdGhhdCByZXN1bHRzIGFyZSBhbHdheXMgZGVsaXZlcmVkIGluIHRoZSBjb3JyZWN0IG9yZGVyLiBJZlxuICAgICAgICAvLyBlbnF1ZXVlIGhhcyBub3QgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIGl0IGlzIGltcG9ydGFudCB0b1xuICAgICAgICAvLyBjYWxsIGludm9rZSBpbW1lZGlhdGVseSwgd2l0aG91dCB3YWl0aW5nIG9uIGEgY2FsbGJhY2sgdG8gZmlyZSxcbiAgICAgICAgLy8gc28gdGhhdCB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhcyB0aGUgb3Bwb3J0dW5pdHkgdG8gZG9cbiAgICAgICAgLy8gYW55IG5lY2Vzc2FyeSBzZXR1cCBpbiBhIHByZWRpY3RhYmxlIHdheS4gVGhpcyBwcmVkaWN0YWJpbGl0eVxuICAgICAgICAvLyBpcyB3aHkgdGhlIFByb21pc2UgY29uc3RydWN0b3Igc3luY2hyb25vdXNseSBpbnZva2VzIGl0c1xuICAgICAgICAvLyBleGVjdXRvciBjYWxsYmFjaywgYW5kIHdoeSBhc3luYyBmdW5jdGlvbnMgc3luY2hyb25vdXNseVxuICAgICAgICAvLyBleGVjdXRlIGNvZGUgYmVmb3JlIHRoZSBmaXJzdCBhd2FpdC4gU2luY2Ugd2UgaW1wbGVtZW50IHNpbXBsZVxuICAgICAgICAvLyBhc3luYyBmdW5jdGlvbnMgaW4gdGVybXMgb2YgYXN5bmMgZ2VuZXJhdG9ycywgaXQgaXMgZXNwZWNpYWxseVxuICAgICAgICAvLyBpbXBvcnRhbnQgdG8gZ2V0IHRoaXMgcmlnaHQsIGV2ZW4gdGhvdWdoIGl0IHJlcXVpcmVzIGNhcmUuXG4gICAgICAgIHByZXZpb3VzUHJvbWlzZSA/IHByZXZpb3VzUHJvbWlzZS50aGVuKFxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnLFxuICAgICAgICAgIC8vIEF2b2lkIHByb3BhZ2F0aW5nIGZhaWx1cmVzIHRvIFByb21pc2VzIHJldHVybmVkIGJ5IGxhdGVyXG4gICAgICAgICAgLy8gaW52b2NhdGlvbnMgb2YgdGhlIGl0ZXJhdG9yLlxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnXG4gICAgICAgICkgOiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpO1xuICAgIH1cblxuICAgIC8vIERlZmluZSB0aGUgdW5pZmllZCBoZWxwZXIgbWV0aG9kIHRoYXQgaXMgdXNlZCB0byBpbXBsZW1lbnQgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiAoc2VlIGRlZmluZUl0ZXJhdG9yTWV0aG9kcykuXG4gICAgdGhpcy5faW52b2tlID0gZW5xdWV1ZTtcbiAgfVxuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSk7XG4gIEFzeW5jSXRlcmF0b3IucHJvdG90eXBlW2FzeW5jSXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICBleHBvcnRzLkFzeW5jSXRlcmF0b3IgPSBBc3luY0l0ZXJhdG9yO1xuXG4gIC8vIE5vdGUgdGhhdCBzaW1wbGUgYXN5bmMgZnVuY3Rpb25zIGFyZSBpbXBsZW1lbnRlZCBvbiB0b3Agb2ZcbiAgLy8gQXN5bmNJdGVyYXRvciBvYmplY3RzOyB0aGV5IGp1c3QgcmV0dXJuIGEgUHJvbWlzZSBmb3IgdGhlIHZhbHVlIG9mXG4gIC8vIHRoZSBmaW5hbCByZXN1bHQgcHJvZHVjZWQgYnkgdGhlIGl0ZXJhdG9yLlxuICBleHBvcnRzLmFzeW5jID0gZnVuY3Rpb24oaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QsIFByb21pc2VJbXBsKSB7XG4gICAgaWYgKFByb21pc2VJbXBsID09PSB2b2lkIDApIFByb21pc2VJbXBsID0gUHJvbWlzZTtcblxuICAgIHZhciBpdGVyID0gbmV3IEFzeW5jSXRlcmF0b3IoXG4gICAgICB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSxcbiAgICAgIFByb21pc2VJbXBsXG4gICAgKTtcblxuICAgIHJldHVybiBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbilcbiAgICAgID8gaXRlciAvLyBJZiBvdXRlckZuIGlzIGEgZ2VuZXJhdG9yLCByZXR1cm4gdGhlIGZ1bGwgaXRlcmF0b3IuXG4gICAgICA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzdWx0LnZhbHVlIDogaXRlci5uZXh0KCk7XG4gICAgICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkge1xuICAgIHZhciBzdGF0ZSA9IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlRXhlY3V0aW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVDb21wbGV0ZWQpIHtcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgdGhyb3cgYXJnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmUgZm9yZ2l2aW5nLCBwZXIgMjUuMy4zLjMuMyBvZiB0aGUgc3BlYzpcbiAgICAgICAgLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWdlbmVyYXRvcnJlc3VtZVxuICAgICAgICByZXR1cm4gZG9uZVJlc3VsdCgpO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgIGNvbnRleHQuYXJnID0gYXJnO1xuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICB2YXIgZGVsZWdhdGVSZXN1bHQgPSBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcbiAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGVSZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAgIC8vIFNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICAgICAgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGNvbnRleHQuYXJnO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkge1xuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAgIHRocm93IGNvbnRleHQuYXJnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgICBjb250ZXh0LmFicnVwdChcInJldHVyblwiLCBjb250ZXh0LmFyZyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZSA9IEdlblN0YXRlRXhlY3V0aW5nO1xuXG4gICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiKSB7XG4gICAgICAgICAgLy8gSWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBmcm9tIGlubmVyRm4sIHdlIGxlYXZlIHN0YXRlID09PVxuICAgICAgICAgIC8vIEdlblN0YXRlRXhlY3V0aW5nIGFuZCBsb29wIGJhY2sgZm9yIGFub3RoZXIgaW52b2NhdGlvbi5cbiAgICAgICAgICBzdGF0ZSA9IGNvbnRleHQuZG9uZVxuICAgICAgICAgICAgPyBHZW5TdGF0ZUNvbXBsZXRlZFxuICAgICAgICAgICAgOiBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkO1xuXG4gICAgICAgICAgaWYgKHJlY29yZC5hcmcgPT09IENvbnRpbnVlU2VudGluZWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcbiAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXhjZXB0aW9uIGJ5IGxvb3BpbmcgYmFjayBhcm91bmQgdG8gdGhlXG4gICAgICAgICAgLy8gY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZykgY2FsbCBhYm92ZS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gQ2FsbCBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF0oY29udGV4dC5hcmcpIGFuZCBoYW5kbGUgdGhlXG4gIC8vIHJlc3VsdCwgZWl0aGVyIGJ5IHJldHVybmluZyBhIHsgdmFsdWUsIGRvbmUgfSByZXN1bHQgZnJvbSB0aGVcbiAgLy8gZGVsZWdhdGUgaXRlcmF0b3IsIG9yIGJ5IG1vZGlmeWluZyBjb250ZXh0Lm1ldGhvZCBhbmQgY29udGV4dC5hcmcsXG4gIC8vIHNldHRpbmcgY29udGV4dC5kZWxlZ2F0ZSB0byBudWxsLCBhbmQgcmV0dXJuaW5nIHRoZSBDb250aW51ZVNlbnRpbmVsLlxuICBmdW5jdGlvbiBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIG1ldGhvZCA9IGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXTtcbiAgICBpZiAobWV0aG9kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIEEgLnRocm93IG9yIC5yZXR1cm4gd2hlbiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIG5vIC50aHJvd1xuICAgICAgLy8gbWV0aG9kIGFsd2F5cyB0ZXJtaW5hdGVzIHRoZSB5aWVsZCogbG9vcC5cbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAvLyBOb3RlOiBbXCJyZXR1cm5cIl0gbXVzdCBiZSB1c2VkIGZvciBFUzMgcGFyc2luZyBjb21wYXRpYmlsaXR5LlxuICAgICAgICBpZiAoZGVsZWdhdGUuaXRlcmF0b3JbXCJyZXR1cm5cIl0pIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIGEgcmV0dXJuIG1ldGhvZCwgZ2l2ZSBpdCBhXG4gICAgICAgICAgLy8gY2hhbmNlIHRvIGNsZWFuIHVwLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcblxuICAgICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICAvLyBJZiBtYXliZUludm9rZURlbGVnYXRlKGNvbnRleHQpIGNoYW5nZWQgY29udGV4dC5tZXRob2QgZnJvbVxuICAgICAgICAgICAgLy8gXCJyZXR1cm5cIiB0byBcInRocm93XCIsIGxldCB0aGF0IG92ZXJyaWRlIHRoZSBUeXBlRXJyb3IgYmVsb3cuXG4gICAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgIFwiVGhlIGl0ZXJhdG9yIGRvZXMgbm90IHByb3ZpZGUgYSAndGhyb3cnIG1ldGhvZFwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKG1ldGhvZCwgZGVsZWdhdGUuaXRlcmF0b3IsIGNvbnRleHQuYXJnKTtcblxuICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIGluZm8gPSByZWNvcmQuYXJnO1xuXG4gICAgaWYgKCEgaW5mbykge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdFwiKTtcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgaWYgKGluZm8uZG9uZSkge1xuICAgICAgLy8gQXNzaWduIHRoZSByZXN1bHQgb2YgdGhlIGZpbmlzaGVkIGRlbGVnYXRlIHRvIHRoZSB0ZW1wb3JhcnlcbiAgICAgIC8vIHZhcmlhYmxlIHNwZWNpZmllZCBieSBkZWxlZ2F0ZS5yZXN1bHROYW1lIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0W2RlbGVnYXRlLnJlc3VsdE5hbWVdID0gaW5mby52YWx1ZTtcblxuICAgICAgLy8gUmVzdW1lIGV4ZWN1dGlvbiBhdCB0aGUgZGVzaXJlZCBsb2NhdGlvbiAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dC5uZXh0ID0gZGVsZWdhdGUubmV4dExvYztcblxuICAgICAgLy8gSWYgY29udGV4dC5tZXRob2Qgd2FzIFwidGhyb3dcIiBidXQgdGhlIGRlbGVnYXRlIGhhbmRsZWQgdGhlXG4gICAgICAvLyBleGNlcHRpb24sIGxldCB0aGUgb3V0ZXIgZ2VuZXJhdG9yIHByb2NlZWQgbm9ybWFsbHkuIElmXG4gICAgICAvLyBjb250ZXh0Lm1ldGhvZCB3YXMgXCJuZXh0XCIsIGZvcmdldCBjb250ZXh0LmFyZyBzaW5jZSBpdCBoYXMgYmVlblxuICAgICAgLy8gXCJjb25zdW1lZFwiIGJ5IHRoZSBkZWxlZ2F0ZSBpdGVyYXRvci4gSWYgY29udGV4dC5tZXRob2Qgd2FzXG4gICAgICAvLyBcInJldHVyblwiLCBhbGxvdyB0aGUgb3JpZ2luYWwgLnJldHVybiBjYWxsIHRvIGNvbnRpbnVlIGluIHRoZVxuICAgICAgLy8gb3V0ZXIgZ2VuZXJhdG9yLlxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kICE9PSBcInJldHVyblwiKSB7XG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlLXlpZWxkIHRoZSByZXN1bHQgcmV0dXJuZWQgYnkgdGhlIGRlbGVnYXRlIG1ldGhvZC5cbiAgICAgIHJldHVybiBpbmZvO1xuICAgIH1cblxuICAgIC8vIFRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBpcyBmaW5pc2hlZCwgc28gZm9yZ2V0IGl0IGFuZCBjb250aW51ZSB3aXRoXG4gICAgLy8gdGhlIG91dGVyIGdlbmVyYXRvci5cbiAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgfVxuXG4gIC8vIERlZmluZSBHZW5lcmF0b3IucHJvdG90eXBlLntuZXh0LHRocm93LHJldHVybn0gaW4gdGVybXMgb2YgdGhlXG4gIC8vIHVuaWZpZWQgLl9pbnZva2UgaGVscGVyIG1ldGhvZC5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEdwKTtcblxuICBkZWZpbmUoR3AsIHRvU3RyaW5nVGFnU3ltYm9sLCBcIkdlbmVyYXRvclwiKTtcblxuICAvLyBBIEdlbmVyYXRvciBzaG91bGQgYWx3YXlzIHJldHVybiBpdHNlbGYgYXMgdGhlIGl0ZXJhdG9yIG9iamVjdCB3aGVuIHRoZVxuICAvLyBAQGl0ZXJhdG9yIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBpdC4gU29tZSBicm93c2VycycgaW1wbGVtZW50YXRpb25zIG9mIHRoZVxuICAvLyBpdGVyYXRvciBwcm90b3R5cGUgY2hhaW4gaW5jb3JyZWN0bHkgaW1wbGVtZW50IHRoaXMsIGNhdXNpbmcgdGhlIEdlbmVyYXRvclxuICAvLyBvYmplY3QgdG8gbm90IGJlIHJldHVybmVkIGZyb20gdGhpcyBjYWxsLiBUaGlzIGVuc3VyZXMgdGhhdCBkb2Vzbid0IGhhcHBlbi5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9pc3N1ZXMvMjc0IGZvciBtb3JlIGRldGFpbHMuXG4gIEdwW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEdwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH07XG5cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9O1xuXG4gICAgaWYgKDEgaW4gbG9jcykge1xuICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdO1xuICAgIH1cblxuICAgIGlmICgyIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdO1xuICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdO1xuICAgIH1cblxuICAgIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XG4gICAgZGVsZXRlIHJlY29yZC5hcmc7XG4gICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2hcbiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tXG4gICAgLy8gbG9jYXRpb25zIHdoZXJlIHRoZXJlIGlzIG5vIGVuY2xvc2luZyB0cnkgc3RhdGVtZW50LlxuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogXCJyb290XCIgfV07XG4gICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpO1xuICAgIHRoaXMucmVzZXQodHJ1ZSk7XG4gIH1cblxuICBleHBvcnRzLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnJldmVyc2UoKTtcblxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXG4gICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxuICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXNcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSB7XG4gICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTtcbiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cbiAgICByZXR1cm4geyBuZXh0OiBkb25lUmVzdWx0IH07XG4gIH1cbiAgZXhwb3J0cy52YWx1ZXMgPSB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcblxuICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7XG4gICAgICB0aGlzLnByZXYgPSAwO1xuICAgICAgdGhpcy5uZXh0ID0gMDtcbiAgICAgIC8vIFJlc2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSk7XG5cbiAgICAgIGlmICghc2tpcFRlbXBSZXNldCkge1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcbiAgICAgICAgICAvLyBOb3Qgc3VyZSBhYm91dCB0aGUgb3B0aW1hbCBvcmRlciBvZiB0aGVzZSBjb25kaXRpb25zOlxuICAgICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSA9PT0gXCJ0XCIgJiZcbiAgICAgICAgICAgICAgaGFzT3duLmNhbGwodGhpcywgbmFtZSkgJiZcbiAgICAgICAgICAgICAgIWlzTmFOKCtuYW1lLnNsaWNlKDEpKSkge1xuICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuXG4gICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy50cnlFbnRyaWVzWzBdO1xuICAgICAgdmFyIHJvb3RSZWNvcmQgPSByb290RW50cnkuY29tcGxldGlvbjtcbiAgICAgIGlmIChyb290UmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByb290UmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuXG4gICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uKGV4Y2VwdGlvbikge1xuICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICB0aHJvdyBleGNlcHRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkge1xuICAgICAgICByZWNvcmQudHlwZSA9IFwidGhyb3dcIjtcbiAgICAgICAgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbjtcbiAgICAgICAgY29udGV4dC5uZXh0ID0gbG9jO1xuXG4gICAgICAgIGlmIChjYXVnaHQpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLFxuICAgICAgICAgIC8vIHRoZW4gbGV0IHRoYXQgY2F0Y2ggYmxvY2sgaGFuZGxlIHRoZSBleGNlcHRpb24gbm9ybWFsbHkuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhISBjYXVnaHQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSBcInJvb3RcIikge1xuICAgICAgICAgIC8vIEV4Y2VwdGlvbiB0aHJvd24gb3V0c2lkZSBvZiBhbnkgdHJ5IGJsb2NrIHRoYXQgY291bGQgaGFuZGxlXG4gICAgICAgICAgLy8gaXQsIHNvIHNldCB0aGUgY29tcGxldGlvbiB2YWx1ZSBvZiB0aGUgZW50aXJlIGZ1bmN0aW9uIHRvXG4gICAgICAgICAgLy8gdGhyb3cgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXR1cm4gaGFuZGxlKFwiZW5kXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKTtcbiAgICAgICAgICB2YXIgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIik7XG5cbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFicnVwdDogZnVuY3Rpb24odHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIikgJiZcbiAgICAgICAgICAgIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSAmJlxuICAgICAgICAgICh0eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICAgdHlwZSA9PT0gXCJjb250aW51ZVwiKSAmJlxuICAgICAgICAgIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmXG4gICAgICAgICAgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgIC8vIElnbm9yZSB0aGUgZmluYWxseSBlbnRyeSBpZiBjb250cm9sIGlzIG5vdCBqdW1waW5nIHRvIGFcbiAgICAgICAgLy8gbG9jYXRpb24gb3V0c2lkZSB0aGUgdHJ5L2NhdGNoIGJsb2NrLlxuICAgICAgICBmaW5hbGx5RW50cnkgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTtcbiAgICAgIHJlY29yZC50eXBlID0gdHlwZTtcbiAgICAgIHJlY29yZC5hcmcgPSBhcmc7XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkpIHtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7XG4gICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgIH0sXG5cbiAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVjb3JkLCBhZnRlckxvYykge1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICByZWNvcmQudHlwZSA9PT0gXCJjb250aW51ZVwiKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IHJlY29yZC5hcmc7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInJldHVyblwiKSB7XG4gICAgICAgIHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICB0aGlzLm5leHQgPSBcImVuZFwiO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xuICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfSxcblxuICAgIGZpbmlzaDogZnVuY3Rpb24oZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7XG4gICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbih0cnlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29udGV4dC5jYXRjaCBtZXRob2QgbXVzdCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgbG9jYXRpb25cbiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKTtcbiAgICB9LFxuXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0XG4gICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS5cbiAgICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcblxuICAvLyBSZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlXG4gIC8vIG9yIG5vdCwgcmV0dXJuIHRoZSBydW50aW1lIG9iamVjdCBzbyB0aGF0IHdlIGNhbiBkZWNsYXJlIHRoZSB2YXJpYWJsZVxuICAvLyByZWdlbmVyYXRvclJ1bnRpbWUgaW4gdGhlIG91dGVyIHNjb3BlLCB3aGljaCBhbGxvd3MgdGhpcyBtb2R1bGUgdG8gYmVcbiAgLy8gaW5qZWN0ZWQgZWFzaWx5IGJ5IGBiaW4vcmVnZW5lcmF0b3IgLS1pbmNsdWRlLXJ1bnRpbWUgc2NyaXB0LmpzYC5cbiAgcmV0dXJuIGV4cG9ydHM7XG5cbn0oXG4gIC8vIElmIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZSwgdXNlIG1vZHVsZS5leHBvcnRzXG4gIC8vIGFzIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgbmFtZXNwYWNlLiBPdGhlcndpc2UgY3JlYXRlIGEgbmV3IGVtcHR5XG4gIC8vIG9iamVjdC4gRWl0aGVyIHdheSwgdGhlIHJlc3VsdGluZyBvYmplY3Qgd2lsbCBiZSB1c2VkIHRvIGluaXRpYWxpemVcbiAgLy8gdGhlIHJlZ2VuZXJhdG9yUnVudGltZSB2YXJpYWJsZSBhdCB0aGUgdG9wIG9mIHRoaXMgZmlsZS5cbiAgdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiA/IG1vZHVsZS5leHBvcnRzIDoge31cbikpO1xuXG50cnkge1xuICByZWdlbmVyYXRvclJ1bnRpbWUgPSBydW50aW1lO1xufSBjYXRjaCAoYWNjaWRlbnRhbFN0cmljdE1vZGUpIHtcbiAgLy8gVGhpcyBtb2R1bGUgc2hvdWxkIG5vdCBiZSBydW5uaW5nIGluIHN0cmljdCBtb2RlLCBzbyB0aGUgYWJvdmVcbiAgLy8gYXNzaWdubWVudCBzaG91bGQgYWx3YXlzIHdvcmsgdW5sZXNzIHNvbWV0aGluZyBpcyBtaXNjb25maWd1cmVkLiBKdXN0XG4gIC8vIGluIGNhc2UgcnVudGltZS5qcyBhY2NpZGVudGFsbHkgcnVucyBpbiBzdHJpY3QgbW9kZSwgd2UgY2FuIGVzY2FwZVxuICAvLyBzdHJpY3QgbW9kZSB1c2luZyBhIGdsb2JhbCBGdW5jdGlvbiBjYWxsLiBUaGlzIGNvdWxkIGNvbmNlaXZhYmx5IGZhaWxcbiAgLy8gaWYgYSBDb250ZW50IFNlY3VyaXR5IFBvbGljeSBmb3JiaWRzIHVzaW5nIEZ1bmN0aW9uLCBidXQgaW4gdGhhdCBjYXNlXG4gIC8vIHRoZSBwcm9wZXIgc29sdXRpb24gaXMgdG8gZml4IHRoZSBhY2NpZGVudGFsIHN0cmljdCBtb2RlIHByb2JsZW0uIElmXG4gIC8vIHlvdSd2ZSBtaXNjb25maWd1cmVkIHlvdXIgYnVuZGxlciB0byBmb3JjZSBzdHJpY3QgbW9kZSBhbmQgYXBwbGllZCBhXG4gIC8vIENTUCB0byBmb3JiaWQgRnVuY3Rpb24sIGFuZCB5b3UncmUgbm90IHdpbGxpbmcgdG8gZml4IGVpdGhlciBvZiB0aG9zZVxuICAvLyBwcm9ibGVtcywgcGxlYXNlIGRldGFpbCB5b3VyIHVuaXF1ZSBwcmVkaWNhbWVudCBpbiBhIEdpdEh1YiBpc3N1ZS5cbiAgRnVuY3Rpb24oXCJyXCIsIFwicmVnZW5lcmF0b3JSdW50aW1lID0gclwiKShydW50aW1lKTtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgaXNPbGRJRSA9IGZ1bmN0aW9uIGlzT2xkSUUoKSB7XG4gIHZhciBtZW1vO1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUoKSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vID09PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gVGVzdCBmb3IgSUUgPD0gOSBhcyBwcm9wb3NlZCBieSBCcm93c2VyaGFja3NcbiAgICAgIC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcbiAgICAgIC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcbiAgICAgIC8vIHRvIG9wZXJhdGUgY29ycmVjdGx5IGludG8gbm9uLXN0YW5kYXJkIGVudmlyb25tZW50c1xuICAgICAgLy8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG4gICAgICBtZW1vID0gQm9vbGVhbih3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW87XG4gIH07XG59KCk7XG5cbnZhciBnZXRUYXJnZXQgPSBmdW5jdGlvbiBnZXRUYXJnZXQoKSB7XG4gIHZhciBtZW1vID0ge307XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSh0YXJnZXQpIHtcbiAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbiAgfTtcbn0oKTtcblxudmFyIHN0eWxlc0luRG9tID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5Eb20ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5Eb21baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVzSW5Eb20ucHVzaCh7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IGFkZFN0eWxlKG9iaiwgb3B0aW9ucyksXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIHZhciBhdHRyaWJ1dGVzID0gb3B0aW9ucy5hdHRyaWJ1dGVzIHx8IHt9O1xuXG4gIGlmICh0eXBlb2YgYXR0cmlidXRlcy5ub25jZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09ICd1bmRlZmluZWQnID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gICAgaWYgKG5vbmNlKSB7XG4gICAgICBhdHRyaWJ1dGVzLm5vbmNlID0gbm9uY2U7XG4gICAgfVxuICB9XG5cbiAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKGtleSwgYXR0cmlidXRlc1trZXldKTtcbiAgfSk7XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG9wdGlvbnMuaW5zZXJ0KHN0eWxlKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KG9wdGlvbnMuaW5zZXJ0IHx8ICdoZWFkJyk7XG5cbiAgICBpZiAoIXRhcmdldCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgICB9XG5cbiAgICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICB9XG5cbiAgcmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG52YXIgcmVwbGFjZVRleHQgPSBmdW5jdGlvbiByZXBsYWNlVGV4dCgpIHtcbiAgdmFyIHRleHRTdG9yZSA9IFtdO1xuICByZXR1cm4gZnVuY3Rpb24gcmVwbGFjZShpbmRleCwgcmVwbGFjZW1lbnQpIHtcbiAgICB0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnQ7XG4gICAgcmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG4gIH07XG59KCk7XG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcoc3R5bGUsIGluZGV4LCByZW1vdmUsIG9iaikge1xuICB2YXIgY3NzID0gcmVtb3ZlID8gJycgOiBvYmoubWVkaWEgPyBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpLmNvbmNhdChvYmouY3NzLCBcIn1cIikgOiBvYmouY3NzOyAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xuICAgIHZhciBjaGlsZE5vZGVzID0gc3R5bGUuY2hpbGROb2RlcztcblxuICAgIGlmIChjaGlsZE5vZGVzW2luZGV4XSkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH1cblxuICAgIGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuICAgICAgc3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcoc3R5bGUsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gb2JqLmNzcztcbiAgdmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAobWVkaWEpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoJ21lZGlhJywgbWVkaWEpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlLnJlbW92ZUF0dHJpYnV0ZSgnbWVkaWEnKTtcbiAgfVxuXG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZS5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG52YXIgc2luZ2xldG9uID0gbnVsbDtcbnZhciBzaW5nbGV0b25Db3VudGVyID0gMDtcblxuZnVuY3Rpb24gYWRkU3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBzdHlsZTtcbiAgdmFyIHVwZGF0ZTtcbiAgdmFyIHJlbW92ZTtcblxuICBpZiAob3B0aW9ucy5zaW5nbGV0b24pIHtcbiAgICB2YXIgc3R5bGVJbmRleCA9IHNpbmdsZXRvbkNvdW50ZXIrKztcbiAgICBzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIGZhbHNlKTtcbiAgICByZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlID0gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cbiAgICByZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuICAgIH07XG4gIH1cblxuICB1cGRhdGUob2JqKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB1cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlKCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OyAvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cbiAgLy8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxuXG4gIGlmICghb3B0aW9ucy5zaW5nbGV0b24gJiYgdHlwZW9mIG9wdGlvbnMuc2luZ2xldG9uICE9PSAnYm9vbGVhbicpIHtcbiAgICBvcHRpb25zLnNpbmdsZXRvbiA9IGlzT2xkSUUoKTtcbiAgfVxuXG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobmV3TGlzdCkgIT09ICdbb2JqZWN0IEFycmF5XScpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5Eb21bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRG9tW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRG9tLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0aWYoX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSkge1xuXHRcdHJldHVybiBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiBtb2R1bGVbJ2RlZmF1bHQnXSA6XG5cdFx0KCkgPT4gbW9kdWxlO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSIsInZhciBzY3JpcHRVcmw7XG5pZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5nLmltcG9ydFNjcmlwdHMpIHNjcmlwdFVybCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5sb2NhdGlvbiArIFwiXCI7XG52YXIgZG9jdW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcuZG9jdW1lbnQ7XG5pZiAoIXNjcmlwdFVybCAmJiBkb2N1bWVudCkge1xuXHRpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdClcblx0XHRzY3JpcHRVcmwgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyY1xuXHRpZiAoIXNjcmlwdFVybCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0aWYoc2NyaXB0cy5sZW5ndGgpIHNjcmlwdFVybCA9IHNjcmlwdHNbc2NyaXB0cy5sZW5ndGggLSAxXS5zcmNcblx0fVxufVxuLy8gV2hlbiBzdXBwb3J0aW5nIGJyb3dzZXJzIHdoZXJlIGFuIGF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgeW91IG11c3Qgc3BlY2lmeSBhbiBvdXRwdXQucHVibGljUGF0aCBtYW51YWxseSB2aWEgY29uZmlndXJhdGlvblxuLy8gb3IgcGFzcyBhbiBlbXB0eSBzdHJpbmcgKFwiXCIpIGFuZCBzZXQgdGhlIF9fd2VicGFja19wdWJsaWNfcGF0aF9fIHZhcmlhYmxlIGZyb20geW91ciBjb2RlIHRvIHVzZSB5b3VyIG93biBsb2dpYy5cbmlmICghc2NyaXB0VXJsKSB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlclwiKTtcbnNjcmlwdFVybCA9IHNjcmlwdFVybC5yZXBsYWNlKC8jLiokLywgXCJcIikucmVwbGFjZSgvXFw/LiokLywgXCJcIikucmVwbGFjZSgvXFwvW15cXC9dKyQvLCBcIi9cIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBzY3JpcHRVcmw7IiwiY29uc3QgVVJMX0dMT0JBTCA9ICdodHRwczovL2Rpc2Vhc2Uuc2gvdjMvY292aWQtMTkvYWxsJztcclxuY29uc3QgVVJMX0NPVU5UUklFUyA9ICdodHRwczovL2Rpc2Vhc2Uuc2gvdjMvY292aWQtMTkvY291bnRyaWVzJztcclxuY29uc3QgVVJMX0NPVU5UUlkgPSAnaHR0cHM6Ly9hcGkuY292aWQxOWFwaS5jb20vdG90YWwvY291bnRyeS8nO1xyXG5jb25zdCBSRUxBVElWRV9OVU1CRVIgPSAxMDAwMDA7XHJcbmNvbnN0IE1JTExJU0VDT05EU19PRl9PTkVfREFZID0gODY0MDAwMDA7XHJcblxyXG5jb25zdCBzdG9yZSA9IHtcclxuICBhc3luYyBfc2VuZFJlcXVlc3QodXJsKSB7XHJcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCk7XHJcbiAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xyXG4gIH0sXHJcblxyXG4gIF9pbml0TW9kZUZvckRhdGEoZGF0YSwgdHlwZSkge1xyXG4gICAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICAgIGNhc2UgJ0FMTC1USU1FJzpcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgYXJlYTogZGF0YS5jb3VudHJ5ID8gZGF0YS5jb3VudHJ5IDogJ0dsb2JhbCcsXHJcbiAgICAgICAgICBjYXNlczogZGF0YS5jYXNlcyxcclxuICAgICAgICAgIGRlYXRoczogZGF0YS5kZWF0aHMsXHJcbiAgICAgICAgICByZWNvdmVyZWQ6IGRhdGEucmVjb3ZlcmVkLFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICBjYXNlICdUT0RBWSc6XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIGFyZWE6IGRhdGEuY291bnRyeSA/IGRhdGEuY291bnRyeSA6ICdHbG9iYWwnLFxyXG4gICAgICAgICAgY2FzZXM6IGRhdGEudG9kYXlDYXNlcyxcclxuICAgICAgICAgIGRlYXRoczogZGF0YS50b2RheURlYXRocyxcclxuICAgICAgICAgIHJlY292ZXJlZDogZGF0YS50b2RheVJlY292ZXJlZCxcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgY2FzZSAnUkVMQVRJVkUtQUxMLVRJTUUnOlxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICBhcmVhOiBkYXRhLmNvdW50cnkgPyBkYXRhLmNvdW50cnkgOiAnR2xvYmFsJyxcclxuICAgICAgICAgIGNhc2VzOiBOdW1iZXIoKGRhdGEuY2FzZXNQZXJPbmVNaWxsaW9uIC8gMTApLnRvRml4ZWQoMykpLFxyXG4gICAgICAgICAgZGVhdGhzOiBOdW1iZXIoKGRhdGEuZGVhdGhzUGVyT25lTWlsbGlvbiAvIDEwKS50b0ZpeGVkKDMpKSxcclxuICAgICAgICAgIHJlY292ZXJlZDogTnVtYmVyKChkYXRhLnJlY292ZXJlZFBlck9uZU1pbGxpb24gLyAxMCkudG9GaXhlZCgzKSksXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgIGNhc2UgJ1JFTEFUSVZFLVRPREFZJzpcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgYXJlYTogZGF0YS5jb3VudHJ5ID8gZGF0YS5jb3VudHJ5IDogJ0dsb2JhbCcsXHJcbiAgICAgICAgICBjYXNlczogTnVtYmVyKChkYXRhLnRvZGF5Q2FzZXMgKiBSRUxBVElWRV9OVU1CRVIgLyBkYXRhLnBvcHVsYXRpb24pLnRvRml4ZWQoMykpLFxyXG4gICAgICAgICAgZGVhdGhzOiBOdW1iZXIoKGRhdGEudG9kYXlEZWF0aHMgKiBSRUxBVElWRV9OVU1CRVIgLyBkYXRhLnBvcHVsYXRpb24pLnRvRml4ZWQoMykpLFxyXG4gICAgICAgICAgcmVjb3ZlcmVkOiBOdW1iZXIoKGRhdGEudG9kYXlSZWNvdmVyZWQgKiBSRUxBVElWRV9OVU1CRVIgLyBkYXRhLnBvcHVsYXRpb24pLnRvRml4ZWQoMykpLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgfSxcclxuXHJcbiAgX2dldERhdGFGb3JHbG9iYWwodXJsLCB0eXBlKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fc2VuZFJlcXVlc3QodXJsKS50aGVuKChkYXRhKSA9PiB0aGlzLl9pbml0TW9kZUZvckRhdGEoZGF0YSwgdHlwZSkpO1xyXG4gIH0sXHJcblxyXG4gIF9nZXREYXRhRm9yQ291bnRyeShpZCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX3NlbmRSZXF1ZXN0KFVSTF9DT1VOVFJJRVMpLnRoZW4oKGRhdGEpID0+IGRhdGEuZmluZCgoY291bnRyeSkgPT4gY291bnRyeS5jb3VudHJ5SW5mby5pc28zID09PSBpZCkpO1xyXG4gIH0sXHJcblxyXG4gIC8vICDQmNCd0KLQldCg0KTQldCZ0KEg0J7QkdCq0JXQmtCi0JAgU1RPUkVcclxuICAvL1xyXG4gIC8vICDQktGB0LUg0LzQtdGC0L7QtNGLICjQutGA0L7QvNC1IC5nZXRDb3VudHJ5RmxhZ1VybCDQuCAuZ2V0Q291bnRyeUNvb3JkaW5hdGVzKSDQstC+0LfQstGA0LDRidCw0Y7RgiDQvtCx0YrQtdC60YIg0YEg0L/QvtC70Y/QvNC4OlxyXG4gIC8vICAqIGNhc2VzXHJcbiAgLy8gICogZGVhdGhzXHJcbiAgLy8gICogcmVjb3ZlcmVkXHJcbiAgLy9cclxuICAvLyAgaWQg0LTQu9GPINGB0YLRgNCw0L3RiyDRj9Cy0LvRj9C10YLRgdGPINGB0YLRgNC+0LrQsCDRgdC+INC30L3QsNGH0LXQvdC40LXQvCBpc28zINGN0YLQvtC5INGB0YLRgNCw0L3Ri1xyXG5cclxuICBnZXRHbG9iYWxEYXRhKCkgeyAvLyDQstC+0LfQstGA0LDRidCw0LXRgiDQv9GA0L7QvNC40YEg0YEg0LzQuNGA0L7QstC+0Lkg0YHRgtCw0YLQuNGB0YLQuNC60L7QuSDQt9CwINCy0YHQtSDQstGA0LXQvNGPXHJcbiAgICByZXR1cm4gdGhpcy5fZ2V0RGF0YUZvckdsb2JhbChVUkxfR0xPQkFMLCAnQUxMLVRJTUUnKTtcclxuICB9LFxyXG5cclxuICBnZXRHbG9iYWxUb2RheURhdGEoKSB7IC8vINCy0L7Qt9Cy0YDQsNGJ0LDQtdGCINC/0YDQvtC80LjRgSDRgSDQvNC40YDQvtCy0L7QuSDRgdGC0LDRgtC40YHRgtC40LrQvtC5INC30LAg0YHQtdCz0L7QtNC90Y9cclxuICAgIHJldHVybiB0aGlzLl9nZXREYXRhRm9yR2xvYmFsKFVSTF9HTE9CQUwsICdUT0RBWScpO1xyXG4gIH0sXHJcblxyXG4gIGdldEdsb2JhbFJlbGF0aXZlRGF0YSgpIHsgLy8g0LLQvtC30LLRgNCw0YnQsNC10YIg0L/RgNC+0LzQuNGBINGBINC80LjRgNC+0LLQvtC5INGB0YLQsNGC0LjRgdGC0LjQutC+0Lkg0LfQsCDQstGB0LUg0LLRgNC10LzRjyDQvdCwIDEwMCAwMDBcclxuICAgIHJldHVybiB0aGlzLl9nZXREYXRhRm9yR2xvYmFsKFVSTF9HTE9CQUwsICdSRUxBVElWRS1BTEwtVElNRScpO1xyXG4gIH0sXHJcblxyXG4gIGdldEdsb2JhbFRvZGF5UmVsYXRpdmVEYXRhKCkgeyAvLyDQstC+0LfQstGA0LDRidCw0LXRgiDQv9GA0L7QvNC40YEg0YEg0LzQuNGA0L7QstC+0Lkg0YHRgtCw0YLQuNGB0YLQuNC60L7QuSDQt9CwINGB0LXQs9C+0LTQvdGPINC90LAgMTAwIDAwMFxyXG4gICAgcmV0dXJuIHRoaXMuX2dldERhdGFGb3JHbG9iYWwoVVJMX0dMT0JBTCwgJ1JFTEFUSVZFLVRPREFZJyk7XHJcbiAgfSxcclxuXHJcbiAgZ2V0QWxsQ291bnRyaWVzRGF0YSgpIHtcclxuICAgIHJldHVybiB0aGlzLl9zZW5kUmVxdWVzdChVUkxfQ09VTlRSSUVTKS50aGVuKChkYXRhKSA9PiBkYXRhLm1hcCgoY291bnRyeSkgPT4gKFxyXG4gICAgICB7XHJcbiAgICAgICAgaWQ6IGNvdW50cnkuY291bnRyeUluZm8uaXNvMyxcclxuICAgICAgICBhcmVhOiBjb3VudHJ5LmNvdW50cnksXHJcbiAgICAgICAgY2FzZXM6IGNvdW50cnkuY2FzZXMsXHJcbiAgICAgICAgZGVhdGhzOiBjb3VudHJ5LmRlYXRocyxcclxuICAgICAgICByZWNvdmVyZWQ6IGNvdW50cnkucmVjb3ZlcmVkLFxyXG4gICAgICAgIGZsYWc6IGNvdW50cnkuY291bnRyeUluZm8uZmxhZyxcclxuICAgICAgfVxyXG4gICAgKSkpO1xyXG4gIH0sXHJcblxyXG4gIGFzeW5jIGdldENvdW50cnlEYXRhKGlkKSB7IC8vINCy0L7Qt9Cy0YDQsNGJ0LDQtdGCINC/0YDQvtC80LjRgSDRgdC+INGB0YLQsNGC0LjRgdGC0LjQutC+0Lkg0LrQvtC90LrRgNC10YLQvdC+0Lkg0YHRgtGA0LDQvdGLINC30LAg0LLRgdC1INCy0YDQtdC80Y9cclxuICAgIHJldHVybiB0aGlzLl9pbml0TW9kZUZvckRhdGEoYXdhaXQgdGhpcy5fZ2V0RGF0YUZvckNvdW50cnkoaWQpLCAnQUxMLVRJTUUnKTtcclxuICB9LFxyXG5cclxuICBhc3luYyBnZXRDb3VudHJ5VG9kYXlEYXRhKGlkKSB7IC8vINCy0L7Qt9Cy0YDQsNGJ0LDQtdGCINC/0YDQvtC80LjRgSDRgdC+INGB0YLQsNGC0LjRgdGC0LjQutC+0Lkg0LrQvtC90LrRgNC10YLQvdC+0Lkg0YHRgtGA0LDQvdGLINC30LAg0YHQtdCz0L7QtNC90Y9cclxuICAgIHJldHVybiB0aGlzLl9pbml0TW9kZUZvckRhdGEoYXdhaXQgdGhpcy5fZ2V0RGF0YUZvckNvdW50cnkoaWQpLCAnVE9EQVknKTtcclxuICB9LFxyXG5cclxuICBhc3luYyBnZXRDb3VudHJ5UmVsYXRpdmVEYXRhKGlkKSB7IC8vINCy0L7Qt9Cy0YDQsNGJ0LDQtdGCINC/0YDQvtC80LjRgSDRgdC+INGB0YLQsNGC0LjRgdGC0LjQutC+0Lkg0LrQvtC90LrRgNC10YLQvdC+0Lkg0YHRgtGA0LDQvdGLINC30LAg0LLRgdC1INCy0YDQtdC80Y8g0L3QsCAxMDAgMDAwXHJcbiAgICByZXR1cm4gdGhpcy5faW5pdE1vZGVGb3JEYXRhKGF3YWl0IHRoaXMuX2dldERhdGFGb3JDb3VudHJ5KGlkKSwgJ1JFTEFUSVZFLUFMTC1USU1FJyk7XHJcbiAgfSxcclxuXHJcbiAgYXN5bmMgZ2V0Q291bnRyeVRvZGF5UmVsYXRpdmVEYXRhKGlkKSB7IC8vINCy0L7Qt9Cy0YDQsNGJ0LDQtdGCINC/0YDQvtC80LjRgSDRgdC+INGB0YLQsNGC0LjRgdGC0LjQutC+0Lkg0LrQvtC90LrRgNC10YLQvdC+0Lkg0YHRgtGA0LDQvdGLINC30LAg0YHQtdCz0L7QtNC90Y8g0L3QsCAxMDAgMDAwXHJcbiAgICByZXR1cm4gdGhpcy5faW5pdE1vZGVGb3JEYXRhKGF3YWl0IHRoaXMuX2dldERhdGFGb3JDb3VudHJ5KGlkKSwgJ1JFTEFUSVZFLVRPREFZJyk7XHJcbiAgfSxcclxuXHJcbiAgZ2V0Q291bnRyeUZsYWdVcmwoaWQpIHsgLy8g0LLQvtC30LLRgNCw0YnQsNC10YIg0L/RgNC+0LzQuNGBINGBIHVybC3QsNC00YDQtdGB0L7QvCDRhNC70LDQs9CwINC60L7QvdC60YDQtdGC0L3QvtC5INGB0YLRgNCw0L3Ri1xyXG4gICAgcmV0dXJuIHRoaXMuX2dldERhdGFGb3JDb3VudHJ5KGlkKS50aGVuKChkYXRhKSA9PiBkYXRhLmNvdW50cnlJbmZvLmZsYWcpO1xyXG4gIH0sXHJcblxyXG4gIGdldENvdW50cnlDb29yZGluYXRlcyhpZCkgeyAvLyDQstC+0LfQstGA0LDRidCw0LXRgiDQv9GA0L7QvNC40YEg0YEg0LrQvtC+0YDQtNC40L3QsNGC0LDQvNC4INC60L7QvdC60YDQtdGC0L3QvtC5INGB0YLRgNCw0L3Ri1xyXG4gICAgcmV0dXJuIHRoaXMuX2dldERhdGFGb3JDb3VudHJ5KGlkKS50aGVuKChkYXRhKSA9PiAoe1xyXG4gICAgICBsYXQ6IGRhdGEuY291bnRyeUluZm8ubGF0LFxyXG4gICAgICBsb25nOiBkYXRhLmNvdW50cnlJbmZvLmxvbmcsXHJcbiAgICB9KSk7XHJcbiAgfSxcclxuXHJcbiAgYXN5bmMgZ2V0UG9wdWxhdGlvbihjb3VudHJ5KSB7XHJcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgdGhpcy5fc2VuZFJlcXVlc3QoVVJMX0NPVU5UUklFUyk7XHJcbiAgICByZXR1cm4gZGF0YS5maWx0ZXIoKGRhdGEpID0+IGRhdGEuY291bnRyeSA9PT0gY291bnRyeSkubWFwKChjb3VudHJ5KSA9PiBjb3VudHJ5LnBvcHVsYXRpb24pWzBdO1xyXG4gIH0sXHJcblxyXG4gIGFzeW5jIGdldFBvcHVsYXRpb25HbG9iYWwoKSB7XHJcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgdGhpcy5fc2VuZFJlcXVlc3QoVVJMX0dMT0JBTCk7XHJcbiAgICByZXR1cm4gZGF0YTtcclxuICB9LFxyXG5cclxuICBnZXRIaXN0b3JpY2FsR2xvYmFsRGF0YSgpIHsgLy8g0LLQvtC30LLRgNCw0YnQsNC10YIg0L/RgNC+0LzQuNGBINGBINCw0YDRhdC40LLQvdGL0LzQuCDQtNCw0L3QvdGL0LzQuCDQvdCw0YfQuNC90LDRjyDRgSAxNSDQsNC/0YDQtdC70Y8gMjAyMFxyXG4gICAgY29uc3Qgc3RhcnRQb2ludERhdGUgPSBuZXcgRGF0ZSgnMjAyMC0wNC0xNVQwMDowMDowMCcpO1xyXG4gICAgY29uc3QgdG9kYXlEYXRlID0gbmV3IERhdGUoKTtcclxuXHJcbiAgICBjb25zdCBkYXlzQ291bnQgPSBNYXRoLmZsb29yKCh0b2RheURhdGUuZ2V0VGltZSgpIC0gc3RhcnRQb2ludERhdGUuZ2V0VGltZSgpKSAvIE1JTExJU0VDT05EU19PRl9PTkVfREFZKTtcclxuICAgIGNvbnN0IHVybCA9IGBodHRwczovL2Rpc2Vhc2Uuc2gvdjMvY292aWQtMTkvaGlzdG9yaWNhbC9hbGw/bGFzdGRheXM9JHtkYXlzQ291bnR9YDtcclxuXHJcbiAgICByZXR1cm4gZmV0Y2godXJsKS50aGVuKChyZXNwb25zZSkgPT4gcmVzcG9uc2UuanNvbigpKTtcclxuICB9LFxyXG5cclxuICBhc3luYyBnZXRIaXN0b3JpY2FsR2xvYmFsUmF0ZXMoKSB7XHJcbiAgICBjb25zdCBnbG9iYWxEYXRhID0gYXdhaXQgdGhpcy5nZXRQb3B1bGF0aW9uR2xvYmFsKCk7XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuZ2V0SGlzdG9yaWNhbEdsb2JhbERhdGEoKS50aGVuKChkYXRhKSA9PiAoe1xyXG4gICAgICBkYXRlczogT2JqZWN0LmtleXMoZGF0YS5jYXNlcyksXHJcbiAgICAgIGNhc2VzOiBPYmplY3QudmFsdWVzKGRhdGEuY2FzZXMpLFxyXG4gICAgICBkZWF0aHM6IE9iamVjdC52YWx1ZXMoZGF0YS5kZWF0aHMpLFxyXG4gICAgICByZWNvdmVyZWQ6IE9iamVjdC52YWx1ZXMoZGF0YS5yZWNvdmVyZWQpLFxyXG4gICAgICBwb3B1bGF0aW9uOiBnbG9iYWxEYXRhLnBvcHVsYXRpb24sXHJcbiAgICB9KSk7XHJcbiAgfSxcclxuXHJcbiAgZ2V0QWxsUmF0ZXNGb3JFYWNoQ291bnRyeShjb3VudHJ5KSB7XHJcbiAgICBjb25zdCBzdGFydFBvaW50RGF0ZSA9IG5ldyBEYXRlKCcyMDIwLTA0LTE1VDAwOjAwOjAwJyk7XHJcbiAgICBjb25zdCB1cmwgPSBgJHtVUkxfQ09VTlRSWX0ke2NvdW50cnl9YDtcclxuICAgIHJldHVybiBmZXRjaCh1cmwpLnRoZW4oKHJlc3BvbnNlKSA9PiByZXNwb25zZS5qc29uKCkpLnRoZW4oKGRhdGEpID0+IGRhdGEuZmlsdGVyKChjb3VudHJ5KSA9PiBuZXcgRGF0ZShjb3VudHJ5LkRhdGUpID4gc3RhcnRQb2ludERhdGUpLnNvcnQoKSkuY2F0Y2goKGVycm9yKSA9PiBjb25zb2xlLmxvZyhlcnJvcikpO1xyXG4gIH0sXHJcblxyXG4gIGFzeW5jIGdldFJhdGVzRm9yRWFjaENvdW50cnkoY291bnRyeSkge1xyXG4gICAgY29uc3QgcG9wdWxhdGlvbiA9IGF3YWl0IHRoaXMuZ2V0UG9wdWxhdGlvbihjb3VudHJ5KTtcclxuXHJcbiAgICByZXR1cm4gdGhpcy5nZXRBbGxSYXRlc0ZvckVhY2hDb3VudHJ5KGNvdW50cnkpLnRoZW4oKGRhdGEpID0+ICh7XHJcbiAgICAgIGNhc2VzOiBkYXRhLm1hcCgoY291bnRyeSkgPT4gY291bnRyeS5Db25maXJtZWQpLFxyXG4gICAgICBkZWF0aHM6IGRhdGEubWFwKChjb3VudHJ5KSA9PiBjb3VudHJ5LkRlYXRocyksXHJcbiAgICAgIHJlY292ZXJlZDogZGF0YS5tYXAoKGNvdW50cnkpID0+IGNvdW50cnkuUmVjb3ZlcmVkKSxcclxuICAgICAgcG9wdWxhdGlvbixcclxuICAgIH0pKS5jYXRjaCgoZXJyb3IpID0+IGNvbnNvbGUubG9nKGVycm9yKSk7XHJcbiAgfSxcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHN0b3JlO1xyXG5cclxuIiwiY29uc3Qgc3RhdGUgPSB7XHJcbiAgaXNHbG9iYWw6IHRydWUsXHJcbiAgY3VycmVudENvdW50cnk6IG51bGwsXHJcbiAgY3VycmVudENvdW50cnlOYW1lOiBudWxsLFxyXG4gIGN1cnJlbnRMaXN0TW9kZTogJ2Nhc2VzJyxcclxuICBzZWFyY2hWYWx1ZTogJycsXHJcbiAgc2VhcmNoZWRMaXN0OiBudWxsLFxyXG4gIGN1cnJlbnRMaXN0OiBudWxsLFxyXG4gIGFsbENvdW50cmllc0xpc3Q6IG51bGwsXHJcblxyXG4gIGdldEN1cnJlbnRDb3VudHJ5TmFtZSgpIHtcclxuICAgIHJldHVybiB0aGlzLmlzR2xvYmFsID8gJ0dsb2JhbCcgOiB0aGlzLmN1cnJlbnRDb3VudHJ5TmFtZTtcclxuICB9LFxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgc3RhdGU7XHJcbiIsImltcG9ydCBzdG9yZSBmcm9tICcuL3N0b3JlJztcclxuaW1wb3J0IHN0YXRlIGZyb20gJy4vc3RhdGUnO1xyXG5cclxuY29uc3QgcmVnZW5lcmF0b3JSdW50aW1lID0gcmVxdWlyZSgncmVnZW5lcmF0b3ItcnVudGltZScpO1xyXG5cclxuY29uc3QgY3JlYXRlRGF0YUFycmF5Rm9yRWFjaERheSA9IChkYXRhKSA9PiB7XHJcbiAgY29uc3QgdGFyZ2V0QXJyYXkgPSBbXTtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoIC0gMTsgaSsrKSB7XHJcbiAgICB0YXJnZXRBcnJheVtpXSA9IGRhdGFbaSArIDFdIC0gZGF0YVtpXTtcclxuICB9XHJcbiAgcmV0dXJuIHRhcmdldEFycmF5O1xyXG59O1xyXG5cclxuY29uc3QgZ2V0RGF0YSA9IChkYXRhKSA9PiB7XHJcbiAgY29uc3QgTUFYID0gMTAwMDAwMDtcclxuICBjb25zdCBNSU4gPSAwO1xyXG4gIGNvbnN0IFJFTEFUSVZFID0gMTAwMDAwO1xyXG5cclxuICAvLyBDdW11bGF0aXZlXHJcbiAgY29uc3QgZGF0ZXMgPSBbXTtcclxuICBjb25zdCBjYXNlcyA9IFtdO1xyXG4gIGNvbnN0IGRlYXRocyA9IFtdO1xyXG4gIGNvbnN0IHJlY292ZXJlZCA9IFtdO1xyXG5cclxuICBpZiAoZGF0YSkge1xyXG4gICAgaWYgKGRhdGEuZGF0ZXMpIGRhdGEuZGF0ZXMuZm9yRWFjaCgoZWwpID0+IGRhdGVzLnB1c2goZWwpKTtcclxuICAgIGRhdGEuY2FzZXMuZm9yRWFjaCgoZWwpID0+IGNhc2VzLnB1c2goZWwpKTtcclxuICAgIGRhdGEuZGVhdGhzLmZvckVhY2goKGVsKSA9PiBkZWF0aHMucHVzaChlbCkpO1xyXG4gICAgZGF0YS5yZWNvdmVyZWQuZm9yRWFjaCgoZWwpID0+IHJlY292ZXJlZC5wdXNoKGVsKSk7XHJcbiAgfVxyXG5cclxuICAvLyBFYWNoIERheVxyXG4gIGNvbnN0IGNhc2VzRGF5ID0gY3JlYXRlRGF0YUFycmF5Rm9yRWFjaERheShjYXNlcykuZmlsdGVyKChlbCkgPT4gZWwgPCBNQVggJiYgZWwgPj0gTUlOKTtcclxuICBjb25zdCBkZWF0aHNEYXkgPSBjcmVhdGVEYXRhQXJyYXlGb3JFYWNoRGF5KGRlYXRocykuZmlsdGVyKChlbCkgPT4gZWwgPj0gTUlOKTtcclxuICBjb25zdCByZWNvdmVyZWREYXkgPSBjcmVhdGVEYXRhQXJyYXlGb3JFYWNoRGF5KHJlY292ZXJlZCkuZmlsdGVyKChlbCkgPT4gZWwgPj0gTUlOICYmIGVsIDwgTUFYKTtcclxuXHJcbiAgLy8gUmVsYXRpdmUgQ3VtdWxhdGl2ZVxyXG4gIGNvbnN0IGNhc2VzUmVsYXRpdmUgPSBjYXNlcy5tYXAoKGVsKSA9PiAoKGVsIC8gZGF0YS5wb3B1bGF0aW9uKSAqIFJFTEFUSVZFKS50b0ZpeGVkKDIpKTtcclxuICBjb25zdCBkZWF0aHNSZWxhdGl2ZSA9IGRlYXRocy5tYXAoKGVsKSA9PiAoKGVsIC8gZGF0YS5wb3B1bGF0aW9uKSAqIFJFTEFUSVZFKS50b0ZpeGVkKDIpKTtcclxuICBjb25zdCByZWNvdmVyZWRSZWxhdGl2ZSA9IHJlY292ZXJlZC5tYXAoKGVsKSA9PiAoKGVsIC8gZGF0YS5wb3B1bGF0aW9uKSAqIFJFTEFUSVZFKS50b0ZpeGVkKDIpKTtcclxuXHJcbiAgLy8gUmVsYXRpdmUgRWFjaCBEYXlcclxuICBjb25zdCBjYXNlc1JlbGF0aXZlRGF5ID0gY2FzZXNEYXkubWFwKChlbCkgPT4gKChlbCAvIGRhdGEucG9wdWxhdGlvbikgKiBSRUxBVElWRSkudG9GaXhlZCgyKSk7XHJcbiAgY29uc3QgZGVhdGhzUmVsYXRpdmVEYXkgPSBkZWF0aHNEYXkubWFwKChlbCkgPT4gKChlbCAvIGRhdGEucG9wdWxhdGlvbikgKiBSRUxBVElWRSkudG9GaXhlZCgyKSk7XHJcbiAgY29uc3QgcmVjb3ZlcmVkUmVsYXRpdmVEYXkgPSByZWNvdmVyZWREYXkubWFwKChlbCkgPT4gKChlbCAvIGRhdGEucG9wdWxhdGlvbikgKiBSRUxBVElWRSkudG9GaXhlZCgyKSk7XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBkYXRlcyxcclxuICAgIGNhc2VzLFxyXG4gICAgZGVhdGhzLFxyXG4gICAgcmVjb3ZlcmVkLFxyXG4gICAgY2FzZXNEYXksXHJcbiAgICBkZWF0aHNEYXksXHJcbiAgICByZWNvdmVyZWREYXksXHJcbiAgICBjYXNlc1JlbGF0aXZlLFxyXG4gICAgZGVhdGhzUmVsYXRpdmUsXHJcbiAgICByZWNvdmVyZWRSZWxhdGl2ZSxcclxuICAgIGNhc2VzUmVsYXRpdmVEYXksXHJcbiAgICBkZWF0aHNSZWxhdGl2ZURheSxcclxuICAgIHJlY292ZXJlZFJlbGF0aXZlRGF5LFxyXG4gIH07XHJcbn07XHJcblxyXG5hc3luYyBmdW5jdGlvbiBnZXRHbG9iYWxEYXRhKCkge1xyXG4gIGNvbnN0IGRhdGEgPSBhd2FpdCBzdG9yZS5nZXRIaXN0b3JpY2FsR2xvYmFsUmF0ZXMoKTtcclxuICByZXR1cm4gZ2V0RGF0YShkYXRhKTtcclxufVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gZ2V0RGF0YUZvckNvdW50cnkoY291bnRyeSkge1xyXG4gIGNvbnN0IGRhdGEgPSBhd2FpdCBzdG9yZS5nZXRSYXRlc0ZvckVhY2hDb3VudHJ5KGNvdW50cnkpO1xyXG4gIHJldHVybiBnZXREYXRhKGRhdGEpO1xyXG59XHJcblxyXG5jb25zdCBjaGFuZ2VDaGFydFRvQ2FzZXMgPSAoY29uZmlnLCBjaGFydCwgY291bnRyeSA9ICdHbG9iYWwnKSA9PiB7XHJcbiAgY29uZmlnLmJhY2tncm91bmRDb2xvciA9ICdyZ2JhKDIzNCwyOCwzNiwwLjYpJztcclxuICBjb25maWcubGFiZWwgPSBgQ2FzZXMgJHtjb3VudHJ5fWA7XHJcbiAgY2hhcnQuY29uZmlnLnR5cGUgPSAnYmFyJztcclxuICBjaGFydC51cGRhdGUoKTtcclxufTtcclxuXHJcbmNvbnN0IGNoYW5nZUNoYXJ0VG9EZWF0aHMgPSAoY29uZmlnLCBjaGFydCwgY291bnRyeSA9ICdHbG9iYWwnKSA9PiB7XHJcbiAgY29uZmlnLmJhY2tncm91bmRDb2xvciA9ICd3aGl0ZSc7XHJcbiAgY29uZmlnLmxhYmVsID0gYERlYXRocyAke2NvdW50cnl9YDtcclxuICBjaGFydC5jb25maWcudHlwZSA9ICdiYXInO1xyXG4gIGNoYXJ0LnVwZGF0ZSgpO1xyXG59O1xyXG5cclxuY29uc3QgY2hhbmdlQ2hhcnRUb1JlY292ZXJlZCA9IChjb25maWcsIGNoYXJ0LCBjb3VudHJ5ID0gJ0dsb2JhbCcpID0+IHtcclxuICBjb25maWcuYmFja2dyb3VuZENvbG9yID0gJ2dyZWVuJztcclxuICBjb25maWcubGFiZWwgPSBgUmVjb3ZlcmVkICR7Y291bnRyeX1gO1xyXG4gIGNoYXJ0LmNvbmZpZy50eXBlID0gJ2Jhcic7XHJcbiAgY2hhcnQudXBkYXRlKCk7XHJcbn07XHJcblxyXG5jb25zdCB1cGRhdGVEYXRhRm9yQ2hhcnQgPSAoY29uZmlnLCBjaGFydCwgZGF0YSwgY291bnRyeSA9ICdHbG9iYWwnKSA9PiB7XHJcbiAgLy8gQWJzb2x1dGVcclxuICBpZiAodGltZUNob2ljZTEuY2hlY2tlZCAmJiBhbGxDYXNlcy5jaGVja2VkICYmIHJhbmdlQ2hvaWNlMS5jaGVja2VkKSB7XHJcbiAgICBjb25maWcuZGF0YSA9IGRhdGEuY2FzZXM7XHJcbiAgICBjaGFuZ2VDaGFydFRvQ2FzZXMoY29uZmlnLCBjaGFydCwgY291bnRyeSk7XHJcbiAgfVxyXG4gIGlmICh0aW1lQ2hvaWNlMS5jaGVja2VkICYmIGFsbERlYXRocy5jaGVja2VkICYmIHJhbmdlQ2hvaWNlMS5jaGVja2VkKSB7XHJcbiAgICBjb25maWcuZGF0YSA9IGRhdGEuZGVhdGhzO1xyXG4gICAgY2hhbmdlQ2hhcnRUb0RlYXRocyhjb25maWcsIGNoYXJ0LCBjb3VudHJ5KTtcclxuICB9XHJcbiAgaWYgKHRpbWVDaG9pY2UxLmNoZWNrZWQgJiYgYWxsUmVjb3ZlcmVkLmNoZWNrZWQgJiYgcmFuZ2VDaG9pY2UxLmNoZWNrZWQpIHtcclxuICAgIGNvbmZpZy5kYXRhID0gZGF0YS5yZWNvdmVyZWQ7XHJcbiAgICBjaGFuZ2VDaGFydFRvUmVjb3ZlcmVkKGNvbmZpZywgY2hhcnQsIGNvdW50cnkpO1xyXG4gIH1cclxuICBpZiAodGltZUNob2ljZTIuY2hlY2tlZCAmJiBhbGxDYXNlcy5jaGVja2VkICYmIHJhbmdlQ2hvaWNlMS5jaGVja2VkKSB7XHJcbiAgICBjb25maWcuZGF0YSA9IGRhdGEuY2FzZXNEYXk7XHJcbiAgICBjaGFuZ2VDaGFydFRvQ2FzZXMoY29uZmlnLCBjaGFydCwgY291bnRyeSk7XHJcbiAgfVxyXG4gIGlmICh0aW1lQ2hvaWNlMi5jaGVja2VkICYmIGFsbERlYXRocy5jaGVja2VkICYmIHJhbmdlQ2hvaWNlMS5jaGVja2VkKSB7XHJcbiAgICBjb25maWcuZGF0YSA9IGRhdGEuZGVhdGhzRGF5O1xyXG4gICAgY2hhbmdlQ2hhcnRUb0RlYXRocyhjb25maWcsIGNoYXJ0LCBjb3VudHJ5KTtcclxuICB9XHJcbiAgaWYgKHRpbWVDaG9pY2UyLmNoZWNrZWQgJiYgYWxsUmVjb3ZlcmVkLmNoZWNrZWQgJiYgcmFuZ2VDaG9pY2UxLmNoZWNrZWQpIHtcclxuICAgIGNvbmZpZy5kYXRhID0gZGF0YS5yZWNvdmVyZWREYXk7XHJcbiAgICBjaGFuZ2VDaGFydFRvUmVjb3ZlcmVkKGNvbmZpZywgY2hhcnQsIGNvdW50cnkpO1xyXG4gIH1cclxuXHJcbiAgLy8gUmVsYXRpdmVcclxuICBpZiAodGltZUNob2ljZTEuY2hlY2tlZCAmJiBhbGxDYXNlcy5jaGVja2VkICYmIHJhbmdlQ2hvaWNlMi5jaGVja2VkKSB7XHJcbiAgICBjb25maWcuZGF0YSA9IGRhdGEuY2FzZXNSZWxhdGl2ZTtcclxuICAgIGNoYW5nZUNoYXJ0VG9DYXNlcyhjb25maWcsIGNoYXJ0LCBjb3VudHJ5KTtcclxuICB9XHJcbiAgaWYgKHRpbWVDaG9pY2UxLmNoZWNrZWQgJiYgYWxsRGVhdGhzLmNoZWNrZWQgJiYgcmFuZ2VDaG9pY2UyLmNoZWNrZWQpIHtcclxuICAgIGNvbmZpZy5kYXRhID0gZGF0YS5kZWF0aHNSZWxhdGl2ZTtcclxuICAgIGNoYW5nZUNoYXJ0VG9EZWF0aHMoY29uZmlnLCBjaGFydCwgY291bnRyeSk7XHJcbiAgfVxyXG4gIGlmICh0aW1lQ2hvaWNlMS5jaGVja2VkICYmIGFsbFJlY292ZXJlZC5jaGVja2VkICYmIHJhbmdlQ2hvaWNlMi5jaGVja2VkKSB7XHJcbiAgICBjb25maWcuZGF0YSA9IGRhdGEucmVjb3ZlcmVkUmVsYXRpdmU7XHJcbiAgICBjaGFuZ2VDaGFydFRvUmVjb3ZlcmVkKGNvbmZpZywgY2hhcnQsIGNvdW50cnkpO1xyXG4gIH1cclxuICBpZiAodGltZUNob2ljZTIuY2hlY2tlZCAmJiBhbGxDYXNlcy5jaGVja2VkICYmIHJhbmdlQ2hvaWNlMi5jaGVja2VkKSB7XHJcbiAgICBjb25maWcuZGF0YSA9IGRhdGEuY2FzZXNSZWxhdGl2ZURheTtcclxuICAgIGNoYW5nZUNoYXJ0VG9DYXNlcyhjb25maWcsIGNoYXJ0LCBjb3VudHJ5KTtcclxuICB9XHJcbiAgaWYgKHRpbWVDaG9pY2UyLmNoZWNrZWQgJiYgYWxsRGVhdGhzLmNoZWNrZWQgJiYgcmFuZ2VDaG9pY2UyLmNoZWNrZWQpIHtcclxuICAgIGNvbmZpZy5kYXRhID0gZGF0YS5kZWF0aHNSZWxhdGl2ZURheTtcclxuICAgIGNoYW5nZUNoYXJ0VG9EZWF0aHMoY29uZmlnLCBjaGFydCwgY291bnRyeSk7XHJcbiAgfVxyXG4gIGlmICh0aW1lQ2hvaWNlMi5jaGVja2VkICYmIGFsbFJlY292ZXJlZC5jaGVja2VkICYmIHJhbmdlQ2hvaWNlMi5jaGVja2VkKSB7XHJcbiAgICBjb25maWcuZGF0YSA9IGRhdGEucmVjb3ZlcmVkUmVsYXRpdmVEYXk7XHJcbiAgICBjaGFuZ2VDaGFydFRvUmVjb3ZlcmVkKGNvbmZpZywgY2hhcnQsIGNvdW50cnkpO1xyXG4gIH1cclxufTtcclxuXHJcbmFzeW5jIGZ1bmN0aW9uIGNoYW5nZUNoYXJ0VG9HbG9iYWxEYXRhKGNvbmZpZywgY2hhcnQpIHtcclxuICBjb25zdCBnbG9iYWxEYXRhID0gYXdhaXQgZ2V0R2xvYmFsRGF0YSgpO1xyXG4gIHVwZGF0ZURhdGFGb3JDaGFydChjb25maWcsIGNoYXJ0LCBnbG9iYWxEYXRhKTtcclxufVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gY2hhbmdlQ2hhcnRUb0VhY2hDb3VudHJ5KGNvdW50cnksIGNvbmZpZywgY2hhcnQpIHtcclxuICBjb25zdCBkYXRhID0gYXdhaXQgZ2V0RGF0YUZvckNvdW50cnkoY291bnRyeSk7XHJcbiAgdXBkYXRlRGF0YUZvckNoYXJ0KGNvbmZpZywgY2hhcnQsIGRhdGEsIGNvdW50cnkpO1xyXG59XHJcblxyXG5hc3luYyBmdW5jdGlvbiBjcmVhdGVDaGFydCgpIHtcclxuICBjb25zdCBjaGFydFdyYXBwZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2hhcnQnKS5nZXRDb250ZXh0KCcyZCcpO1xyXG4gIGNvbnN0IGdsb2JhbERhdGEgPSBhd2FpdCBnZXRHbG9iYWxEYXRhKCk7XHJcbiAgY29uc3QgY2hhcnRDb25maWcgPSB7XHJcbiAgICB0eXBlOiAnYmFyJyxcclxuICAgIGRhdGE6IHtcclxuICAgICAgbGFiZWxzOiBnbG9iYWxEYXRhLmRhdGVzLFxyXG4gICAgICBkYXRhc2V0czogW3tcclxuICAgICAgICBsYWJlbDogJ0Nhc2VzJyxcclxuICAgICAgICBkYXRhOiBnbG9iYWxEYXRhLmNhc2VzLFxyXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3JnYmEoMjM0LDI4LDM2LDAuNiknLFxyXG4gICAgICAgIGJvcmRlcldpZHRoOiAxLFxyXG4gICAgICB9XSxcclxuICAgIH0sXHJcbiAgICBvcHRpb25zOiB7XHJcbiAgICAgIHNjYWxlczoge1xyXG4gICAgICAgIHlBeGVzOiBbe1xyXG4gICAgICAgICAgYmVnaW5BdFplcm86IHRydWUsXHJcbiAgICAgICAgICBncmlkTGluZXM6IHtcclxuICAgICAgICAgICAgY29sb3I6ICdyZ2JhKDIxOCwgMjE4LCAyMTgsIDAuMjEpJyxcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB0aWNrczoge1xyXG4gICAgICAgICAgICBjYWxsYmFjayh2YWx1ZSwgaW5kZXgpIHtcclxuICAgICAgICAgICAgICBpZiAoaW5kZXggJSAxID09PSAwKSByZXR1cm4gYCR7TWF0aC50cnVuYyh2YWx1ZSAvIDEwMDApfWtgO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBmb250Q29sb3I6ICdyZ2JhKDIxOCwgMjE4LCAyMTgsIDAuODApJyxcclxuICAgICAgICAgICAgZm9udEZhbWlseTogJ0JlYmFzIE5ldWUnLFxyXG4gICAgICAgICAgICBmb250U2l6ZTogMTIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgIH1dLFxyXG4gICAgICAgIHhBeGVzOiBbe1xyXG4gICAgICAgICAgdHlwZTogJ3RpbWUnLFxyXG4gICAgICAgICAgcG9zaXRpb246ICdib3R0b20nLFxyXG4gICAgICAgICAgdGltZToge1xyXG4gICAgICAgICAgICB0b29sdGlwRm9ybWF0OiAnREQvTU0vWVknLFxyXG4gICAgICAgICAgICB1bml0OiAnbW9udGgnLFxyXG4gICAgICAgICAgICBzdGVwU2l6ZTogMixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBncmlkTGluZXM6IHtcclxuICAgICAgICAgICAgY29sb3I6ICdyZ2JhKDIxOCwgMjE4LCAyMTgsIDAuMjEpJyxcclxuICAgICAgICAgICAgYm9yZGVyRGFzaDogWzEwXSxcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB0aWNrczoge1xyXG4gICAgICAgICAgICBmb250Q29sb3I6ICdyZ2JhKDIxOCwgMjE4LCAyMTgsIDAuODApJyxcclxuICAgICAgICAgICAgZm9udEZhbWlseTogJ0JlYmFzIE5ldWUnLFxyXG4gICAgICAgICAgICBmb250U2l6ZTogMTIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgIH1dLFxyXG4gICAgICB9LFxyXG4gICAgICBsZWdlbmQ6IHtcclxuICAgICAgICBkaXNwbGF5OiBmYWxzZSxcclxuICAgICAgICBsYWJlbHM6IHtcclxuICAgICAgICAgIGZvbnRDb2xvcjogJ3doaXRlJyxcclxuICAgICAgICAgIGZvbnRTaXplOiAxOCxcclxuICAgICAgICB9LFxyXG4gICAgICB9LFxyXG5cclxuICAgIH0sXHJcbiAgfTtcclxuICBjb25zdCBjaGFydCA9IG5ldyBDaGFydChjaGFydFdyYXBwZXIsIGNoYXJ0Q29uZmlnKTtcclxuICBjb25zdCBjb25maWcgPSBjaGFydC5jb25maWcuZGF0YS5kYXRhc2V0c1swXTtcclxuICBjb25zdCBpbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zZWFyY2gtaW5wdXQnKTtcclxuXHJcbiAgbGV0IGNvdW50cnk7IFxyXG5cclxuICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsICgpID0+IHtcclxuICAgIGlmICghaW5wdXQudmFsdWUpIGNoYW5nZUNoYXJ0VG9HbG9iYWxEYXRhKGNvbmZpZywgY2hhcnQpO1xyXG4gIH0pO1xyXG5cclxuICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgY291bnRyeSA9IHN0YXRlLmdldEN1cnJlbnRDb3VudHJ5TmFtZSgpO1xyXG4gICAgaWYgKHN0YXRlLmlzR2xvYmFsICYmICFjb3VudHJ5IHx8IGNvdW50cnkgPT09ICdHbG9iYWwnKSB7XHJcbiAgICAgIGNoYW5nZUNoYXJ0VG9HbG9iYWxEYXRhKGNvbmZpZywgY2hhcnQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY2hhbmdlQ2hhcnRUb0VhY2hDb3VudHJ5KGAke2NvdW50cnl9YCwgY29uZmlnLCBjaGFydCk7XHJcbiAgICB9XHJcbiAgfSk7XHJcbiAgcmV0dXJuIGNoYXJ0O1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVDaGFydDtcclxuIiwiaW1wb3J0IGFwaSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgICAgICAgaW1wb3J0IGNvbnRlbnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi90YWJsZS5jc3NcIjtcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgZGVmYXVsdCBjb250ZW50LmxvY2FscyB8fCB7fTsiLCJjb25zdCBtb2RpZnlOdW1iZXJWYWx1ZSA9IHJlcXVpcmUoJy4uL2NvbW1vbi1mdW5jdGlvbnMvbW9kaWZ5TnVtYmVyVmFsdWUnKTtcblxuZnVuY3Rpb24gcmVuZGVyU3RhdGlzdGljcyhzdGF0aXN0aWNzKSB7XG4gIHRhYmxlQXJlYS50ZXh0Q29udGVudCA9IHN0YXRpc3RpY3MuYXJlYTtcbiAgdGFibGVDYXNlcy50ZXh0Q29udGVudCA9IG1vZGlmeU51bWJlclZhbHVlKHN0YXRpc3RpY3MuY2FzZXMpO1xuICB0YWJsZURlYXRocy50ZXh0Q29udGVudCA9IG1vZGlmeU51bWJlclZhbHVlKHN0YXRpc3RpY3MuZGVhdGhzKTtcbiAgdGFibGVSZWNvdmVyZWQudGV4dENvbnRlbnQgPSBtb2RpZnlOdW1iZXJWYWx1ZShzdGF0aXN0aWNzLnJlY292ZXJlZCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHJlbmRlclN0YXRpc3RpY3M7XG4iLCJpbXBvcnQgcmVuZGVyVGFibGUgZnJvbSAnLi9yZW5kZXItdGFibGUnO1xuaW1wb3J0IHJlbmRlck1vZGVzQ29udGFpbmVyIGZyb20gJy4vcmVuZGVyLW1vZGVzLWNvbnRhaW5lcic7XG5pbXBvcnQgcmVuZGVyU3RhdGlzdGljcyBmcm9tICcuL3JlbmRlci1zdGF0aXN0aWNzJztcbmltcG9ydCBzdG9yZSBmcm9tICcuLi9zdG9yZSc7XG5cbmZ1bmN0aW9uIHJlbmRlclRhYmxlQmxvY2soKSB7XG4gIGNvbnN0IHRhYmxlQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3RhYmxlLWNvbnRhaW5lcicpO1xuICB0YWJsZUNvbnRhaW5lci5hcHBlbmQocmVuZGVyVGFibGUoKSwgcmVuZGVyTW9kZXNDb250YWluZXIoKSk7XG5cbiAgc3RvcmUuZ2V0R2xvYmFsRGF0YSgpLnRoZW4oKGRhdGEpID0+IHtcbiAgICByZW5kZXJTdGF0aXN0aWNzKGRhdGEpO1xuICB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgcmVuZGVyVGFibGVCbG9jaztcbiIsImltcG9ydCBzdG9yZSBmcm9tICcuLi9zdG9yZSc7XG5pbXBvcnQgc3RhdGUgZnJvbSAnLi4vc3RhdGUnO1xuaW1wb3J0IHJlbmRlclN0YXRpc3RpY3MgZnJvbSAnLi9yZW5kZXItc3RhdGlzdGljcyc7XG5pbXBvcnQgJy4uLy4uL3Nhc3MvdGFibGUvdGFibGUuY3NzJztcblxuZnVuY3Rpb24gcmVuZGVyTW9kZXNDb250YWluZXIoKSB7XG4gIGNvbnN0IG1vZGVzV3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBtb2Rlc1dyYXBwZXIuY2xhc3NMaXN0LmFkZCgnbW9kZXMtd3JhcHBlcicpO1xuXG4gIG1vZGVzV3JhcHBlci5pbm5lckhUTUwgPSAnPGRpdiBjbGFzcz1cIm1vZGVzLXdyYXBwZXJfX2NlbGxcIj4nXG4gICAgICAgICsgJyAgIDxwPlRpbWUgcGVyaW9kOjwvcD4nXG4gICAgICAgICsgJyAgIDxkaXY+J1xuICAgICAgICArICcgICAgICAgPGlucHV0IHR5cGU9XCJyYWRpb1wiIGlkPVwidGltZUNob2ljZTFcIiBuYW1lPVwidGltZVwiIHZhbHVlPVwiYWxsVGltZVwiIGNoZWNrZWQ+J1xuICAgICAgICArICcgICAgICAgPGxhYmVsIGZvcj1cInRpbWVDaG9pY2UxXCI+QWxsIHRpbWU8L2xhYmVsPidcbiAgICAgICAgKyAnJ1xuICAgICAgICArICcgICAgICAgPGlucHV0IHN0eWxlPVwibWFyZ2luLWxlZnQ6IDEwcHg7XCIgdHlwZT1cInJhZGlvXCIgaWQ9XCJ0aW1lQ2hvaWNlMlwiIG5hbWU9XCJ0aW1lXCIgdmFsdWU9XCJ0b2RheVwiPidcbiAgICAgICAgKyAnICAgICAgIDxsYWJlbCBmb3I9XCJ0aW1lQ2hvaWNlMlwiPlRvZGF5PC9sYWJlbD4nXG4gICAgICAgICsgJyAgIDwvZGl2PidcbiAgICAgICAgKyAnPC9kaXY+J1xuICAgICAgICArICcnXG4gICAgICAgICsgJzxkaXYgY2xhc3M9XCJtb2Rlcy13cmFwcGVyX19jZWxsXCI+J1xuICAgICAgICArICcgICA8cD5SYW5nZSBvZiB2YWx1ZXM6PC9wPidcbiAgICAgICAgKyAnICAgPGRpdj4nXG4gICAgICAgICsgJyAgICAgICA8aW5wdXQgdHlwZT1cInJhZGlvXCIgaWQ9XCJyYW5nZUNob2ljZTFcIiBuYW1lPVwicmFuZ2VcIiB2YWx1ZT1cImFic29sdXRlXCIgY2hlY2tlZD4nXG4gICAgICAgICsgJyAgICAgICA8bGFiZWwgZm9yPVwicmFuZ2VDaG9pY2UxXCI+QWJzb2x1dGU8L2xhYmVsPidcbiAgICAgICAgKyAnJ1xuICAgICAgICArICcgICAgICAgPGlucHV0IHN0eWxlPVwibWFyZ2luLWxlZnQ6IDEwcHg7XCIgdHlwZT1cInJhZGlvXCIgaWQ9XCJyYW5nZUNob2ljZTJcIiBuYW1lPVwicmFuZ2VcIiB2YWx1ZT1cInJlbGF0aXZlXCI+J1xuICAgICAgICArICcgICAgICAgPGxhYmVsIGZvcj1cInJhbmdlQ2hvaWNlMlwiPlJlbGF0aXZlPC9sYWJlbD4nXG4gICAgICAgICsgJyAgIDwvZGl2PidcbiAgICAgICAgKyAnPC9kaXY+JztcblxuICBtb2Rlc1dyYXBwZXIucXVlcnlTZWxlY3RvckFsbCgnaW5wdXQnKS5mb3JFYWNoKChpbnB1dCkgPT4ge1xuICAgIGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsICgpID0+IHtcbiAgICAgIHN3aXRjaCAoc3RhdGUuaXNHbG9iYWwpIHtcbiAgICAgICAgY2FzZSB0cnVlOlxuICAgICAgICAgIGlmICh0aW1lQ2hvaWNlMS5jaGVja2VkICYmIHJhbmdlQ2hvaWNlMS5jaGVja2VkKSB7XG4gICAgICAgICAgICBzdG9yZS5nZXRHbG9iYWxEYXRhKCkudGhlbigoZGF0YSkgPT4gcmVuZGVyU3RhdGlzdGljcyhkYXRhKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0aW1lQ2hvaWNlMS5jaGVja2VkICYmIHJhbmdlQ2hvaWNlMi5jaGVja2VkKSB7XG4gICAgICAgICAgICBzdG9yZS5nZXRHbG9iYWxSZWxhdGl2ZURhdGEoKS50aGVuKChkYXRhKSA9PiByZW5kZXJTdGF0aXN0aWNzKGRhdGEpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHRpbWVDaG9pY2UyLmNoZWNrZWQgJiYgcmFuZ2VDaG9pY2UxLmNoZWNrZWQpIHtcbiAgICAgICAgICAgIHN0b3JlLmdldEdsb2JhbFRvZGF5RGF0YSgpLnRoZW4oKGRhdGEpID0+IHJlbmRlclN0YXRpc3RpY3MoZGF0YSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodGltZUNob2ljZTIuY2hlY2tlZCAmJiByYW5nZUNob2ljZTIuY2hlY2tlZCkge1xuICAgICAgICAgICAgc3RvcmUuZ2V0R2xvYmFsVG9kYXlSZWxhdGl2ZURhdGEoKS50aGVuKChkYXRhKSA9PiByZW5kZXJTdGF0aXN0aWNzKGRhdGEpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgZmFsc2U6XG4gICAgICAgICAgaWYgKHRpbWVDaG9pY2UxLmNoZWNrZWQgJiYgcmFuZ2VDaG9pY2UxLmNoZWNrZWQpIHtcbiAgICAgICAgICAgIHN0b3JlLmdldENvdW50cnlEYXRhKHN0YXRlLmN1cnJlbnRDb3VudHJ5KS50aGVuKChkYXRhKSA9PiByZW5kZXJTdGF0aXN0aWNzKGRhdGEpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHRpbWVDaG9pY2UxLmNoZWNrZWQgJiYgcmFuZ2VDaG9pY2UyLmNoZWNrZWQpIHtcbiAgICAgICAgICAgIHN0b3JlLmdldENvdW50cnlSZWxhdGl2ZURhdGEoc3RhdGUuY3VycmVudENvdW50cnkpLnRoZW4oKGRhdGEpID0+IHJlbmRlclN0YXRpc3RpY3MoZGF0YSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodGltZUNob2ljZTIuY2hlY2tlZCAmJiByYW5nZUNob2ljZTEuY2hlY2tlZCkge1xuICAgICAgICAgICAgc3RvcmUuZ2V0Q291bnRyeVRvZGF5RGF0YShzdGF0ZS5jdXJyZW50Q291bnRyeSkudGhlbigoZGF0YSkgPT4gcmVuZGVyU3RhdGlzdGljcyhkYXRhKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0aW1lQ2hvaWNlMi5jaGVja2VkICYmIHJhbmdlQ2hvaWNlMi5jaGVja2VkKSB7XG4gICAgICAgICAgICBzdG9yZS5nZXRDb3VudHJ5VG9kYXlSZWxhdGl2ZURhdGEoc3RhdGUuY3VycmVudENvdW50cnkpLnRoZW4oKGRhdGEpID0+IHJlbmRlclN0YXRpc3RpY3MoZGF0YSkpO1xuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG5cbiAgcmV0dXJuIG1vZGVzV3JhcHBlcjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgcmVuZGVyTW9kZXNDb250YWluZXI7XG4iLCJpbXBvcnQgJy4uLy4uL3Nhc3MvdGFibGUvdGFibGUuY3NzJztcblxuZnVuY3Rpb24gcmVuZGVyVGFibGUoKSB7XG4gIGNvbnN0IHRhYmxlV3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICB0YWJsZVdyYXBwZXIuY2xhc3NMaXN0LmFkZCgndGFibGUtdmFsdWVzLXdyYXBwZXInKTtcblxuICB0YWJsZVdyYXBwZXIuaW5uZXJIVE1MID0gJzxkaXYgY2xhc3M9XCJ0YWJsZS1jb250ZW50XCI+J1xuICAgICAgICArICcgICA8ZGl2IGNsYXNzPVwidGFibGUtY29udGVudF9fbmFtZSB0YWJsZS1jZWxsXCI+PHNwYW4gaWQ9XCJ0YWJsZUFyZWFcIj4tPC9zcGFuPjwvZGl2PidcbiAgICAgICAgKyAnICAgPGRpdiBjbGFzcz1cInRhYmxlLWNvbnRlbnRfX2Nhc2VzIHRhYmxlLWNlbGxcIj48c3Bhbj5DYXNlczo8L3NwYW4+PHNwYW4gaWQ9XCJ0YWJsZUNhc2VzXCI+LTwvc3Bhbj48L2Rpdj4nXG4gICAgICAgICsgJyAgIDxkaXYgc3R5bGU9XCJjb2xvcjogcmVkO1wiIGNsYXNzPVwidGFibGUtY29udGVudF9fZGVhdGhzIHRhYmxlLWNlbGxcIj48c3Bhbj5EZWF0aHM6PC9zcGFuPjxzcGFuIGlkPVwidGFibGVEZWF0aHNcIj4tPC9zcGFuPjwvZGl2PidcbiAgICAgICAgKyAnICAgPGRpdiBzdHlsZT1cImNvbG9yOiBncmVlbjtcIiBjbGFzcz1cInRhYmxlLWNvbnRlbnRfX3JlY292ZXJlZCB0YWJsZS1jZWxsXCI+PHNwYW4+UmVjb3ZlcmVkOjwvc3Bhbj48c3BhbiBpZD1cInRhYmxlUmVjb3ZlcmVkXCI+LTwvc3Bhbj48L2Rpdj4nXG4gICAgICAgICsgJzwvZGl2Pic7XG5cbiAgcmV0dXJuIHRhYmxlV3JhcHBlcjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgcmVuZGVyVGFibGU7XG4iLCJpbXBvcnQgYXBpIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICAgICAgICBpbXBvcnQgY29udGVudCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2xpc3QuY3NzXCI7XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0IGRlZmF1bHQgY29udGVudC5sb2NhbHMgfHwge307IiwiaW1wb3J0IHN0YXRlIGZyb20gJy4uL3N0YXRlJztcclxuaW1wb3J0IHJlbmRlclN0YXRpc3RpY3MgZnJvbSAnLi4vdGFibGUvcmVuZGVyLXN0YXRpc3RpY3MnO1xyXG5pbXBvcnQgJy4uLy4uL3Nhc3MvbGlzdC9saXN0LmNzcyc7XHJcblxyXG5jb25zdCBtb2RpZnlOdW1iZXJWYWx1ZSA9IHJlcXVpcmUoJy4uL2NvbW1vbi1mdW5jdGlvbnMvbW9kaWZ5TnVtYmVyVmFsdWUnKTtcclxuXHJcbmZ1bmN0aW9uIHJlbmRlckxpc3QobGlzdCkge1xyXG4gIGNvbnN0IGxpc3RDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICBsaXN0Q29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ2xpc3QtY29udGFpbmVyJyk7XHJcblxyXG4gIGNvbnN0IGxpc3RXcmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgbGlzdFdyYXBwZXIuY2xhc3NMaXN0LmFkZCgnbGlzdC13cmFwcGVyJywgJ3Njcm9sbCcpO1xyXG4gIGxpc3RDb250YWluZXIuYXBwZW5kKGxpc3RXcmFwcGVyKTtcclxuXHJcbiAgY29uc3QgaW5wdXRGaWVsZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zZWFyY2gtaW5wdXQnKTtcclxuXHJcbiAgY29uc3QgbW9kZSA9IHN0YXRlLmN1cnJlbnRMaXN0TW9kZTtcclxuXHJcbiAgbGlzdC5zb3J0KChhLCBiKSA9PiBiW21vZGVdIC0gYVttb2RlXSk7XHJcbiAgbGlzdC5mb3JFYWNoKChjb3VudHJ5KSA9PiB7XHJcbiAgICBjb25zdCBjb3VudHJ5QmxvY2sgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIGNvdW50cnlCbG9jay5pbm5lckhUTUwgPSBgPGRpdiBjbGFzcz1cImxpc3Qtd3JhcHBlcl9fY291bnRyeS1ibG9ja1wiPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBzdHlsZT1cImRpc3BsYXk6IGZsZXhcIj5cclxuICAgICAgICAgICAgICAgICAgICA8aW1nIHN0eWxlPVwibWFyZ2luLXJpZ2h0OiA1cHg7XCIgc3JjPSR7Y291bnRyeS5mbGFnfT5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPVwibWFyZ2luLXJpZ2h0OiAxMHB4O1wiPiR7Y291bnRyeS5hcmVhfTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY291bnRyeS1ibG9ja19fY291bnRcIj4ke21vZGlmeU51bWJlclZhbHVlKGNvdW50cnlbbW9kZV0pfTwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5gO1xyXG5cclxuICAgIGNvdW50cnlCbG9jay5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgc3RhdGUuaXNHbG9iYWwgPSBmYWxzZTtcclxuICAgICAgc3RhdGUuY3VycmVudENvdW50cnkgPSBjb3VudHJ5LmlkO1xyXG4gICAgICBzdGF0ZS5jdXJyZW50Q291bnRyeU5hbWUgPSBjb3VudHJ5LmFyZWE7XHJcbiAgICAgIHRpbWVDaG9pY2UxLmNoZWNrZWQgPSB0cnVlO1xyXG4gICAgICByYW5nZUNob2ljZTEuY2hlY2tlZCA9IHRydWU7XHJcbiAgICAgIHJlbmRlclN0YXRpc3RpY3MoY291bnRyeSk7XHJcbiAgICAgIGlucHV0RmllbGQudmFsdWUgPSBjb3VudHJ5LmFyZWE7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpbnB1dEZpZWxkLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgKCkgPT4ge1xyXG4gICAgICBjb25zb2xlLmxvZyhpbnB1dEZpZWxkLnZhbHVlKVxyXG4gICAgICBpZiAoIWlucHV0RmllbGQudmFsdWUpIHtcclxuICAgICAgICBzdGF0ZS5pc0dsb2JhbCA9IHRydWU7XHJcbiAgICAgICAgc3RhdGUuY3VycmVudENvdW50cnkgPSAnR2xvYmFsJzsgXHJcbiAgICAgIH1cclxuICAgIH0pXHJcblxyXG4gICAgbGlzdFdyYXBwZXIuYXBwZW5kKGNvdW50cnlCbG9jayk7XHJcbiAgfSk7XHJcblxyXG4gIHJldHVybiBsaXN0Q29udGFpbmVyO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCByZW5kZXJMaXN0O1xyXG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBuZXctY2FwICovXHJcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVmICovXHJcbi8qIGVzbGludC1kaXNhYmxlIG5vLXJlc3RyaWN0ZWQtc3ludGF4ICovXHJcbmltcG9ydCBtYXJrZXIgZnJvbSAnLi4vYXNzZXRzL2ljb25zL21hcmtlci5zdmcnO1xyXG5pbXBvcnQgbGVnZW5kIGZyb20gJy4uL2Fzc2V0cy9pY29ucy9sZWdlbmQuc3ZnJztcclxuaW1wb3J0IGNsb3NlIGZyb20gJy4uL2Fzc2V0cy9pY29ucy9jbG9zZS5zdmcnO1xyXG5cclxuY29uc3Qgc2VsZWN0ID0ge1xyXG4gIHNlbGVjdEVsZW1lbnQ6IG51bGwsXHJcbiAgaW5pdCgpIHtcclxuICAgIHRoaXMuc2VsZWN0RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NlbGVjdCcpO1xyXG4gICAgdGhpcy5zZWxlY3RFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ3NlbGVjdC1tYXAnKTtcclxuICAgIHRoaXMuc2VsZWN0RWxlbWVudC5pbm5lckhUTUwgPSBgPG9wdGlvbiB2YWx1ZT1cImNhc2VzXCIgc2VsZWN0ZWQ+Q2FzZXM8L29wdGlvbj5cclxuICAgIDxvcHRpb24gdmFsdWU9XCJkZWF0aHNcIj5EZWF0aHM8L29wdGlvbj5cclxuICAgIDxvcHRpb24gdmFsdWU9XCJyZWNvdmVyZWRcIj5SZWNvdmVyZWQ8L29wdGlvbj5gO1xyXG5cclxuICAgIHRoaXMuc2VsZWN0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoKSA9PiB7XHJcbiAgICAgIG1hcC5zZXRNYXJrZXJzKHRoaXMuc2VsZWN0RWxlbWVudC52YWx1ZSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWFwX193cmFwcGVyJykuYXBwZW5kQ2hpbGQodGhpcy5zZWxlY3RFbGVtZW50KTtcclxuICB9LFxyXG59O1xyXG5cclxuc2VsZWN0LmluaXQoKTtcclxuXHJcbmNvbnN0IG1hcCA9IHtcclxuICBtYXA6IG51bGwsXHJcbiAgbWFwT3B0aW9uczoge1xyXG4gICAgY2VudGVyOiBbMTcsIDQwXSxcclxuICAgIHpvb206IDIsXHJcbiAgICBtaW5ab29tOiAyLFxyXG4gICAgbWF4Wm9vbTogMTAsXHJcbiAgICB3b3JsZENvcHlKdW1wOiB0cnVlLFxyXG4gIH0sXHJcbiAgZGF0YTogbnVsbCxcclxuICBidXR0b25PcGVuTGVnZW5kOiBudWxsLFxyXG4gIGJ1dHRvbkNsb3NlTGVnZW5kOiBudWxsLFxyXG4gIGxlZ2VuZDogbnVsbCxcclxuXHJcbiAgaW5pdCgpIHtcclxuICAgIHRoaXMubWFwID0gbmV3IEwubWFwKCdtYXAnLCB0aGlzLm1hcE9wdGlvbnMpO1xyXG4gICAgdGhpcy5tYXAuc2V0TWF4Qm91bmRzKFtcclxuICAgICAgWzg1LCAzNjBdLFxyXG4gICAgICBbLTg1LCAtMzYwXSxcclxuICAgIF0pO1xyXG4gICAgY29uc3QgbGF5ZXIgPSBuZXcgTC5UaWxlTGF5ZXIoJ2h0dHBzOi8vYXBpLm1hcGJveC5jb20vc3R5bGVzL3YxL3JoamplL2NraW92bDNqMzU1czkxN3M3eHI3ZjBkcDMvdGlsZXMvMjU2L3t6fS97eH0ve3l9QDJ4P2FjY2Vzc190b2tlbj1way5leUoxSWpvaWNtaHFhbVVpTENKaElqb2lZMnRwYjNacmVtcHdNV2RtZGpKeGNHczJhWGQ2WkRCa1pDSjkudmZQcU5hMk9IQmtBV2JRRmk4UnprQScpO1xyXG4gICAgdGhpcy5tYXAuYWRkTGF5ZXIobGF5ZXIpO1xyXG5cclxuICAgIGZldGNoKCdodHRwczovL2Nvcm9uYS5sbWFvLm5pbmphL3YyL2NvdW50cmllcycpXHJcbiAgICAgIC50aGVuKChyZXN1bHQpID0+IHJlc3VsdC5qc29uKCkpXHJcbiAgICAgIC50aGVuKChyZXN1bHQpID0+IHtcclxuICAgICAgICB0aGlzLmRhdGEgPSByZXN1bHQ7XHJcbiAgICAgICAgbWFwLnNldE1hcmtlcnMoc2VsZWN0LnNlbGVjdEVsZW1lbnQudmFsdWUpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICB0aGlzLmJ1dHRvbk9wZW5MZWdlbmQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWFwLWxlZ2VuZC1idXR0b24gPiBpbWcnKTtcclxuICAgIHRoaXMubGVnZW5kID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1hcC1sZWdlbmQtY29udGVudCcpO1xyXG5cclxuICAgIHRoaXMuYnV0dG9uT3BlbkxlZ2VuZC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgdGhpcy5sZWdlbmQuY2xhc3NMaXN0LnJlbW92ZSgnZGlzYWJsZWQnKTtcclxuICAgIH0pO1xyXG4gIH0sXHJcblxyXG4gIHNldE1hcmtlcnModmFsdWUpIHtcclxuICAgIGNvbnN0IGRhdGFNYXJrZXJzID0gW107XHJcbiAgICB0aGlzLmRhdGEuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xyXG4gICAgICBjb25zdCB0ZW1wID0ge1xyXG4gICAgICAgIGxhdGl0dWRlOiBlbGVtZW50LmNvdW50cnlJbmZvLmxhdCxcclxuICAgICAgICBsb25naXR1ZGU6IGVsZW1lbnQuY291bnRyeUluZm8ubG9uZyxcclxuICAgICAgICBjb3VudHJ5OiBlbGVtZW50LmNvdW50cnksXHJcbiAgICAgIH07XHJcbiAgICAgIGZvciAoY29uc3QgcHJvcCBpbiBlbGVtZW50KSB7XHJcbiAgICAgICAgaWYgKHByb3AgPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICB0ZW1wLnNlbGVjdFZhbHVlID0gZWxlbWVudFtwcm9wXTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgZGF0YU1hcmtlcnMucHVzaCh0ZW1wKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGRhdGFNYXJrZXJzLnNvcnQoKGEsIGIpID0+IHtcclxuICAgICAgaWYgKGEuc2VsZWN0VmFsdWUgPiBiLnNlbGVjdFZhbHVlKSB7XHJcbiAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGEuc2VsZWN0VmFsdWUgPCBiLnNlbGVjdFZhbHVlKSB7XHJcbiAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiAwO1xyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgbGVnZW5kTWFwID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1hcC1sZWdlbmQtY29udGVudCcpO1xyXG4gICAgbGVnZW5kTWFwLmlubmVySFRNTCA9IGA8ZGl2IGNsYXNzPVwibGVnZW5kLXRpdGxlXCI+JHt2YWx1ZVswXS50b1VwcGVyQ2FzZSgpICsgdmFsdWUuc2xpY2UoMSl9PC9kaXY+XHJcbiAgICA8ZGl2IGNsYXNzPVwiY2xvc2UtYnV0dG9uXCI+XHJcbiAgICAgIDxpbWcgc3JjPVwiYXNzZXRzL2Nsb3NlLnBuZ1wiPlxyXG4gICAgPC9kaXY+YDtcclxuICAgIGZvciAobGV0IGkgPSBkYXRhTWFya2Vycy5sZW5ndGg7IGkgPiAwOyBpIC09IDIyKSB7XHJcbiAgICAgIGNvbnN0IHNpemUgPSBNYXRoLnRydW5jKDI1ICogKChpICsgMSkgLyBkYXRhTWFya2Vycy5sZW5ndGgpKTtcclxuICAgICAgbGVnZW5kTWFwLmlubmVySFRNTCArPSBgPGRpdj5cclxuICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgPGltZyBzcmM9XCIuL2Fzc2V0cy9tYXJrZXIuc3ZnXCIgc3R5bGU9XCJ3aWR0aDogJHtzaXplfXB4OyBoZWlnaHQ6ICR7c2l6ZX1weDtcIj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8c3Bhbj4gPiAke2RhdGFNYXJrZXJzW2kgLSAyMl0uc2VsZWN0VmFsdWV9IC0gJHtkYXRhTWFya2Vyc1tpIC0gMV0uc2VsZWN0VmFsdWV9PC9zcGFuPlxyXG4gICAgICA8L2Rpdj5gO1xyXG4gICAgICBpZiAoZGF0YU1hcmtlcnNbaSAtIDIyXS5zZWxlY3RWYWx1ZSA9PT0gMCkgYnJlYWs7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgbGFzdFNwYW4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWFwLWxlZ2VuZC1jb250ZW50ID4gZGl2Omxhc3QtY2hpbGQgPiBzcGFuJyk7XHJcbiAgICBjb25zdCB0ZXh0RnJvbUxhc3RTcGFuID0gbGFzdFNwYW4uaW5uZXJUZXh0O1xyXG4gICAgbGFzdFNwYW4uaW5uZXJUZXh0ID0gdGV4dEZyb21MYXN0U3Bhbi5zbGljZSgzKTtcclxuXHJcbiAgICB0aGlzLmJ1dHRvbkNsb3NlTGVnZW5kID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNsb3NlLWJ1dHRvbiA+IGltZycpO1xyXG4gICAgdGhpcy5idXR0b25DbG9zZUxlZ2VuZC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgdGhpcy5sZWdlbmQuY2xhc3NMaXN0LmFkZCgnZGlzYWJsZWQnKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IG5vZGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubGVhZmxldC1tYXJrZXItcGFuZScpO1xyXG4gICAgd2hpbGUgKG5vZGUuZmlyc3RDaGlsZCkge1xyXG4gICAgICBub2RlLnJlbW92ZUNoaWxkKG5vZGUuZmlyc3RDaGlsZCk7XHJcbiAgICB9XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhTWFya2Vycy5sZW5ndGg7IGkgKz0gMSkge1xyXG4gICAgICBjb25zdCBzaXplID0gKGkgKyAxKSAvIGRhdGFNYXJrZXJzLmxlbmd0aDtcclxuICAgICAgY29uc3QgaWNvbk9wdGlvbnMgPSB7XHJcbiAgICAgICAgaWNvblVybDogJy4vYXNzZXRzL21hcmtlci5zdmcnLFxyXG4gICAgICAgIGljb25TaXplOiBbTWF0aC50cnVuYyg0MCAqIHNpemUpLCBNYXRoLnRydW5jKDQwICogc2l6ZSldLFxyXG4gICAgICB9O1xyXG4gICAgICBjb25zdCBjdXN0b21JY29uID0gTC5pY29uKGljb25PcHRpb25zKTtcclxuXHJcbiAgICAgIGNvbnN0IG1hcmtlck9wdGlvbnMgPSB7XHJcbiAgICAgICAgdGl0bGU6IGAke2RhdGFNYXJrZXJzW2ldLmNvdW50cnl9XFxuJHt2YWx1ZVswXS50b1VwcGVyQ2FzZSgpICsgdmFsdWUuc2xpY2UoMSl9OiAke2RhdGFNYXJrZXJzW2ldLnNlbGVjdFZhbHVlfWAsXHJcbiAgICAgICAgY2xpY2thYmxlOiB0cnVlLFxyXG4gICAgICAgIGRyYWdnYWJsZTogZmFsc2UsXHJcbiAgICAgICAgaWNvbjogY3VzdG9tSWNvbixcclxuICAgICAgICBvcGFjaXR5OiAwLjUsXHJcbiAgICAgICAgYWx0OiBgJHtkYXRhTWFya2Vyc1tpXS5jb3VudHJ5fWAsXHJcbiAgICAgIH07XHJcbiAgICAgIGNvbnN0IG1hcmsgPSBMLm1hcmtlcihbZGF0YU1hcmtlcnNbaV0ubGF0aXR1ZGUsIGRhdGFNYXJrZXJzW2ldLmxvbmdpdHVkZV0sIG1hcmtlck9wdGlvbnMpO1xyXG4gICAgICBtYXJrLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNlYXJjaC1pbnB1dCcpLnZhbHVlID0gZXZlbnQudGFyZ2V0Lm9wdGlvbnMuYWx0O1xyXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zZWFyY2gtaW5wdXQnKS5mb2N1cygpO1xyXG4gICAgICAgIHRoaXMuZGF0YS5mb3JFYWNoKChlbGVtZW50KSA9PiB7XHJcbiAgICAgICAgICBpZiAoZWxlbWVudC5jb3VudHJ5ID09PSBldmVudC50YXJnZXQub3B0aW9ucy5hbHQpIHtcclxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgY29uc3QgY291bnRyeSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5saXN0LXdyYXBwZXJfX2NvdW50cnktYmxvY2snKTtcclxuICAgICAgICAgICAgICBjb3VudHJ5LmNsaWNrKCk7XHJcbiAgICAgICAgICAgIH0sIDUwKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcbiAgICAgIG1hcmsuYWRkVG8odGhpcy5tYXApO1xyXG4gICAgfVxyXG4gIH0sXHJcbn07XHJcblxyXG5tYXAuaW5pdCgpO1xyXG5cclxuY29uc3Qgc2V0RGF0ZSA9IHtcclxuICBpbml0KCkge1xyXG4gICAgZmV0Y2goJ2h0dHBzOi8vZGlzZWFzZS5zaC92My9jb3ZpZC0xOS9oaXN0b3JpY2FsL2FsbD9sYXN0ZGF5cz0zNjYnKVxyXG4gICAgICAudGhlbigocmVzdWx0KSA9PiByZXN1bHQuanNvbigpKVxyXG4gICAgICAudGhlbigocmVzdWx0KSA9PiB7XHJcbiAgICAgICAgY29uc3QgYXJyRGF0ZXMgPSBPYmplY3Qua2V5cyhyZXN1bHQuY2FzZXMpO1xyXG4gICAgICAgIGNvbnN0IGRhdGUgPSBhcnJEYXRlc1thcnJEYXRlcy5sZW5ndGggLSAxXS5zcGxpdCgnLycpO1xyXG4gICAgICAgIGNvbnN0IGRhdGVEaXYgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudG9kYXknKTtcclxuICAgICAgICBkYXRlRGl2LmlubmVyVGV4dCA9IGBMYXN0IHVwZGF0ZWQgJHsrZGF0ZVsxXSA+IDkgPyBkYXRlWzFdIDogYDAke2RhdGVbMV19YH0uJHsrZGF0ZVswXSA+IDkgPyBkYXRlWzBdIDogYDAke2RhdGVbMF19YH0uMjAke2RhdGVbMl19YDtcclxuICAgICAgfSk7XHJcbiAgfSxcclxufTtcclxuXHJcbnNldERhdGUuaW5pdCgpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgbWFwO1xyXG4iLCJpbXBvcnQgbWFwIGZyb20gJy4vbWFwJztcclxuXHJcbmNvbnN0IERPTSA9IHtcclxuICBtYXBXcmFwcGVyOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWFwX193cmFwcGVyJyksXHJcbiAgbWFwQ29udGFpbmVyOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWFwJyksXHJcbiAgY2hhcnQ6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jaGFydF9fd3JhcHBlcicpLFxyXG4gIHRhYmxlOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudGFibGVfX3dyYXBwZXInKSxcclxuICBsaXN0OiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubGlzdF9fd3JhcHBlcicpLFxyXG4gIHdyYXBwZXI6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5mdWxsLXNjcmVlbicpLFxyXG4gIGNvbnRlbnQ6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy53cmFwcGVyX19tYWluJyksXHJcbiAgY29sdW1uT25lOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY29sdW1uX19kYXRhJyksXHJcbiAgY29sdW1uVHdvOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY29sdW1uX192aXN1YWwnKSxcclxuICBpY29uOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuaWNvbi1yZXNpemUnKSxcclxufTtcclxuXHJcbmNvbnN0IHtcclxuICBtYXBXcmFwcGVyLCBtYXBDb250YWluZXIsIGNoYXJ0LCB0YWJsZSwgbGlzdCwgd3JhcHBlciwgY29udGVudCwgY29sdW1uT25lLCBjb2x1bW5Ud28sIGljb24sXHJcbn0gPSBET007XHJcblxyXG5jb25zdCByZXNpemVUb0JpZyA9ICh0YXJnZXQpID0+IHtcclxuICB0YXJnZXQuY2xhc3NMaXN0LmFkZCgncmVzaXplJyk7XHJcbiAgY29udGVudC5jbGFzc0xpc3QuYWRkKCdub25lLXZpc2libGUnKTtcclxuICB3cmFwcGVyLmNsYXNzTGlzdC5hZGQoJ3Zpc2libGUnKTtcclxuICB3cmFwcGVyLmFwcGVuZCh0YXJnZXQpO1xyXG4gIGljb24uZm9yRWFjaCgoaWNvbikgPT4ge1xyXG4gICAgaWNvbi5jbGFzc0xpc3QuYWRkKCdpY29uLWNsb3NlJyk7XHJcbiAgfSk7XHJcbn07XHJcblxyXG5jb25zdCByZXNpemVUb1NtYWxsID0gKHRhcmdldCkgPT4ge1xyXG4gIHRhcmdldC5jbGFzc0xpc3QucmVtb3ZlKCdyZXNpemUnKTtcclxuICBjaGFydC5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnO1xyXG4gIHdyYXBwZXIuY2xhc3NMaXN0LnJlbW92ZSgndmlzaWJsZScpO1xyXG4gIGNvbnRlbnQuY2xhc3NMaXN0LnJlbW92ZSgnbm9uZS12aXNpYmxlJyk7XHJcbiAgaWNvbi5mb3JFYWNoKChpY29uKSA9PiB7XHJcbiAgICBpY29uLmNsYXNzTGlzdC5yZW1vdmUoJ2ljb24tY2xvc2UnKTtcclxuICB9KTtcclxufTtcclxuXHJcbmNvbnN0IGFkZEV2ZW50TGlzdGVuZXJUb1Jlc2l6ZUJ1dHRvbiA9ICgpID0+IHtcclxuICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcclxuICAgIGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2ljb24tcmVzaXplX19tYXAnKSkge1xyXG4gICAgICBpZiAoIXdyYXBwZXIuY2xhc3NMaXN0LmNvbnRhaW5zKCd2aXNpYmxlJykpIHtcclxuICAgICAgICByZXNpemVUb0JpZyhtYXBXcmFwcGVyKTtcclxuICAgICAgICBjaGFydC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgIG1hcENvbnRhaW5lci5pbm5lckhUTUwgPSAnPGRpdiBpZD1cIm1hcFwiPjwvZGl2Pic7XHJcbiAgICAgICAgbWFwLmluaXQoKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXNpemVUb1NtYWxsKG1hcFdyYXBwZXIpO1xyXG4gICAgICAgIGNvbHVtblR3by5wcmVwZW5kKG1hcFdyYXBwZXIpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdpY29uLXJlc2l6ZV9fY2hhcnQnKSkge1xyXG4gICAgICBpZiAoIXdyYXBwZXIuY2xhc3NMaXN0LmNvbnRhaW5zKCd2aXNpYmxlJykpIHtcclxuICAgICAgICByZXNpemVUb0JpZyhjaGFydCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmVzaXplVG9TbWFsbChjaGFydCk7XHJcbiAgICAgICAgY29sdW1uVHdvLmFwcGVuZChjaGFydCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2ljb24tcmVzaXplX190YWJsZScpKSB7XHJcbiAgICAgIGlmICghd3JhcHBlci5jbGFzc0xpc3QuY29udGFpbnMoJ3Zpc2libGUnKSkge1xyXG4gICAgICAgIGNoYXJ0LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgcmVzaXplVG9CaWcodGFibGUpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNoYXJ0LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgcmVzaXplVG9TbWFsbCh0YWJsZSk7XHJcbiAgICAgICAgY29sdW1uT25lLnByZXBlbmQodGFibGUpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdpY29uLXJlc2l6ZV9fbGlzdCcpKSB7XHJcbiAgICAgIGlmICghd3JhcHBlci5jbGFzc0xpc3QuY29udGFpbnMoJ3Zpc2libGUnKSkge1xyXG4gICAgICAgIGNoYXJ0LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgcmVzaXplVG9CaWcobGlzdCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY2hhcnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICByZXNpemVUb1NtYWxsKGxpc3QpO1xyXG4gICAgICAgIGNvbHVtbk9uZS5hcHBlbmQobGlzdCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgKGUpID0+IHtcclxuICAgIGlmIChlLmtleSA9PT0gJ0VzY2FwZScgJiYgd3JhcHBlci5jbGFzc0xpc3QuY29udGFpbnMoJ3Zpc2libGUnKSkge1xyXG4gICAgICByZXNpemVUb1NtYWxsKHRhYmxlKTtcclxuICAgICAgY29sdW1uT25lLnByZXBlbmQodGFibGUpO1xyXG4gICAgICByZXNpemVUb1NtYWxsKGxpc3QpO1xyXG4gICAgICBjb2x1bW5PbmUuYXBwZW5kKGxpc3QpO1xyXG4gICAgICByZXNpemVUb1NtYWxsKGNoYXJ0KTtcclxuICAgICAgY29sdW1uVHdvLmFwcGVuZChjaGFydCk7XHJcbiAgICAgIHJlc2l6ZVRvU21hbGwobWFwV3JhcHBlcik7XHJcbiAgICAgIGNvbHVtblR3by5wcmVwZW5kKG1hcFdyYXBwZXIpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgYWRkRXZlbnRMaXN0ZW5lclRvUmVzaXplQnV0dG9uO1xyXG4iLCJjb25zdCBzZWxlY3RzID0ge1xyXG4gIHNlbGVjdExpc3Q6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5saXN0X19zZWxlY3QnKSxcclxuICBzZWxlY3RNYXA6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zZWxlY3QtbWFwJyksXHJcbn07XHJcblxyXG5jb25zdCB7IHNlbGVjdExpc3QsIHNlbGVjdE1hcCB9ID0gc2VsZWN0cztcclxuXHJcbmNvbnN0IGNoYW5nZVNlbGVjdE1hcCA9IChyYXRlKSA9PiB7XHJcbiAgc2VsZWN0TWFwLnZhbHVlID0gcmF0ZTtcclxuICBzZWxlY3RNYXAuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ2NoYW5nZScpKTtcclxufTtcclxuXHJcbmNvbnN0IGNoYW5nZVNlbGVjdExpc3QgPSAocmF0ZSkgPT4ge1xyXG4gIHNlbGVjdExpc3QudmFsdWUgPSByYXRlO1xyXG4gIHNlbGVjdExpc3QuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ2NoYW5nZScpKTtcclxufTtcclxuXHJcbmNvbnN0IGFkZEV2ZW50TGlzdGVuZXJzVG9TZWxlY3RzID0gKCkgPT4ge1xyXG4gIHNlbGVjdExpc3QuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICBpZiAoc2VsZWN0TGlzdC52YWx1ZSA9PT0gJ2Nhc2VzJykge1xyXG4gICAgICBjaGFuZ2VTZWxlY3RNYXAoJ2Nhc2VzJyk7XHJcbiAgICAgIGFsbENhc2VzLmNoZWNrZWQgPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgaWYgKHNlbGVjdExpc3QudmFsdWUgPT09ICdkZWF0aHMnKSB7XHJcbiAgICAgIGNoYW5nZVNlbGVjdE1hcCgnZGVhdGhzJyk7XHJcbiAgICAgIGFsbERlYXRocy5jaGVja2VkID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIGlmIChzZWxlY3RMaXN0LnZhbHVlID09PSAncmVjb3ZlcmVkJykge1xyXG4gICAgICBjaGFuZ2VTZWxlY3RNYXAoJ3JlY292ZXJlZCcpO1xyXG4gICAgICBhbGxSZWNvdmVyZWQuY2hlY2tlZCA9IHRydWU7XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gIHNlbGVjdE1hcC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgIGlmIChzZWxlY3RNYXAudmFsdWUgPT09ICdjYXNlcycpIHtcclxuICAgICAgY2hhbmdlU2VsZWN0TGlzdCgnY2FzZXMnKTtcclxuICAgICAgYWxsQ2FzZXMuY2hlY2tlZCA9IHRydWU7XHJcbiAgICB9XHJcbiAgICBpZiAoc2VsZWN0TWFwLnZhbHVlID09PSAnZGVhdGhzJykge1xyXG4gICAgICBjaGFuZ2VTZWxlY3RMaXN0KCdkZWF0aHMnKTtcclxuICAgICAgYWxsRGVhdGhzLmNoZWNrZWQgPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgaWYgKHNlbGVjdE1hcC52YWx1ZSA9PT0gJ3JlY292ZXJlZCcpIHtcclxuICAgICAgY2hhbmdlU2VsZWN0TGlzdCgncmVjb3ZlcmVkJyk7XHJcbiAgICAgIGFsbFJlY292ZXJlZC5jaGVja2VkID0gdHJ1ZTtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2FsbENhc2VzJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICBjaGFuZ2VTZWxlY3RMaXN0KCdjYXNlcycpO1xyXG4gICAgY2hhbmdlU2VsZWN0TWFwKCdjYXNlcycpO1xyXG4gIH0pO1xyXG5cclxuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjYWxsRGVhdGhzJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICBjaGFuZ2VTZWxlY3RMaXN0KCdkZWF0aHMnKTtcclxuICAgIGNoYW5nZVNlbGVjdE1hcCgnZGVhdGhzJyk7XHJcbiAgfSk7XHJcblxyXG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNhbGxSZWNvdmVyZWQnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgIGNoYW5nZVNlbGVjdExpc3QoJ3JlY292ZXJlZCcpO1xyXG4gICAgY2hhbmdlU2VsZWN0TWFwKCdyZWNvdmVyZWQnKTtcclxuICB9KTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGFkZEV2ZW50TGlzdGVuZXJzVG9TZWxlY3RzO1xyXG4iLCJpbXBvcnQgcHJpbnQgZnJvbSAnLi4vYXNzZXRzL2ljb25zL3ByaW50LnN2Zyc7XHJcbmltcG9ydCBnbG9iZSBmcm9tICcuLi9hc3NldHMvaWNvbnMvZ2xvYmUucG5nJztcclxuXHJcbmZ1bmN0aW9uIHByaW50RGl2KGRpdk5hbWUpIHtcclxuICBjb25zdCBwcmludENvbnRlbnRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZGl2TmFtZSkuaW5uZXJIVE1MO1xyXG4gIGNvbnN0IG9yaWdpbmFsQ29udGVudHMgPSBkb2N1bWVudC5ib2R5LmlubmVySFRNTDtcclxuXHJcbiAgZG9jdW1lbnQuYm9keS5pbm5lckhUTUwgPSBwcmludENvbnRlbnRzO1xyXG5cclxuICB3aW5kb3cucHJpbnQoKTtcclxuXHJcbiAgZG9jdW1lbnQuYm9keS5pbm5lckhUTUwgPSBvcmlnaW5hbENvbnRlbnRzO1xyXG4gIGRvY3VtZW50LmxvY2F0aW9uLnJlbG9hZCgpO1xyXG59XHJcblxyXG5jb25zdCBwcmludERhdGEgPSB7XHJcbiAgZGF0YTogbnVsbCxcclxuICBkYXRhQWxsOiBudWxsLFxyXG5cclxuICBpbml0KCkge1xyXG4gICAgZmV0Y2goJ2h0dHBzOi8vY29yb25hLmxtYW8ubmluamEvdjIvY291bnRyaWVzJylcclxuICAgICAgLnRoZW4oKHJlc3VsdCkgPT4gcmVzdWx0Lmpzb24oKSlcclxuICAgICAgLnRoZW4oKHJlc3VsdCkgPT4ge1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IHJlc3VsdDtcclxuICAgICAgICBjb25zdCBpY29uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgaWNvbi5jbGFzc0xpc3QuYWRkKCdwcmludC1pY29uJyk7XHJcbiAgICAgICAgY29uc3QgaW1nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XHJcbiAgICAgICAgaW1nLnNyYyA9ICdhc3NldHMvcHJpbnQuc3ZnJztcclxuICAgICAgICBpY29uLmFwcGVuZENoaWxkKGltZyk7XHJcbiAgICAgICAgaW1nLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgICAgdGhpcy5yZW5kZXJDYXJkKCk7XHJcbiAgICAgICAgICBwcmludERpdigncHJpbnRhYmxlQXJlYScpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudGFibGUtY29udGVudF9fbmFtZScpLmFwcGVuZENoaWxkKGljb24pO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICBmZXRjaCgnaHR0cHM6Ly9jb3JvbmEubG1hby5uaW5qYS92My9jb3ZpZC0xOS9hbGwnKVxyXG4gICAgICAudGhlbigocmVzdWx0KSA9PiByZXN1bHQuanNvbigpKVxyXG4gICAgICAudGhlbigocmVzdWx0KSA9PiB7XHJcbiAgICAgICAgdGhpcy5kYXRhQWxsID0gcmVzdWx0O1xyXG4gICAgICB9KTtcclxuICB9LFxyXG5cclxuICByZW5kZXJDYXJkKCkge1xyXG4gICAgY29uc3QgY291bnRyeSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0YWJsZUFyZWEnKTtcclxuICAgIGxldCBjdXJyZW50Q291bnRyeTtcclxuICAgIGlmIChjb3VudHJ5LmlubmVyVGV4dCA9PT0gJ0dsb2JhbCcpIHtcclxuICAgICAgY3VycmVudENvdW50cnkgPSB0aGlzLmRhdGFBbGw7XHJcbiAgICAgIGN1cnJlbnRDb3VudHJ5LmZsYWcgPSAnYXNzZXRzL2dsb2JlLnBuZyc7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zdCBnZXRDdXJyZW50Q291dHJ5ID0gKCkgPT4ge1xyXG4gICAgICAgIGxldCBvYmogPSB7fTtcclxuICAgICAgICB0aGlzLmRhdGEuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xyXG4gICAgICAgICAgaWYgKGVsZW1lbnQuY291bnRyeSA9PT0gY291bnRyeS5pbm5lclRleHQpIHtcclxuICAgICAgICAgICAgb2JqID0gZWxlbWVudDtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG9iajtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIGN1cnJlbnRDb3VudHJ5ID0gZ2V0Q3VycmVudENvdXRyeSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICB0aXRsZS5jbGFzc0xpc3QuYWRkKCd0aXRsZS1wcmludCcpO1xyXG4gICAgY29uc3QgdGl0bGVGbGFnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XHJcbiAgICBjb25zdCB0aXRsZU5hbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XHJcbiAgICBpZiAoY291bnRyeS5pbm5lclRleHQgPT09ICdHbG9iYWwnKSB7XHJcbiAgICAgIHRpdGxlRmxhZy5zcmMgPSBjdXJyZW50Q291bnRyeS5mbGFnO1xyXG4gICAgICB0aXRsZU5hbWUuaW5uZXJUZXh0ID0gJ0FsbCB3b3JsZCc7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aXRsZUZsYWcuc3JjID0gY3VycmVudENvdW50cnkuY291bnRyeUluZm8uZmxhZztcclxuICAgICAgdGl0bGVOYW1lLmlubmVyVGV4dCA9IGAke2N1cnJlbnRDb3VudHJ5LmNvbnRpbmVudH0sICR7Y3VycmVudENvdW50cnkuY291bnRyeX1gO1xyXG4gICAgfVxyXG5cclxuICAgIHRpdGxlLmFwcGVuZENoaWxkKHRpdGxlRmxhZyk7XHJcbiAgICB0aXRsZS5hcHBlbmRDaGlsZCh0aXRsZU5hbWUpO1xyXG5cclxuICAgIGNvbnN0IHVwZGF0ZURhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHVwZGF0ZURhdGUuY2xhc3NMaXN0LmFkZCgndXBkYXRlLXByaW50Jyk7XHJcbiAgICB1cGRhdGVEYXRlLmlubmVyVGV4dCA9IGAke2RvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50b2RheScpLmlubmVyVGV4dH1gO1xyXG5cclxuICAgIGNvbnN0IHRhYmxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICB0YWJsZS5jbGFzc0xpc3QuYWRkKCd0YWJsZS1wcmludCcpO1xyXG4gICAgdGFibGUuaW5uZXJIVE1MID0gYDxkaXYgY2xhc3M9XCJ0YWJsZS1wcmludC10aXRsZVwiPkNhc2VzLCBkZWF0aHMgYW5kIHJlY292ZXJlZDwvZGl2PlxyXG4gICAgPHRhYmxlIGNsYXNzPVwidGFibGVcIj5cclxuICA8dHI+XHJcbiAgICA8dGg+PC90aD5cclxuICAgIDx0aD5BbGwgdGltZTwvdGg+XHJcbiAgICA8dGg+VG9kYXk8L3RoPlxyXG4gIDwvdHI+XHJcbiAgPHRyPlxyXG4gICAgPHRkPkNhc2VzPC90ZD5cclxuICAgIDx0ZD4ke2N1cnJlbnRDb3VudHJ5LmNhc2VzfTwvdGQ+XHJcbiAgICA8dGQ+JHtjdXJyZW50Q291bnRyeS50b2RheUNhc2VzfTwvdGQ+XHJcbiAgPC90cj5cclxuICA8dHI+XHJcbiAgICA8dGQ+RGVhdGhzPC90ZD5cclxuICAgIDx0ZD4ke2N1cnJlbnRDb3VudHJ5LmRlYXRoc308L3RkPlxyXG4gICAgPHRkPiR7Y3VycmVudENvdW50cnkudG9kYXlEZWF0aHN9PC90ZD5cclxuICA8L3RyPlxyXG4gIDx0cj5cclxuICAgIDx0ZD5SZWNvdmVyZWQ8L3RkPlxyXG4gICAgPHRkPiR7Y3VycmVudENvdW50cnkucmVjb3ZlcmVkfTwvdGQ+XHJcbiAgICA8dGQ+JHtjdXJyZW50Q291bnRyeS50b2RheVJlY292ZXJlZH08L3RkPlxyXG4gIDwvdHI+XHJcbiAgPHRyPlxyXG4gICAgPHRkPtChYXNlcyBwZXIgMTAwLDAwMCBwZW9wbGU8L3RkPlxyXG4gICAgPHRkPiR7KChjdXJyZW50Q291bnRyeS5jYXNlcyAqIDEwMDAwMCkgLyBjdXJyZW50Q291bnRyeS5wb3B1bGF0aW9uKS50b0ZpeGVkKDEpfTwvdGQ+XHJcbiAgICA8dGQ+JHsoKGN1cnJlbnRDb3VudHJ5LnRvZGF5Q2FzZXMgKiAxMDAwMDApIC8gY3VycmVudENvdW50cnkucG9wdWxhdGlvbikudG9GaXhlZCgxKX08L3RkPlxyXG4gIDwvdHI+XHJcbiAgPHRyPlxyXG4gICAgPHRkPkRlYXRocyBwZXIgMTAwLDAwMCBwZW9wbGU8L3RkPlxyXG4gICAgPHRkPiR7KChjdXJyZW50Q291bnRyeS5kZWF0aHMgKiAxMDAwMDApIC8gY3VycmVudENvdW50cnkucG9wdWxhdGlvbikudG9GaXhlZCgxKX08L3RkPlxyXG4gICAgPHRkPiR7KChjdXJyZW50Q291bnRyeS50b2RheURlYXRocyAqIDEwMDAwMCkgLyBjdXJyZW50Q291bnRyeS5wb3B1bGF0aW9uKS50b0ZpeGVkKDEpfTwvdGQ+XHJcbiAgPC90cj5cclxuICA8dHI+XHJcbiAgICA8dGQ+UmVjb3ZlcmVkIHBlciAxMDAsMDAwIHBlb3BsZTwvdGQ+XHJcbiAgICA8dGQ+JHsoKGN1cnJlbnRDb3VudHJ5LnJlY292ZXJlZCAqIDEwMDAwMCkgLyBjdXJyZW50Q291bnRyeS5wb3B1bGF0aW9uKS50b0ZpeGVkKDEpfTwvdGQ+XHJcbiAgICA8dGQ+JHsoKGN1cnJlbnRDb3VudHJ5LnRvZGF5UmVjb3ZlcmVkICogMTAwMDAwKSAvIGN1cnJlbnRDb3VudHJ5LnBvcHVsYXRpb24pLnRvRml4ZWQoMSl9PC90ZD5cclxuICA8L3RyPlxyXG48L3RhYmxlPmA7XHJcblxyXG4gICAgY29uc3Qgc2Vjb25kVGFibGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHNlY29uZFRhYmxlLmNsYXNzTGlzdC5hZGQoJ3NlY29uZC10YWJsZS1wcmludCcpO1xyXG4gICAgc2Vjb25kVGFibGUuaW5uZXJIVE1MID0gYDxkaXYgY2xhc3M9XCJ0YWJsZS1wcmludC10aXRsZVwiPlRlc3Rpbmc8L2Rpdj5cclxuICAgIDx0YWJsZSBjbGFzcz1cInNlY29uZC10YWJsZVwiPlxyXG4gIDx0cj5cclxuICAgIDx0aD5UZXN0czwvdGg+XHJcbiAgICA8dGg+VGVzdHMgcGVyIDEwMCwwMDAgcGVvcGxlPC90aD5cclxuICA8L3RyPlxyXG4gIDx0cj5cclxuICAgIDx0ZD4ke2N1cnJlbnRDb3VudHJ5LnRlc3RzfTwvdGQ+XHJcbiAgICA8dGQ+JHsoKGN1cnJlbnRDb3VudHJ5LnRlc3RzICogMTAwMDAwKSAvIGN1cnJlbnRDb3VudHJ5LnBvcHVsYXRpb24pLnRvRml4ZWQoMSl9PC90ZD5cclxuICA8L3RyPlxyXG48L3RhYmxlPmA7XHJcblxyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByaW50LWRhdGEnKS5hcHBlbmRDaGlsZCh0aXRsZSk7XHJcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJpbnQtZGF0YScpLmFwcGVuZENoaWxkKHVwZGF0ZURhdGUpO1xyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByaW50LWRhdGEnKS5hcHBlbmRDaGlsZCh0YWJsZSk7XHJcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJpbnQtZGF0YScpLmFwcGVuZENoaWxkKHNlY29uZFRhYmxlKTtcclxuICB9LFxyXG59O1xyXG5cclxucHJpbnREYXRhLmluaXQoKTtcclxuIiwiaW1wb3J0IGNyZWF0ZUNoYXJ0IGZyb20gJy4vY2hhcnQnO1xyXG5pbXBvcnQgcmVuZGVyVGFibGVCbG9jayBmcm9tICcuL3RhYmxlL3JlbmRlci10YWJsZS1ibG9jayc7XHJcbmltcG9ydCByZW5kZXJMaXN0QmxvY2sgZnJvbSAnLi9saXN0L3JlbmRlci1saXN0LWJsb2NrJztcclxuaW1wb3J0ICcuL21hcCc7XHJcbmltcG9ydCBhZGRFdmVudExpc3RlbmVyVG9SZXNpemVCdXR0b24gZnJvbSAnLi9yZXNpemUnO1xyXG5pbXBvcnQgYWRkRXZlbnRMaXN0ZW5lcnNUb1NlbGVjdHMgZnJvbSAnLi9saXN0ZW5lcnMnO1xyXG5pbXBvcnQgJy4va2V5Ym9hcmQnO1xyXG5pbXBvcnQgJy4vcHJpbnQnO1xyXG5cclxud2luZG93Lm9ubG9hZCA9ICgpID0+IHtcclxuICByZW5kZXJUYWJsZUJsb2NrKCk7XHJcbiAgcmVuZGVyTGlzdEJsb2NrKCk7XHJcbiAgY3JlYXRlQ2hhcnQoKTtcclxuICBhZGRFdmVudExpc3RlbmVyVG9SZXNpemVCdXR0b24oKTtcclxuICBhZGRFdmVudExpc3RlbmVyc1RvU2VsZWN0cygpO1xyXG59O1xyXG4iLCJpbXBvcnQgc3RvcmUgZnJvbSAnLi4vc3RvcmUnO1xyXG5pbXBvcnQgc3RhdGUgZnJvbSAnLi4vc3RhdGUnO1xyXG5pbXBvcnQgcmVuZGVyTGlzdCBmcm9tICcuL3JlbmRlci1saXN0JztcclxuaW1wb3J0ICcuLi8uLi9zYXNzL2xpc3QvbGlzdC5jc3MnO1xyXG5pbXBvcnQgcmVuZGVyU3RhdGlzdGljcyBmcm9tICcuLi90YWJsZS9yZW5kZXItc3RhdGlzdGljcyc7XHJcblxyXG5mdW5jdGlvbiByZW5kZXJMaXN0QmxvY2soKSB7XHJcbiAgY29uc3QgbGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNsaXN0Jyk7XHJcblxyXG4gIHN0b3JlLmdldEFsbENvdW50cmllc0RhdGEoKS50aGVuKChkYXRhKSA9PiB7XHJcbiAgICBsaXN0LmFwcGVuZChyZW5kZXJMaXN0KGRhdGEpKTtcclxuICAgIHN0YXRlLmFsbENvdW50cmllc0xpc3QgPSBkYXRhO1xyXG4gIH0pO1xyXG5cclxuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubGlzdF9fc2VsZWN0JykuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGV2ZW50KSA9PiB7XHJcbiAgICBzdGF0ZS5jdXJyZW50TGlzdE1vZGUgPSBldmVudC5jdXJyZW50VGFyZ2V0LnZhbHVlO1xyXG4gICAgbGlzdC5yZW1vdmVDaGlsZChsaXN0Lmxhc3RDaGlsZCk7XHJcbiAgICBzdG9yZS5nZXRBbGxDb3VudHJpZXNEYXRhKCkudGhlbigoZGF0YSkgPT4ge1xyXG4gICAgICBsaXN0LmFwcGVuZChyZW5kZXJMaXN0KHN0YXRlLnNlYXJjaGVkTGlzdCA/IHN0YXRlLnNlYXJjaGVkTGlzdCA6IGRhdGEpKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICBjb25zdCBzZWFyY2hJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzZWFyY2gtY291bnRyeScpO1xyXG4gIHNlYXJjaElucHV0LmNsYXNzTGlzdC5hZGQoJ3NlYXJjaC1pbnB1dCcpO1xyXG4gIHNlYXJjaElucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0Jywgc2VhcmNoSGFuZGxlcik7XHJcbiAgc2VhcmNoSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCBzZWFyY2hIYW5kbGVyKTtcclxuICBzZWFyY2hJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgKGV2ZW50KSA9PiB7XHJcbiAgICBpZiAoZXZlbnQua2V5Q29kZSA9PT0gMTMpIHtcclxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgZnVuY3Rpb24gc2VhcmNoSGFuZGxlcigpIHtcclxuICAgIGlmIChzZWFyY2hJbnB1dC52YWx1ZSA9PT0gJycpIHtcclxuICAgICAgc3RvcmUuZ2V0R2xvYmFsRGF0YSgpLnRoZW4oKGRhdGEpID0+IHtcclxuICAgICAgICByZW5kZXJTdGF0aXN0aWNzKGRhdGEpO1xyXG4gICAgICAgIHN0YXRlLmlzR2xvYmFsID0gdHJ1ZTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBsaXN0LnJlbW92ZUNoaWxkKGxpc3QubGFzdENoaWxkKTtcclxuXHJcbiAgICBjb25zdCBzZWFyY2hSZXF1ZXN0ID0gc2VhcmNoSW5wdXQudmFsdWU7XHJcbiAgICBjb25zdCBzZWFyY2hlZExpc3QgPSBzdGF0ZS5hbGxDb3VudHJpZXNMaXN0LmZpbHRlcigoY291bnRyeSkgPT4gY291bnRyeS5hcmVhLnRvTG93ZXJDYXNlKCkuc3RhcnRzV2l0aChzZWFyY2hSZXF1ZXN0LnRvTG93ZXJDYXNlKCkpKTtcclxuICAgIHN0YXRlLnNlYXJjaGVkTGlzdCA9IHNlYXJjaGVkTGlzdDtcclxuICAgIGxpc3QuYXBwZW5kKHJlbmRlckxpc3Qoc2VhcmNoZWRMaXN0KSk7XHJcblxyXG4gICAgLy8gc3RvcmUuZ2V0QWxsQ291bnRyaWVzRGF0YSgpLnRoZW4oKGRhdGEpID0+IHtcclxuICAgIC8vICAgY29uc3Qgc2VhcmNoUmVxdWVzdCA9IHNlYXJjaElucHV0LnZhbHVlO1xyXG4gICAgLy8gICBjb25zdCBzZWFyY2hlZExpc3QgPSBkYXRhLmZpbHRlcihjb3VudHJ5ID0+IGNvdW50cnkuYXJlYS50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgoc2VhcmNoUmVxdWVzdC50b0xvd2VyQ2FzZSgpKSk7XHJcbiAgICAvLyAgIHN0YXRlLnNlYXJjaGVkTGlzdCA9IHNlYXJjaGVkTGlzdDtcclxuICAgIC8vICAgbGlzdC5hcHBlbmQocmVuZGVyTGlzdChzZWFyY2hlZExpc3QpKTtcclxuICAgIC8vIH0pO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgcmVuZGVyTGlzdEJsb2NrO1xyXG4iXSwic291cmNlUm9vdCI6IiJ9